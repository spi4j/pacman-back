[module service(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::query::service/]
[import fr::pacman::core::aql::query::operation/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::common/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture de l'implémentation d'un service soa./]
[template public implementation (s : soa::Service)]
  [s.classHeader(s.namePackageServiceImpl())/]
  
  import org.springframework.web.bind.annotation.DeleteMapping;
  import org.springframework.web.bind.annotation.GetMapping;
  import org.springframework.web.bind.annotation.PathVariable;
  import org.springframework.web.bind.annotation.PostMapping;
  import org.springframework.web.bind.annotation.PutMapping;
  import org.springframework.web.bind.annotation.RequestBody;
  import org.springframework.web.bind.annotation.RestController;
  
  [for (e : entity::Entity | s.outputEntities())][e.importItf()/][/for]

  @RestController
  public class [s.nameClassServiceImpl()/]
  {
    [for (e : entity::Entity | s.outputEntities())]
      private final [e.nameClassEntityItf()/] [e.name().apply_attributeFinal()/];
    [/for]
  
    ['Constructeur'.commentMultiLines()/]
    public [s.nameClassServiceImpl()/]([s.fds()/])
    {
      [for (e : entity::Entity | s.outputEntities())]
        [e.prefixAffectation()/][e.name().apply_attributeFinal()/] = [e.name().apply_parameterMethodClassicInOut()/];
      [/for]
    }
    
    [if(s.is_applicationCrud())]
      @GetMapping("/all")
      public [o.outputParamType()/] [o.name.apply_methodDefault()/]()
      {
        return [o.prefixAffectation()/][o.repository()/].findAll();
      }
    [/if]
    
    [for (o : soa::Operation | s.operations())]
    [/for]
  }
[/template]

[template private fds(s : soa::Service) post(self.removeLineSeparators())]
  [for (e : entity::Entity | s.outputEntities())]
    [if (eIndex > 1)],[/if] final [e.nameClassEntityItf()/] [e.name().apply_parameterMethodClassicInOut()/]
  [/for]
[/template]