[module serviceServer(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
						'http://www.obeonetwork.org/dsl/entity/3.0.0',
						'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::query::service/]
[import fr::pacman::core::aql::query::operation/]
[import fr::pacman::core::aql::query::parameter/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::class/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture de l'implémentation d'un service soa (couche infrastructure)./]
[template public implementation (s : soa::Service, d : environment::DTO)]
  [s.classHeader(s.namePackageControllerImpl())/]

  import org.springframework.http.HttpStatus;
  import org.springframework.http.MediaType;
  import org.springframework.http.ResponseEntity;
  import org.springframework.stereotype.Controller;
  import org.springframework.beans.factory.annotation.Autowired;
  import org.springframework.web.bind.annotation.DeleteMapping;
  import org.springframework.web.bind.annotation.GetMapping;
  import org.springframework.web.bind.annotation.PathVariable;
  import org.springframework.web.bind.annotation.PostMapping;
  import org.springframework.web.bind.annotation.PutMapping;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.RequestBody;
  import org.springframework.web.bind.annotation.RequestParam;
  import org.springframework.web.bind.annotation.RequestAttribute;  
  import org.springframework.web.bind.annotation.RequestHeader;
  import org.springframework.web.bind.annotation.ResponseBody;
  import [s.namePackageProject()/].[s.namePackageOutItf()/].[s.nameClassServiceOutItf()/];
  import [s.namePackageProject()/].[d.namePackageMapperOutImpl()/].[d.nameClassMapperImpl()/];
  import [s.namePackageProject()/].[s.namePackageRsBase()/].[s.nameClassRsDataNotFoundExceptionImpl()/];
  
  [s.commentClass()/]  
  @Controller
  @RequestMapping("[s.rsUri()/]")
  class [s.nameClassControllerImpl()/]
  {
    
    ['Interface service métier'.commentMultiLines()/]
    private final [s.nameClassServiceOutItf()/] [s.name().apply_attributeFinal()/];
    
    ['Constructeur'.commentMultiLines()/]
    @Autowired
    public [s.nameClassControllerImpl()/](final [s.nameClassServiceOutItf()/] [s.name().apply_parameterMethodClassicInOut()/])
    {
      [s.prefixAffectation()/][s.name().apply_attributeFinal()/] = [s.name().apply_parameterMethodClassicInOut()/];
    }
    
    [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
      [if (o.rsIsOperation())]
        [o.commentOperation()/]
        [o.writeRsAnnotations()/]
        [o.writeRsSignature()/]
        {
           [o.lineSeparator()/]
           [o.writeRsResponse(s, d)/]; 
        }
      [/if]
    [/for]
    [if (s.is_applicationCrud())]
    [/if]
  }
[/template]

[comment écriture de l'implémentation pour le service de persistance (couche infrastructure)./]
[template public implementationIn(s : soa::Service, d : environment::DTO)]
  [s.classHeader(s.namePackageInImpl())/]
  import org.springframework.beans.factory.annotation.Autowired;
  import [s.namePackageProject()/].[s.namePackageInItf()/].[s.nameClassServiceInItf()/];
  import [s.namePackageProject()/].[s.namePackageAnnotation()/].[s.nameClassAnnotationIn()/];
  import [s.namePackageProject()/].[d.namePackageMapperInImpl()/].[d.nameClassMapperImpl()/];
  import [s.namePackageProject()/].[d.associatedEntity().namePackageEntityImpl()/].[d.associatedEntity().nameClassEntityImpl()/];
  import [s.namePackageProject()/].[d.associatedEntity().namePackageEntityDaoItf()/].[d.associatedEntity().nameClassEntityDaoItf()/];
  
  [s.commentInterface()/]
  @[s.nameClassAnnotationIn()/]
  public class [s.nameClassServiceInImpl()/] implements [s.nameClassServiceInItf()/]
  {
      ['Le gestionnaire de persistance'.commentMultiLines()/]
      final [d.associatedEntity().nameClassEntityDaoItf()/] ['dao'.apply_attributeFinal()/];
    
      ['Constructeur'.commentMultiLines()/]
      @Autowired
      public [s.nameClassServiceInImpl()/] (final PersonneRepository ['dao'.apply_parameterMethodClassicIn()/])
      {
         [s.prefixAffectation()/]['dao'.apply_attributeFinal()/] = ['dao'.apply_parameterMethodClassicIn()/];	
      }
   
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
        [o.commentOperation()/]
        @Override
        [o.writeSignature()/]
        {
          //throw new RuntimeException("Not implemented !");
          [if (o.hasOutput())]
            [if (not o.output().isMultiple())]
              [if (o.output().isTypeOptional())]
                Optional<[d.associatedEntity().nameClassEntityImpl()/]> entity = this.dao.findById(identifiant);
                if(entity.isPresent()){
                   return Optional.of([d.nameClassMapperImpl()/].toRecord(entity.get()));
                }
                return Optional.empty();
              [/if]
      
              [else]
                return ['dao'.apply_attributeFinal()/].findAll().stream().map(o -> [d.nameClassMapperImpl()/].toRecord(o))
              	  	.collect(Collectors.toList());
            [/if]
            // return ResponseEntity.status(HttpStatus.CREATED).body(createdResource);
          [/if]
        }
      [/for]
  }
[/template]

[comment écriture de la signature complète d'une opération avec le paramètre en sortie et les paramètres en entrée./]
[query private writeSignature(o : soa::Operation) : String = 'public ' + o.outputType() + ' ' + o.nameOperation()
  + '(' + o.inputParamsSignature() + ')' /]
  
[comment écriture de la signature complète d'une opération avec le paramètre en sortie et les paramètres en entrée./]
[query private writeRsSignature(o : soa::Operation) : String = 'public ' + o.writeRsOutput() + ' ' + o.name().apply_methodDefault() 
  + ' (' + o.writeRsInputs() + ')'/]
  
[comment écriture des annotations pour l'opération rest./]
[query private writeRsAnnotations(o : soa::Operation) : String = 
  if (o.verb = soa::Verb::GET) then '@GetMapping(value = "'+ o.rsUri()
  else if (o.verb = soa::Verb::POST) then '@PostMapping(value = "'+ o.rsUri()
  else if (o.verb = soa::Verb::PUT) then '@PutMapping(value = "'+ o.rsUri()
  else if (o.verb = soa::Verb::OPTIONS) then ''
  else if (o.verb = soa::Verb::DELETE) then '@DeleteMapping(value = "'+ o.rsUri()
  else if (o.verb = soa::Verb::HEAD) then ''
  else if (o.verb = soa::Verb::PATCH) then ''
  else if (o.verb = soa::Verb::TRACE) then ''
  else '' endif endif endif endif endif endif endif endif 
  + '", produces = ' + if (o.rsHasMediaType()) then '"' 
  + o.output().rsMediaType() + '"'else o.defaultRsMediaType() endif + ')'/]

[comment écriture des annotations pour les paramètres rest./]
[query private writeRsAnnotation(p : soa::Parameter) : String = 
 if (p.restData.passingMode = soa::ParameterPassingMode::PATH) then '@PathVariable(name = "' + p.restData.restId + '", '
 else if (p.restData.passingMode = soa::ParameterPassingMode::QUERY) then '@RequestParam(name = "' + p.restData.restId + '", '
 else if (p.restData.passingMode = soa::ParameterPassingMode::HEADER) then '@RequestHeader(name = "' + p.restData.restId + '", '
 else if (p.restData.passingMode = soa::ParameterPassingMode::BODY) then '@RequestBody(' 
 else if (p.restData.passingMode = soa::ParameterPassingMode::COOKIE) then '' 
 else '' endif endif endif endif endif + 'required = ' + p.isMandatory() +  ')'/]

[comment écriture du statut modélisé pour la réponse, si aucun statut on prend celui par défaut./]
[query private writeRsStatus(o : soa::Operation) : String = if (o.rsHasStatusCode()) then o.output().statusCode 
  else o.defaultRsStatusCode() endif/]

[comment écriture de la liste des paramètres en entrée (si existent) pour une opération de type rest./]
[query private writeRsInputs(o : soa::Operation) : String = if (o.hasInput()) then o.input->asOrderedSet()
  ->collect(p : soa::Parameter | 'final ' + p.writeRsAnnotation() + ' ' + p.rsInputType() + ' ' + p.name().apply_parameterMethodClassicIn())
  ->sep(', ')->toString() else '' endif/]
  
[comment écriture du paramètre de sortie (si existe) pour une opération de type rest./]
[query private writeRsOutput(o : soa::Operation) : String = if (o.hasOutput()) then 'ResponseEntity<' + (o.rsOutputType()) + '>' 
  else 'ResponseBody' endif/]

[comment écriture de la chaine complète (avec mapper) pour les paramètres en entrée du service domaine./]
[query private writeRsInputsForService(o : soa::Operation, d : environment::DTO) : String = if (o.hasInput()) then o.input->asOrderedSet()
  ->collect(p : soa::Parameter | p.rsInputForService(d))->sep(', ')->toString() else '' endif/]

[comment écriture de la chaine complète (avec mapper) pour les paramètres en entrée du service domaine./]
[query private rsInputForService(p : soa::Parameter, d : environment::DTO) : String = if (p.type.oclIsKindOf(environment::DTO)) 
  then if (p.isMultiple()) then p.name().apply_parameterMethodClassicIn() + '.stream().map(o -> ' +  d.nameClassMapperImpl() 
  + '.' + 'to record'.apply_methodDefault() + '(o)).collect(Collectors.toList())' else  d.nameClassMapperImpl() + '.' 
  + 'to record'.apply_methodDefault() + '(' + p.name().apply_parameterMethodClassicIn() + ')' endif else p.name() endif /]

[comment écriture de la requête pour le service rest, sert d'aiguillage pour les autres queries en fonction du type de sortie./]
[query private writeRsResponse(o : soa::Operation, s : soa::Service, d : environment::DTO) : String = 'return ' + if (o.hasOutput()) then 
 if (o.output().rsIsTypeOptional()) then if(o.output().isMultiple()) then o.optionalOutputStar(s, d) else o.optionalOutputOne(s, d) endif 
 else if(o.output().isMultiple()) then o.nonOptionalOutputStar(s, d) else o.nonOptionalOutputOne(s, d) endif endif else 'XXX' endif/]
 
[comment écriture pour un résultat optionnel sur un enregistrement./]
[query private optionalOutputOne(o : soa::Operation, s : soa::Service, d : environment::DTO) : String = o.prefixAffectation() + s.name().apply_attributeFinal() 
   + '.' + o.nameOperation() + '(' + o.writeRsInputsForService(d) + ').map(o -> ResponseEntity.status(' + o.writeRsStatus() + ').body('
   + d.nameClassMapperImpl() + '.' + 'to xto'.apply_methodDefault() + '(o))).orElseThrow(() -> new ' + o.nameClassRsDataNotFoundExceptionImpl() 
   + '(' + if (o.rsHasNotFoundFault()) then o.rsNotFoundFault().statusCode + ', "' + o.rsNotFoundFault().statusMessage else o.defaultRsNotFoundStatusCode1() 
   + ', "' endif + '"))'/]

[comment écriture pour un résultat optionnel sur une liste d'enregistrements (pour l'instant 200 avec liste vide)./]
[query private optionalOutputStar(o : soa::Operation, s : soa::Service, d : environment::DTO) : String = 'ResponseEntity.status(' + o.writeRsStatus() + ').body(' +
   if (o.output().type.oclIsKindOf(environment::DTO)) then o.prefixAffectation() + s.name().apply_attributeFinal() 
   + '.' + o.nameOperation() + '(' + o.writeRsInputsForService(d) + ').stream().map(o -> ' + d.nameClassMapperImpl() 
   + '.' + 'to xto'.apply_methodDefault() + '(o)).collect(Collectors.toList()))' else o.prefixAffectation() + s.name().apply_attributeFinal() + '.' 
   + o.nameOperation() + '(' + o.writeRsInputsForService(d) + '))' endif/]

[comment écriture pour un résultat obligatoire sur un enregistrement./]
[query private nonOptionalOutputOne(o : soa::Operation, s : soa::Service, d : environment::DTO) : String = 'ResponseEntity.status(' + o.writeRsStatus() + ').body(' +
   if (o.output().type.oclIsKindOf(environment::DTO)) d.nameClassMapperImpl() + '.' 
   + 'to xto'.apply_methodDefault() + '(' + o.prefixAffectation() + s.name().apply_attributeFinal() + '.' + o.nameOperation() 
   + '(' + o.writeRsInputsForService(d) + ')))' else o.prefixAffectation() + s.name().apply_attributeFinal() + '.' 
   + o.nameOperation() + '(' + o.writeRsInputsForService(d) + '))' endif /]

[comment écriture pour un résultat obligatoire sur un liste d'enregistrements./]
[query private nonOptionalOutputStar(o : soa::Operation, s : soa::Service, d : environment::DTO) : String = 'ResponseEntity.status(' + o.writeRsStatus() + ').body(' +
   if (o.output().type.oclIsKindOf(environment::DTO)) then  o.prefixAffectation() + s.name().apply_attributeFinal() 
   + '.' + o.nameOperation() + '(' + o.writeRsInputsForService(d) + ').stream().map(o -> ' + d.nameClassMapperImpl() 
   + '.' + 'to xto'.apply_methodDefault() + '(o)).collect(Collectors.toList()))' else o.prefixAffectation() + s.name().apply_attributeFinal() + '.' 
   + o.nameOperation() + '(' + o.writeRsInputsForService(d) + '))' endif/]

