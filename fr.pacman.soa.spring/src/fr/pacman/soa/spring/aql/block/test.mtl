[module test(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0', 
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::resources/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::query::service/]
[import fr::pacman::core::aql::query::database/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::operation/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::method/]

[import fr::pacman::core::service::DatabaseUtils/]

[comment écriture de l'implémentation du résolveur de paramètres pour les tests junit (domain + infra)./]
[template public serviceOutResolverImpl(s : soa::Service)] 
  [s.classHeader(s.namePackageCommonResolver())/]
  
  import org.junit.jupiter.api.extension.ExtensionContext;
  import org.junit.jupiter.api.extension.ParameterContext;
  import org.junit.jupiter.api.extension.ParameterResolutionException;
  import org.junit.jupiter.api.extension.ParameterResolver;
  import [s.namePackageProject()/].[s.namePackageOutItf()/].[s.nameClassServiceOutItf()/];
  import [s.namePackageProject()/].[s.namePackageOutStubImpl()/].[s.nameClassServiceOutStubImpl()/];
  import [s.namePackageProject()/].[s.namePackageServiceImpl()/].[s.nameClassServiceImpl()/];
  
 /**
  * Cette classe implémente l'interface {@link ParameterResolver} et sert à
  * résoudre les paramètres dans le contexte d'un test, en fournissant une
  * instance de {@link [s.nameClassServiceImpl()/]}. Elle est utilisée pour
  * injecter une instance de {@link [s.nameClassServiceImpl()/]} dans les tests de
  * manière automatique.
  * 
  * La méthode {@link #supportsParameter(ParameterContext, ExtensionContext)}
  * vérifie si le paramètre peut être résolu par ce résolveur, et la méthode
  * {@link #resolveParameter(ParameterContext, ExtensionContext)} résout le
  * paramètre en créant une instance de {@link [s.nameClassServiceImpl()/]}.
  * <p>
  * Le resolveur permet d'injecter automatiquement le stub (au lieu de la couche
  * de persistance) dans l'instance de {@link [s.nameClassServiceImpl()/]}.
  * <p>
  * Cette classe est typiquement utilisée dans le cadre des tests unitaires avec
  * JUnit 5 et l'extension de test JUnit Jupiter.
  *
  * @Author [s.nameAuthor()/] 
  * 
  * @see ParameterResolver
  * @see [s.nameClassServiceImpl()/]
  * @see [s.nameClassServiceOutItf()/]
  * @see [s.nameClassServiceOutStubImpl()/]
  */
  public class [s.nameClassServiceOutResolverImpl()/] implements ParameterResolver 
  {
  
    /**
     * Vérifie si ce résolveur prend en charge le paramètre en question.
     * 
     * @param parameterContext le contexte du paramètre à vérifier
     * @param extensionContext le contexte de l'extension du test
     * @return true si ce résolveur prend en charge le paramètre, sinon false
     * @throws ParameterResolutionException si une erreur se produit lors de la
     *                                      résolution du paramètre
     */
    @Override
    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
    		throws ParameterResolutionException {
    	return parameterContext.getParameter().getType() == [s.nameClassServiceImpl()/].class;
    }
    
    /**
    * Résout le paramètre en créant une instance de
    * {@link [s.nameClassServiceImpl()/]} avec un {@link [s.nameClassServiceOutItf()/]}.
    * Dans cet exemple, un stub de {@link [s.nameClassServiceOutItf()/]} est utilisé pour
    * les tests.
    * 
    * @param parameterContext le contexte du paramètre à résoudre
    * @param extensionContext le contexte de l'extension du test
    * @return une instance de {@link [s.nameClassServiceImpl()/]} prête à être
    *         utilisée dans le test
    * @throws ParameterResolutionException si une erreur se produit lors de la
    *                                      résolution du paramètre
    */
    @Override
    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext)
    		throws ParameterResolutionException {
    	[s.nameClassServiceOutItf()/] [s.suffixInterfaceOut().apply_variableDefault()/] = new [s.nameClassServiceOutStubImpl()/]();
    	return new [s.nameClassServiceImpl()/]([s.suffixInterfaceOut().apply_variableDefault()/]);
    }
  }
[/template]

[comment écriture de l'implémentation pour les tests du domaine./]
[template public serviceTestImpl (s : soa::Service)]
  [s.classHeader(s.namePackageServiceImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    import org.junit.jupiter.api.Test;
    import org.junit.jupiter.api.extension.ExtendWith;
    import static org.junit.jupiter.api.Assertions.*;
    import [s.namePackageProject()/].[s.namePackageCommonException()/].[s.nameClassNotImplementedExceptionImpl()/];
    import [s.namePackageProject()/].[s.namePackageCommonResolver()/].[s.nameClassServiceOutResolverImpl()/];
    
  [/protected]
  
  /**
   * Classe de test métier pour {@link [s.nameClassServiceImpl()/]}.
   * 
   * Cette classe contient des tests unitaires métier pour les méthodes du service
   * {@link [s.nameClassServiceImpl()/]}. Les tests sont exécutés avec l'extension 
   * {@link [s.nameClassServiceOutResolverImpl()/]} pour la gestion des paramètres.
   * 
   * @see [s.nameClassServiceImpl()/]
   * @see [s.nameClassServiceOutResolverImpl()/]
   */
  @ExtendWith([s.nameClassServiceOutResolverImpl()/].class)
  public class [s.nameClassServiceTestImpl()/]
  {
  
    [for (o | s.ownedInterface.ownedOperations)]
      @Test
      public void [o.name().apply_methodDefault()/](final [s.nameClassServiceImpl()/] [s.name().apply_parameterMethodClassicIn()/])
      {
        
        [protected (o.name().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          
          throw new [s.nameClassNotImplementedExceptionImpl()/]
            ("Le test n'a pas été implémenté pour le service : [s.nameClassServiceImpl()/]");
          
        [/protected]
      }
    [/for]
    
    [protected (s.nameClassServiceTestImpl().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
[/template]

[comment écriture de l'implémentation pour les tests de l'infrastructure./]
[template public serviceIntegrationTestImpl (s : soa::Service)]
  [s.classHeader(s.namePackageInIntegrationTestImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    import javax.sql.DataSource;
    import org.junit.jupiter.api.Test;
    import org.junit.jupiter.api.extension.ExtendWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
    import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
    import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
    import org.springframework.boot.test.context.SpringBootTest; 
    import org.springframework.test.context.ContextConfiguration;
    import org.springframework.boot.test.context.TestConfiguration;
    import org.springframework.context.annotation.ComponentScan;
    import org.springframework.context.annotation.FilterType;
    import org.springframework.test.context.TestPropertySource;
    import org.springframework.test.context.junit.jupiter.SpringExtension;
    import org.springframework.test.web.servlet.MockMvc;
    import org.springframework.test.web.servlet.ResultActions;
    import org.springframework.http.MediaType;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import [s.namePackageProject()/].[s.nameClassIntegrationTestAbstract()/];
    import [s.namePackageProject()/].[s.namePackageOutItf()/].[s.nameClassServiceOutItf()/];
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationIn()/];
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationStubOut()/];
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationOut()/];
    import [s.namePackageProject()/].[s.namePackageOutStubImpl()/].[s.nameClassServiceOutStubImpl()/];
    import [s.namePackageProject()/].[s.namePackageCommonException()/].[s.nameClassNotImplementedExceptionImpl()/];
    [for (d | s.associatedDtos())]
      import [d.namePackageProject()/].[d.namePackageDtoImpl()/].[d.nameClassDtoImpl()/];
    [/for]
    
  [/protected]
  
  /**
   * Test d'intégration pour la classe {@link [s.nameClassServiceTestImpl()/]}.
   * 
   * Cette classe est utilisée pour tester les fonctionnalités de la gestion des personnes
   * via les tests d'intégration avec un environnement Spring Boot simulé. Elle utilise
   * des annotations Spring comme {@link SpringBootTest}, {@link TestPropertySource}, et
   * {@link AutoConfigureMockMvc} pour configurer un environnement de test spécifique.
   * <p>
   * Il est à noter que le fichier de propriétés chargé avec
   * {@link @TestPropertySource} remplacera le fichier application.properties
   * existant, il contient les détails pour configurer le stockage de persistance.
   *
   * @author [s.nameAuthor()/]
   */
  [protected ((s.nameClassServiceTestImpl() + 'anno').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  @AutoConfigureMockMvc
  @ExtendWith(SpringExtension.class)
  @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)
  @TestPropertySource(locations = "classpath:[s.nameIntegrationResources()/].properties")
  public class [s.nameClassServiceTestImpl()/] extends [s.nameClassIntegrationTestAbstract()/]
  {
     
    /**
     * Instance de {@link MockMvc} pour effectuer des requêtes HTTP simulées dans les tests.
     */
     private MockMvc ['rest helper'.apply_attributeDefault()/];
     
    /**
     * Instance de {@link [s.nameClassServiceOutItf()/]} qui est utilisée pour gérer 
     * les opérations de persistance au niveau des tests.
     */
     private [s.nameClassServiceOutItf()/] ['provider'.apply_attributeDefault()/];
     
     /**
      * Instance de {@link ObjectMapper} utilisée pour gérer les opérations de
      * conversion entre une entité et json.
      */
     ObjectMapper ['object mapper'.apply_attributeDefault()/];
     
     ['Constructeur'.commentMultiLines()/]
     @Autowired
     [s.nameClassServiceTestImpl()/](final DataSource ['data source'.apply_parameterMethodClassicIn()/]
        , final [s.nameClassServiceOutItf()/] ['provider'.apply_parameterMethodClassicIn()/]
        , final MockMvc ['rest helper'.apply_parameterMethodClassicIn()/]
        , final ObjectMapper ['object mapper'.apply_parameterMethodClassicIn()/]){
        
        [s.prefixAffectation()/]['provider'.apply_attributeDefault()/] = ['provider'.apply_parameterMethodClassicIn()/];
        [s.prefixAffectation()/]['object mapper'.apply_attributeDefault()/] = ['object mapper'.apply_parameterMethodClassicIn()/];
        [s.prefixAffectation()/]['rest helper'.apply_attributeDefault()/] = ['rest helper'.apply_parameterMethodClassicIn()/];
        ['init sql'.apply_methodDefault()/](['data source'.apply_parameterMethodClassicIn()/]);
     }
     
     [for (o | s.ownedInterface.ownedOperations)]
       @Test
       [protected ((o.name() + ' annotation').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
       [/protected]
       public void [o.name().apply_methodDefault()/]() throws Exception
       {
          
          [protected ((o.name() + ' init').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
             
             [o.writeRsInitInputParams()/]
             
          [/protected]
          
          [o.writeRsOperation(s)/]
          
          [protected ((o.name() + ' result').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
            
          [/protected]
          
          .andExpect(status().is(['expected status'.apply_variableDefault()/]));
       }
       
     [/for]
     
     [protected (s.nameClassServiceTestImpl().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
       
     [/protected]
     
    /**
     * Configuration des composants spécifiques pour les tests d'intégration.
     * 
     * Cette configuration permet de scanner des classes spécifiques et d'inclure ou exclure
     * certains beans dans le contexte Spring utilisé pour les tests.
     * 
     * Les classes annotées avec {@link TestConfiguration} sont exclues de l'analyse
     * des composants. Les services annotés avec {@link [s.nameClassAnnotationIn()/]} 
     * et {@link [s.nameClassAnnotationStubOut()/]} sont inclus.
     * <p>
     * Pour couper l'acces à la couche de persistance et passer sur le bouchon ,
     * modifier le nom de la classe '[s.nameClassServiceOutStubImpl()/]' en
     * '[s.nameClassServiceOutImpl()/]'.
     *
     */
     [protected ((s.nameClassServiceTestImpl() + 'config').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
       
       @TestConfiguration
       @ComponentScan(
             basePackages = { "[s.namePackageProject()/]" },
             includeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION
              , classes = {[s.nameClassAnnotationIn()/].class, [s.nameClassAnnotationStubOut()/].class
              , [s.nameClassAnnotationOut()/].class})},
             excludeFilters = {@ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE
              , classes = {[s.nameClassServiceOutStubImpl()/].class})})
       static class [s.nameClassServiceTestImpl()/]Configuration {
       }
       
     [/protected]
  }
[/template]

[comment écriture de liste des paramètres d'entrée de l'opération pour initialisation./]
[query private writeRsInitInputParams(o : soa::Operation) : String = o.input->asOrderedSet()->collect(o1 | o1.description.commentSingleLine() 
	+  o1.type.type() + ' ' + o1.name().apply_attributeDefault() + ' = null;')->sep(o.lineSeparator() + o.lineSeparator())->toString() 
	+ o.lineSeparator() + o.lineSeparator() + 'Le statut attendu suite au test'.commentSingleLine() + 'int ' 
	+ 'expected status'.apply_variableDefault() + ' = 200;'/]

[comment écriture du corps de l'opération./]
[query private writeRsOperation(o : soa::Operation, s : soa::Service) : String = 'ResultActions ' + 'result'.apply_variableDefault() 
	+ ' = ' + 'rest helper'.apply_attributeDefault() + '.perform(' + o.writeRsUri(s) + o.writeRsInputBodyParams() 
	+ '.contentType("' + if (o.hasMediaRsType()) then  o.output->first().mediaRsType() else o.defaultRsMediaType() endif + '")' + ')'/]

[comment écriture de l'uri (avec les paramètres) pour l'opération rest./]
[query private writeRsUri(o : soa::Operation, s : soa::Service) : String = 
  if (o.verb = soa::Verb::GET) then 'get("' + s.rsUri() + o.rsUri() + '"' + o.writeRsInputParams()
  else if (o.verb = soa::Verb::POST) then 'post("'+ o.rsUri() + '"'
  else if (o.verb = soa::Verb::PUT) then ''
  else if (o.verb = soa::Verb::OPTIONS) then ''
  else if (o.verb = soa::Verb::DELETE) then ''
  else if (o.verb = soa::Verb::HEAD) then ''
  else if (o.verb = soa::Verb::PATCH) then ''
  else if (o.verb = soa::Verb::TRACE) then ''
  else '' endif endif endif endif endif endif endif endif + ')'/]
  
[comment vérifie si le paramètre est passé par l'uri de l'envoi./][query private isParam(p : soa::Parameter) : Boolean = p.restData.passingMode = soa::ParameterPassingMode::PATH 
	or p.restData.passingMode = soa::ParameterPassingMode::QUERY/]
	
[comment vérifie si le paramètre est passé dans le corps de l'envoi./]
[query private isBody(p : soa::Parameter) : Boolean = p.restData.passingMode = soa::ParameterPassingMode::BODY/]
  
[comment écriture des différents paramètres à injecter pour l'opération (uri)./]
[query private writeRsInputParams(o : soa::Operation) : String = if (o.hasInputs() and not o.input->select(o1 | o1.isParam())->isEmpty()) then ', ' +
	o.input->asOrderedSet()->select(o1 | o1.isParam())->collect(o2 | o2.name().apply_variableDefault())->sep(', ')->toString() else '' endif /]

[comment écriture des différents paramètres à injecter pour l'opération (corps)./]
[query private writeRsInputBodyParams(o : soa::Operation) : String = if (o.hasInputs() and not o.input->select(o1 | o1.isBody())->isEmpty()) 
	then '.' +  o.input->asOrderedSet()->select(o1 | o1.isBody())->collect(o2 | 'content(' + 'object mapper'.apply_variableDefault() 
	+ '.writeValueAsString(' + o2.name().apply_attributeDefault() + '))')->sep('.')->toString() else '' endif/]
	