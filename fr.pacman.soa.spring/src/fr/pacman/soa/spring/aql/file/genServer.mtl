[module genServer(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]	
[import fr::pacman::core::aql::name::classes/]	
[import fr::pacman::core::aql::name::packages/]	
[import fr::pacman::core::aql::name::resources/]	
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::soa::spring::aql::block::service/]
[import fr::pacman::soa::spring::aql::block::security/]
[import fr::pacman::soa::spring::aql::block::test/]

[comment écriture du fichier d'implémentation pour le contrôleur utilisateur (application)./]
[template public fileRsServiceImpl(s: soa::Service, ds : OrderedSet(environment::DTO))]
  [file (s.nameClassRsServiceImpl().toFileJava(s.namePackageRsControllerImpl()), overwrite, s.defaultFileEncoding())]
    [s.serviceRsImpl(ds)/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation pour le contrôleur d'authentification (jeton) (application)./]
[template public fileRsServiceTokenImpl(m : soa::System)]
  [file (m.nameClassRsServiceTokenImpl().toFileJava(m.namePackageRsControllerBase()), overwrite, m.defaultFileEncoding())]
    [m.securityRsTokenImpl()/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation pour un service de persistance (infra)./]
[template public fileServiceOutImpl(s: soa::Service, ds : OrderedSet(environment::DTO))]
  [file (s.nameClassServiceOutImpl().toFileJava(s.namePackageOutImpl()), overwrite, s.defaultFileEncoding())]
    [s.outImpl(ds)/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation pour un service d'appel externe (infra)./]
[template public fileServiceOutExtImpl(s: soa::Service, ds : OrderedSet(environment::DTO))]
  [file (s.nameClassServiceOutExtImpl().toFileJava(s.namePackageOutImpl()), overwrite, s.defaultFileEncoding())]
    [s.outExtImpl(ds)/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation pour le service de persistance crud (infra)./]
[template public fileServiceCrudOutImpl(d: environment::DTO, ds : OrderedSet(environment::DTO))]
  [file (d.nameClassServiceCrudOutImpl().toFileJava(d.namePackageCrudOutImpl()), overwrite, d.defaultFileEncoding())]
    [d.crudOutImpl()/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation la configuration de la sécurité des services rest (application)./]
[template public fileRsSecurityConfigImpl(m : soa::System)]
  [file (m.nameClassRsSecurityConfigImpl().toFileJava(m.namePackageRsBase()), overwrite, m.defaultFileEncoding())]
    [m.securityRsConfigImpl()/]
  [/file]
[/template]

[comment écriture de l'implémentation pour le service de création d'un jeton jwt (application)./]
[template public fileRsSecurityTokenServiceImpl(any : ecore::EObject)]
  [file (any.nameClassRsTokenServiceImpl().toFileJava(any.namePackageRsBase()), overwrite, any.defaultFileEncoding())]
    [any.securityRsTokenServiceImpl()/]
  [/file]
[/template]

[comment écriture du fichier d'implémentation les tests d'intégration pour un service (application)./]
[template public fileInIntegrationTestImpl(s : soa::Service)]
  [file (s.nameClassServiceTestImpl().toFileJavaT(s.namePackageInIntegrationTestImpl()), overwrite, s.defaultFileEncoding())]
    [s.serviceIntegrationTestImpl()/]
  [/file]
[/template]

[comment écriture de la classe de résolution du jeton JWT pour les services sécurisés rest./]
[template public fileRsTokenResolverImpl(m : soa::System)]
  [file (m.nameClassRsTokenResolverImpl().toFileJava(m.namePackageRsBase()), overwrite, m.defaultFileEncoding())]
    [m.rsTokenResolverImpl()/]
  [/file]
[/template]