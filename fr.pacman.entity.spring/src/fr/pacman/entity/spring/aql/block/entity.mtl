[module entity(		'http://www.obeonetwork.org/dsl/entity/3.0.0', 
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]	
[import fr::pacman::core::aql::string/]		
[import fr::pacman::core::aql::name::classes/]	
[import fr::pacman::core::aql::name::databases/]	
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::query::entity/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::resources/]	
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::method/]

[import fr::pacman::core::service::AnnotationUtils/]	
[import fr::pacman::core::property::project::ProjectProperties/]	

[comment écriture du corps pour la classe d'implémentation d'une entité./]
[template public entityImpl (e : entity::Entity)]
  [e.classHeader(e.namePackageEntityImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.defaultImports()/]
    import java.util.Objects;
    import jakarta.persistence.Column;
    import jakarta.persistence.Entity;
    import jakarta.persistence.FetchType;
    import jakarta.persistence.ManyToMany;
    import jakarta.persistence.JoinTable;
    import jakarta.persistence.Id;
    import jakarta.persistence.Table;
    import jakarta.persistence.Transient;
    import jakarta.persistence.GeneratedValue;
    import jakarta.persistence.GenerationType;
    import jakarta.persistence.JoinColumn;
    import jakarta.persistence.OneToOne;
    import jakarta.persistence.ManyToOne;
    import jakarta.persistence.OneToMany;
    import jakarta.persistence.CascadeType;
    import jakarta.persistence.SequenceGenerator;
    import org.hibernate.annotations.SQLDelete;
    import org.hibernate.annotations.SQLRestriction;
    import [e.namePackageProject()/].[e.namePackageInfrastructureBase()/].[e.nameClassEntityAbs()/];
    
    [/protected]
  
  [e.commentClass()/]
  @Entity
  [e.writeAnnotationTable()/]
  public class [e.nameClassEntityImpl()/] extends [e.nameClassEntityAbs()/]
  {   
      
      // CONSTANTES ET ATTRIBUTS
      [protected ('constantes'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]

      [/protected]
      [let fk = e.referencesFKSB()]
      [let jt = e.referencesJT()]
        
        ['Id'.commentSingleLine()/]
        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "[(e.name() + '_SEQUENCE').toUpper()/]")
        @Column(name = "[e.namePrimaryKey().toUpper()/]", nullable = false)
        private [e.defaultTypePk()/] [e.writePk()/];	
        
        [for (a : environment::Attribute | e.attributesNoPK())]
          [a.comment().commentSingleLine()/]
          [protected (a.name().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          [a.writeAnnotationColumn()/]
          private [a.type()/] [a.nameAttribute()/];
          
        [/for]
        [for (r : environment::Reference | fk)]
          [r.referencedEntity(e).comment().commentSingleLine()/]
          [protected (r.name().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          [r.writeAnnotationsFK(e)/]
          private [r.referencedTypeSignature(e)/] [r.referencedEntity(e).referencedName(r).apply_attributeDefault()/];
          
        [/for]  
        [for (r : environment::Reference | jt)]
          [r.referencedEntity(e).comment().commentSingleLine()/]
          [protected (r.name().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          [r.writeAnnotationsJT(e)/]
          private [r.referencedTypeSignature(e)/] [r.referencedEntity(e).referencedName(r).apply_attributeDefault()/];
          
        [/for]
         
        [('Constructeur sans paramètre pour la classe \'' + e.nameClassEntityImpl() + '\'').commentMultiLines()/]
        public [e.nameClassEntityImpl()/] ()
        {
           super();
           
           [protected ('constructor without paramater'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
           [/protected]
        }
        
        [('Constructeur avec paramètres pour la classe \'' + e.nameClassEntityImpl() + '\'').commentMultiLines()/]
        public [e.nameClassEntityImpl()/] ([e.inputSignature(fk)/])
        {
           
           super();
           [for (a : environment::Attribute | e.attributesNoPK())]
             [e.prefixAffectation()/][a.name().apply_attributeDefault()/] = [a.name().apply_parameterMethodClassicIn()/];
           [/for]
           [for (r : environment::Reference | fk)]
             [e.prefixAffectation()/][r.referencedEntity(e).referencedName(r).apply_attributeDefault()/] 
                  = [r.referencedEntity(e).referencedName(r).apply_parameterMethodClassicIn()/];
           [/for]
           
           [protected ('constructor with parameters'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
           [/protected]
        }
        
        /**
         * Retourne l'identifiant pour l'entité'. 
         *
         * @return la valeur de l'identifiant'.
         */
        public [e.defaultTypePk()/] [e.nameSimplePropertyID().apply_methodGet()/]()
        {
           return [e.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/];
        }
        
        /**
         * Affecte l'identifiant pour l'entité'. 
         *
         * @param la valeur de l'identifiant'.
         */
        public void [e.nameSimplePropertyID().apply_methodSet()/]
        (final [e.defaultTypePk()/] [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/])
        {
            [e.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/] 
               = [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/];
        }
        
        [for (a : environment::Attribute | e.attributesNoPK())]
          [a.commentGet()/]
          public [a.type()/] [a.nameAttribute().apply_methodGet()/]()
          {
             return [a.prefixAffectation()/][a.nameAttribute()/];
          }
          
          [a.commentSet()/]
          public void [a.nameAttribute().apply_methodSet()/]
          (final [a.type()/] [a.nameAttribute().apply_parameterMethodClassicIn()/]) 
          {
             [a.prefixAffectation()/][a.nameAttribute()/] 
                = [a.nameAttribute().apply_parameterMethodClassicIn()/];
          }
          
        [/for]
        
        [for (r : environment::Reference | fk->union(jt))]
          [let l = r.isLazyReference()]
            [r.referencedEntity(e).referencedName(r).commentGet()/]
            public [r.referencedTypeSignature(e)/] [r.referencedEntity(e).referencedName(r).apply_methodGet()/]()
            {
               return [r.prefixAffectation()/][r.referencedEntity(e).referencedName(r).apply_attributeDefault()/];
            }
            
            [r.referencedEntity(e).referencedName(r).commentSet()/]
            public void [r.referencedEntity(e).referencedName(r).apply_methodSet()/]
              (final [r.referencedTypeSignature(e)/] [r.referencedEntity(e).referencedName(r).apply_parameterMethodClassicIn()/])
            {
               [r.prefixAffectation()/][r.referencedEntity(e).referencedName(r).apply_attributeDefault()/] 
                  = [r.referencedEntity(e).referencedName(r).apply_parameterMethodClassicIn()/];
            }
          [/let]
        [/for]
        
        // METHODES
        [protected ('methods'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]

        [/protected]
        
        /** 
         * Compare cet objet avec l'objet spécifié pour déterminer s'ils sont égaux.
         *
         * Cette méthode vérifie si l'instance actuelle et l'objet fourni sont la même instance,
         * puis compare les attributs des deux objets pour en vérifier l'égalité. La comparaison
         * est effectuée à l'aide de la méthode {@link Objects#equals(Object, Object)} afin de gérer 
         * correctement les valeurs de type 'null'.
         *
         * @param ['obj'.apply_parameterMethodClassicIn()/] L'objet à comparer avec l'instance actuelle. 
         * Celui-ci doit être une instance de {@link [e.nameClassEntityImpl()/]} pour une comparaison valide.
         *
         * @return {@code true} si l'objet spécifié est égal à l'instance actuelle, {@code false} sinon.
         */
         @Override
         public boolean equals(Object ['obj'.apply_parameterMethodClassicIn()/])
         {
           if (this == ['obj'.apply_parameterMethodClassicIn()/]) {
              return true;
           }	  
             
           if (!(['obj'.apply_parameterMethodClassicIn()/] instanceof [e.nameClassEntityImpl()/])) {
              return false;
           }
            
           [e.nameClassEntityImpl()/] [e.name()/] = ([e.nameClassEntityImpl()/]) ['obj'.apply_parameterMethodClassicIn()/];
           return Objects.equals([e.prefixAffectation()/][e.writePk()/], [e.writePk()/]) [for (a : environment::Attribute | e.attributesNoPK())] 
              && Objects.equals([a.prefixAffectation()/][a.nameAttribute()/], [e.name()/].[a.nameAttribute()/])[/for];
        }
          
        /**
         * Retourne un code de hachage pour l'objet actuel.
         * 
         * Elle utilise la méthode {@link Objects#hash(Object...)} pour générer un code de hachage combiné 
         * basé sur ces attributs. Ce code de hachage est utilisé dans des structures de données 
         * telles que les tables de hachage.
         *
         * @return Le code de hachage pour l'objet actuel.
         */
        @Override
        public int hashCode() 
        {
          return Objects.hash([e.prefixAffectation()/][e.writePk()/][for (a : environment::Attribute | e.attributesNoPK())], 
            [e.prefixAffectation()/][a.nameAttribute()/][/for]);
        }
        
        /**
         * Retourne une représentation sous forme de chaîne de caractères de l'objet actuel.
         * 
         * Cette méthode est utile pour obtenir une représentation lisible de l'objet, notamment pour les 
         * opérations de débogage ou de journalisation.
         */
         @Override
         public String toString() 
         {
           return "[e.nameClassEntityImpl()/] { [e.writePk()/] = " + [e.prefixAffectation()/][e.writePk()/]
             [for (a : environment::Attribute | e.attributesNoPK())] 
             + "[a.nameAttribute()/] = " + [e.prefixAffectation()/][a.nameAttribute()/][/for] + "}"; 
         }
     [/let]
     [/let]
  }
[/template]

[comment écriture de l'interface pour une entité (au sens Spring)./]
[template public persistItf (e : entity::Entity)]
  [e.classHeader(e.namePackageEntityPersistItf())/]
  [e.defaultImports()/]
  import org.springframework.data.jpa.repository.JpaRepository;
  [e.importImpl()/]
  
  /**
   * 
   */
  public interface [e.nameClassEntityPersistItf()/] extends JpaRepository<[e.nameClassEntityImpl()/], Long> {
    
    [protected (e.nameClassEntityPersistItf().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
    
  }
[/template]

[comment simmple raccourci pour l'écriture de la clé primaire./]
[query private writePk(e : entity::Entity) : String = e.nameSimplePropertyID().apply_attributeDefault()/]

[comment vérifie si la référence a une stratégie de récupération paresseuse (LAZY)./]
[query private isLazyReference (r : environment::Reference) : Boolean = r.is_metaFetchLazy() or r.isMultipleBidirectionnal()/]

[comment écriture du type de 'cascade' pour la référence./]  
[query private writeCascade(r : environment::Reference) : String = '@Cascade(' + if (r.get_metaLiteralCascadeType().index(',') > 0) 
  then '{' + r.get_metaLiteralCascadeType().tokenize(',')->collect(o | 'CascadeType.' + o)->sep(', ') + '})' 
  else 'CascadeType.' + r.get_metaLiteralCascadeType()  + ')'endif /]

[comment écriture de l'annotation @Table pour l'entité./]
[query private writeAnnotationTable(e : entity::Entity) : String = '@Table(name = "' + e.nameTable().toUpper() + '"' + if (e.get_SQLTableSchema().exists()) 
  then ', schema = "' + e.get_SQLTableSchema().toUpper() + '"' else '' endif + ')' + e.lineSeparator() + '@SequenceGenerator(name = "' + (e.name() 
  + '_SEQUENCE').toUpper() + '", sequenceName = "' + (e.nameTableSchema() + e.suffixSqlSequence()).toUpper() + ',allocationSize=1")' 
  + if (e.hasXtopSup()) then e.lineSeparator() + '@SQLDelete(sql = "UPDATE ' + e.nameTable().toUpper() + ' SET ' + e.keyXtopSup() 
  + ' = true WHERE ' + e.namePrimaryKey().toUpper() + ' = ?")' + e.lineSeparator() + '@SQLRestriction("' + e.keyXtopSup() 
  + ' = false")' else '' endif/]
  
[comment écriture de l'annotation @column pour chaque attribut de l'entité./]
[query private writeAnnotationColumn(a : environment::Attribute) : String = '@Column(name = "' + a.nameAttribut().toUpper() +'", nullable = ' 
  + not a.isMandatory()  + if (a.has_metaPhysicalSize() and a.type.isAlpha()) then ', length = ' + a.get_metaPhysicalSize() 
  else if (a.has_metaPhysicalSize() and a.type.isNumeric()) then ', precision = ' + a.get_metaPhysicalSize() else if (a.has_metaPhysicalSize() 
  and a.type.isDecimal()) then ', scale = ' +  a.get_metaPhysicalSize()  else '' endif  endif endif + ')'/]
  
[comment écriture de la chaine complète des annotations pour faire les liaisons inter-tables (fk)./]
[query private writeAnnotationsFK(r : environment::Reference, e : entity::Entity) : String = if (r.has_metaCascadeType()) then r.writeCascade() 
  +  r.lineSeparator() else '' endif + if (r.isMultiple()) then if (r.containingType = e) then '@OneToMany(fetch = FetchType.' + if (r.is_metaFetchLazy()) 
  then 'LAZY' else 'EAGER' endif + ', mappedBy = "' + e.name().apply_attributeDefault() + '")' else '@ManyToOne()' + r.lineSeparator() 
  + '@JoinColumn(name = "' + r.referencedEntity(e).nameSimplePropertyID().apply_attributeDefault() + '", nullable = false)' endif else '@ManyToOne(fetch = FetchType.' 
  + if (r.is_metaFetchLazy()) then 'LAZY' else 'EAGER' endif +')' + r.lineSeparator() + '@JoinColumn(name = "' + if (r.isZeroOneRecursive()) 
  then r.nameSimplePropertyID().apply_attributeDefault() else r.referencedEntity(e).nameSimplePropertyID().apply_attributeDefault() endif + '", referencedColumnName = "' 
  + r.referencedEntity(e).namePrimaryKey().toUpper() + '", nullable = ' + if (r.multiplicity = environment::MultiplicityKind::ONE) then 'false' else 'true' endif +')' endif/]
  
[comment écriture de la chaine complète des annotations pour faire les liaisons inter-tables (n-n jt)./]
[query private writeAnnotationsJT(r : environment::Reference, e : entity::Entity) : String = if (r.has_metaCascadeType()) then r.writeCascade() 
  +  r.lineSeparator() else '' endif + '@ManyToMany(fetch = FetchType.'+ if (r.is_metaFetchLazy()) then 'LAZY' else 'EAGER' endif 
  + ', targetEntity = ' + r.referencedEntity(e).nameClassEntityImpl() +'.class)' + e.lineSeparator() + '@JoinTable(name = "' + r.nameTableJoin().toUpper() + '", ' 
  + if (e.get_SQLTableSchema().exists()) then 'schema = "' + e.get_SQLTableSchema().toUpper() + '"' else '' endif +  ', joinColumns = @JoinColumn(name = "' 
  + e.namePrimaryKey().toUpper() + '"), inverseJoinColumns = ' + '@JoinColumn(name = "' + r.referencedEntity(e).namePrimaryKey().toUpper() 
  + if (r.isStarRecursive()) then e.suffixSqlPrimaryKeyJoinRecursive() else '' endif + '"))'/]
 