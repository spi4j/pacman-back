[module test(		'http://www.obeonetwork.org/dsl/entity/3.0.0', 
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]	
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]	
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::resources/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::attributes/]
[import fr::pacman::core::aql::query::entity/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::query::reference/]	
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::resources/]	
[import fr::pacman::core::aql::rule::method/]	
[import fr::pacman::core::aql::rule::attribute/]	
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]	

[import fr::pacman::core::service::TestUtils/]
[import fr::pacman::core::service::DatabaseUtils/]

[comment écriture de l'implémentation des tests de persistance sur une entité./]
[template public outIntegrationTestImpl(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  [e.classHeader(e.namePackageOutIntegrationTestImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [e.defaultImports()/]
    
    import javax.sql.DataSource;
    import org.hibernate.Session;
    import org.hibernate.query.Query;
    import java.time.temporal.ChronoUnit;
    import org.junit.jupiter.api.Test;
    import org.junit.jupiter.api.TestInstance;
    import org.junit.jupiter.api.TestInstance.Lifecycle;
    import org.springframework.test.context.ActiveProfiles;
    import org.springframework.test.context.TestPropertySource;
    import org.junit.jupiter.api.extension.ExtendWith;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.test.context.SpringBootTest;
    import org.springframework.dao.DataIntegrityViolationException;
    import org.springframework.test.context.TestPropertySource;
    import org.springframework.test.context.junit.jupiter.SpringExtension;
    import static org.junit.jupiter.api.Assertions.*;
    import jakarta.persistence.EntityManager;
    import jakarta.persistence.criteria.CriteriaBuilder;
    import jakarta.persistence.criteria.CriteriaQuery;
    import jakarta.persistence.criteria.Root;
    import [e.namePackageProject()/].[e.namePackageEntityImpl()/].[e.nameClassEntityImpl()/];
    import [e.namePackageProject()/].[e.namePackageEntityPersistItf()/].[e.nameClassEntityPersistItf()/];
    import [e.namePackageProject()/].[e.nameClassIntegrationTestAbstract()/];
    [for (r | rs)]
      [let e1 = r.referencedEntity(e)]
        import [e.namePackageProject()/].[e1.namePackageEntityImpl()/].[e1.nameClassEntityImpl()/];
      [/let]
    [/for]
    
    [/protected]
  
  /**
   * Classe de test unitaire pour le repository {@link [e.nameClassEntityPersistItf()/]}.
   * Utilise {@link SpringBootTest} et les annotations de test JUnit pour tester les opérations CRUD
   * sur la couche de persistance
   * 
   * La classe étend {@link [e.nameClassIntegrationTestAbstract()/]}, ce qui permet d'hériter des 
   * configurations de test de base et des fonctionnalités liées à la gestion des données.
   * 
   * Cette classe teste les fonctionnalités suivantes :
   * <ul>
   *     <li>findAll : Récupération de toutes les entités.</li>
   *     <li>findById : Recherche d'une entité par son identifiant.</li>
   *     <li>findByColumn : Recherche d'entités basées sur une colonne spécifique.</li>
   *     <li>validate : Validation des entités.</li>
   *     <li>create : Création d'une entité.</li>
   *     <li>createWithNull : Test de la création d'une entité avec des valeurs nulles.</li>
   *     <li>createWithNullOnMandatory : Test de la création d'une entité avec des champs obligatoires manquants.</li>
   *     <li>allFieldInserted : Test de la concordance des champs pre et post insertion.</li>
   *     <li>update : Mise à jour d'une entité.</li>
   *     <li>delete : Suppression d'une entité.</li>
   * </ul>
   *
   * @Author [e.nameAuthor()/]
   */
  @SpringBootTest
  @ActiveProfiles("test")
  @ExtendWith(SpringExtension.class)
  @TestInstance(Lifecycle.PER_CLASS)
  @TestPropertySource(locations = "classpath:[e.nameIntegrationResources()/].properties")
  public class [e.nameClassOutIntegrationTestImpl()/] extends [e.nameClassIntegrationTestAbstract()/]
  {
    
    ['Couche de persistance'.commentSingleLine()/]
    private final [e.nameClassEntityPersistItf()/] [e.nameRepository().apply_attributeFinal()/];
    
    ['Identifiant d\'une entité créé par le script d\'initialisation des données'.commentSingleLine()/]
    private [e.defaultTypePk()/] ['crud id'.apply_attributeDefault()/] = [e.defaultSqlIntegrationTestSequenceStart()/]L;
    
    ['Identifiant de travail pour l\'entité'.commentSingleLine()/]
    private [e.defaultTypePk()/] ['crud id run'.apply_attributeDefault()/] = 1L;
    
   /**
    * Constructeur avec injection de la couche de persistance.
    * 
    * @param [e.nameRepository().apply_parameterMethodClassicIn()/] Le repository pour l'entité.
    * @param ['data source'.apply_parameterMethodClassicIn()/] La source de données à utiliser pour les tests.
    * @param ['entity manager'.apply_parameterMethodClassicIn()/] L'EntityManager utilisé pour manipuler la base de données.
    */
    @Autowired
    [e.nameClassOutIntegrationTestImpl()/](final [e.nameClassEntityPersistItf()/] [e.nameRepository().apply_parameterMethodClassicIn()/], 
    	final DataSource ['data source'.apply_parameterMethodClassicIn()/], 
    	final EntityManager ['entity manager'.apply_parameterMethodClassicIn()/]) {
       [e.prefixAffectation()/][e.nameRepository().apply_attributeFinal()/] = [e.nameRepository().apply_parameterMethodClassicIn()/];
       [e.prefixAffectation()/]['entity manager'.apply_attributeDefault()/] = ['entity manager'.apply_parameterMethodClassicIn()/];
       ['init sql'.apply_methodDefault()/](['data source'.apply_parameterMethodClassicIn()/]);
   }
  
    [e.writeTestFindAll()/]
    [e.writeTestFindById()/]
    [e.writetestFindByColumn()/]
    [e.writeTestValidate()/]
    [e.writeTestCreate(rs)/]
    [e.writeTestCreateWithNull(rs)/]
    [if (e.hasMandatoryAttributes())]
    	[e.writeTestCreateWithNullOnMandatory(rs)/]
   	[/if]
    [e.writeTestUpdate(rs)/]
    [e.writeTestDelete()/]
    [e.writeTestAllFieldInserted(rs)/]
  }
[/template]

[comment écriture du test pour la récupération de l'ensemble des entités en base./]
[template private writeTestFindAll(e : entity::Entity)]
  /**
  * Vérifie que la liste des entités récupérées n'est pas nulle et contient au moins une entité.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test find all'.apply_methodDefault()/]()
  {
   
   [let eName = e.name().apply_variableDefault()]
     List<[e.nameClassEntityImpl()/]> [eName/] =  [e.nameRepository().apply_attributeFinal()/].findAll();
      
      assertNotNull([eName/], "La liste ne peut pas etre nulle");
      assertTrue([eName/].size() > 0, "La liste doit comporter au moins une entite");
      int ['count'.apply_variableDefault()/] = [eName/].stream()
         .filter(o -> o.[e.nameSimplePropertyID().apply_methodGet()/]().equals(['crud id'.apply_attributeDefault()/]))
         .collect(Collectors.toList()).size();
      assertTrue(['count'.apply_variableDefault()/] == 1, "L'entite n'a pas ete trouvee dans la liste des entites recuperees");
    [/let]
    
    [protected ('test find all'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la création d'une nouvelle entité./]
[template private writeTestCreate(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  /**
  * Test de la création d'une entité [e.name()/] dans la base de données.
  * Vérifie que l'entité créée possède bien une clé primaire.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test create'.apply_methodDefault()/]() throws Exception
  {
     
    [let eName = e.name().apply_variableDefault()]
      [e.nameClassEntityImpl()/] [eName/] = new [e.nameClassEntityImpl()/]();
      [for (a : environment::Attribute | e.attributesNoPK())]
        [eName/].[a.nameAttribute().apply_methodSet()/]([a.writeDefaultValue()/]);
      [/for]
      [for (prop : String | e.autoAttributes())]
        [e.writeAutoAttribute(prop, false)/]
      [/for]
      
      [e.writeReferencedFK(rs)/]
      
      [e.nameRepository().apply_attributeFinal()/].save([eName/]);
      [e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/] 
         = [eName/].[e.nameSimplePropertyID().apply_methodGet()/](); 
      
      assertNotNull([eName/].[e.nameSimplePropertyID().apply_methodGet()/]()
         , "L'entity creee devrait avoir une cle primaire renseignee");
    [/let]
    
    [protected ('test create'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la création d'une nouvelle entité avec des champs obligatoires non renseignés./]
[template private writeTestCreateWithNullOnMandatory(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  /**
  * Test de la création d'une entité [e.name()/] avec un champ obligatoire manquant.
  * Vérifie qu'une exception est levée en cas de violation d'intégrité des données.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test create with null on mandatory'.apply_methodDefault()/]() throws Exception
  {
    [let eName = e.name().apply_variableDefault()]
      [e.nameClassEntityImpl()/] [eName/] = new [e.nameClassEntityImpl()/]();
      
      try {
         [for (a : environment::Attribute | e.attributesNoPK())]
           [if (a.isMandatory())]
             [eName/].[a.nameAttribute().apply_methodSet()/](null);
           [else]
             [eName/].[a.nameAttribute().apply_methodSet()/]([a.writeDefaultValue()/]);
           [/if]
         [/for]
         
         [e.writeReferencedFK(rs)/]
         
         [e.nameRepository().apply_attributeFinal()/].save([eName/]);
      } catch (DataIntegrityViolationException e) {
          return;
      }
      
      [protected ('test create with null on mandatory'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
      [/protected]
        
      fail("L'entity ne devrait pas avoir ete cree");
    [/let]
  }
  
[/template]

[comment écriture du test pour la création d'un eentité avec des champs non obligatoires et non renseignés./]
[template private writeTestCreateWithNull(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  /**
  * Test de la création d'une entité [e.name()/] avec des valeurs nulles.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test create with null'.apply_methodDefault()/]() throws Exception
  { 
  
    [let eName = e.name().apply_variableDefault()]
      [e.nameClassEntityImpl()/] [eName/] = new [e.nameClassEntityImpl()/]();
      [for (a : environment::Attribute | e.attributesNoPK())]
        [if (not a.isMandatory())]
          [eName/].[a.nameAttribute().apply_methodSet()/](null);
        [else]
          [eName/].[a.nameAttribute().apply_methodSet()/]([a.writeDefaultValue()/]);
        [/if]
      [/for]
      [for (prop : String | e.autoAttributes())]
        [e.writeAutoAttribute(prop, true)/]
      [/for]
      
      [e.writeReferencedFK(rs)/]
      
      [e.nameRepository().apply_attributeFinal()/].save([eName/]);
      
      assertNotNull([eName/].[e.nameSimplePropertyID().apply_methodGet()/]()
         , "L'entity creee devrait avoir une cle primaire renseignee");
    [/let]
    
    [protected ('test create with null'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la récupération d'un entité à partir de son identifiant./]
[template private writeTestFindById(e : entity::Entity)]
  /**
  * Vérifie que l'entité [e.name()/] est correctement récupérée par son identifiant.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test find by id'.apply_methodDefault()/]() throws Exception
  {
    
    [let eName = e.name().apply_variableDefault()]
      Optional<[e.nameClassEntityImpl()/]> [eName/] = 
         [e.nameRepository().apply_attributeFinal()/].findById(['crud id'.apply_attributeDefault()/]);
         
         assertTrue(![eName/].isEmpty(), "Aucune entite n'a ete recuperee");
         assertTrue([eName/].get().[e.nameSimplePropertyID().apply_methodGet()/]() 
             == ['crud id'.apply_attributeDefault()/], "L'entite recuperee n'est pas la bonne entite");
    [/let]
    
    [protected ('test find by id'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour le fonctionnement de la méthode de validation./]
[template private writeTestValidate(e : entity::Entity)]
  @Test
  public void ['test validate'.apply_methodDefault()/]() throws Exception
  {
    
    [protected ('test validate'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la récupération d'une entité à partir de la valeur d'un attribut)./]
[template private writetestFindByColumn(e : entity::Entity)]
  /**
  * Test de la méthode de recherche personnalisée avec critères.
  * Exemple de recherche sur une colonne spécifique de l'entité.
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test find by column'.apply_methodDefault()/]() throws Exception
  {
     
     [let eName = e.name().apply_variableDefault()]
       Session ['session'.apply_variableDefault()/] = ['entity manager'.apply_attributeDefault()/].unwrap(org.hibernate.Session.class);
       CriteriaBuilder ['cb'.apply_variableDefault()/] = ['session'.apply_variableDefault()/].getCriteriaBuilder();
       CriteriaQuery<[e.nameClassEntityImpl()/]> ['cr'.apply_variableDefault()/] = ['cb'.apply_variableDefault()/]
          .createQuery([e.nameClassEntityImpl()/].class);
       Root<[e.nameClassEntityImpl()/]> ['root'.apply_variableDefault()/] = ['cr'.apply_variableDefault()/]
          .from([e.nameClassEntityImpl()/].class);
       ['cr'.apply_variableDefault()/].select(['root'.apply_variableDefault()/]).where(['cb'.apply_variableDefault()/]
          .equal(['root'.apply_variableDefault()/]
          .get("[e.nameSimplePropertyID().apply_attributeDefault()/]"), ['crud id'.apply_attributeDefault()/]));
       Query<[e.nameClassEntityImpl()/]> ['query'.apply_variableDefault()/] = ['session'.apply_variableDefault()/]
          .createQuery(['cr'.apply_variableDefault()/]);
       List<[e.nameClassEntityImpl()/]> [eName/] = ['query'.apply_variableDefault()/].getResultList();
       
       assertTrue(![eName/].isEmpty(), "Aucune entite n'a ete recuperee");
       assertTrue(['crud id'.apply_attributeDefault()/].equals([eName/].get(0)
          .[e.nameSimplePropertyID().apply_methodGet()/]()), "L'entite recuperee n'est pas la bonne entite");
     [/let]
     
     [protected ('test find by column'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
     [/protected]
  }
  
[/template]

[comment écriture du test pour la mis à jour d'une entité./]
[template private writeTestUpdate(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  /**
  * Test de la mise à jour d'une entité [e.name()/].
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */ 
  @Test
  public void ['test update'.apply_methodDefault()/]() throws Exception
  {
    [let eName = e.name().apply_variableDefault()]
      ['test create'.apply_methodDefault()/]();
      Optional<[e.nameClassEntityImpl()/]> [eName/] = [e.nameRepository().apply_attributeFinal()/]
         .findById([e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/]);
         
      [protected ('test update'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
      [/protected]
      
      [e.nameRepository().apply_attributeFinal()/].save([eName/].get());
      
      assertNotNull([eName/].get().[e.nameSimplePropertyID().apply_methodGet()/]()
         , "L'entity creee devrait avoir une cle primaire renseignee");
    [/let]
    
    [protected ('test update 2'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la suppression d'une entité./]
[template private writeTestDelete(e : entity::Entity)]
  /**
  * Test de la suppression d'une entité [e.name()/].
  * 
  * @throws Exception Si une exception se produit pendant l'exécution du test.
  */
  @Test
  public void ['test delete'.apply_methodDefault()/]() throws Exception
  {
    [let eName = e.name().apply_variableDefault()]
      ['test create'.apply_methodDefault()/]();
      Optional<[e.nameClassEntityImpl()/]> [eName/] = [e.nameRepository().apply_attributeFinal()/]
         .findById([e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/]);
      
      [e.nameRepository().apply_attributeFinal()/].delete([eName/].get());
      
      [eName/] = [e.nameRepository().apply_attributeFinal()/]
         .findById([e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/]);
          
      assertTrue([eName/].isEmpty(), "L'entity devrait avoir ete supprimee");
    [/let]
    
    [protected ('test delete'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
  
[/template]

[comment écriture du test pour la suppression d'une entité./]
[template private writeTestAllFieldInserted (e : entity::Entity, rs : OrderedSet(environment::Reference))]
  /**
  * Tests de la bone insertion de l'ensemble des champs. On ne contrôle que les
  * champs de l'entité [e.name()/].
  * 
  * @throws Exception Exception Si une exception se produit pendant l'exécution
  *                   du test.
  */
  @Test
  public void ['test all fields inserted'.apply_methodDefault()/]() throws Exception
  {
     
     [let eName = e.name().apply_variableDefault()]
        [e.nameClassEntityImpl()/] [eName/] = new [e.nameClassEntityImpl()/]();
        
        [protected ('test all fields inserted'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        
        [for (a : environment::Attribute | e.attributesNoPK())]
          [eName/].[a.nameAttribute().apply_methodSet()/]([a.writeDefaultValue()/]);
        [/for]
        [for (prop : String | e.autoAttributes())]
          [e.writeAutoAttribute(prop, false)/]
        [/for]
        
        [e.writeReferencedFK(rs)/]
        
        [/protected]
        
        [e.nameRepository().apply_attributeFinal()/].save([eName/]);
        [e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/] 
                 = [eName/].[e.nameSimplePropertyID().apply_methodGet()/](); 
                 
        Optional<[e.nameClassEntityImpl()/]> [eName/]2 = 
            [e.nameRepository().apply_attributeFinal()/].findById([e.prefixAffectation()/]['crud id run'.apply_attributeDefault()/]);
        
        [for (a : environment::Attribute | e.attributesNoPK())]
          [if ('Binary'.equalsIgnoreCase(a.type.name))]
            assertTrue(Arrays.equals([eName/].[a.nameAttribute().apply_methodGet()/]()
               , [eName/]2.get().[a.nameAttribute().apply_methodGet()/]())
               , "[a.nameAttribute()/] : Les champs ne correspondent pas");
          [else]
            assertEquals([eName/].[a.nameAttribute().apply_methodGet()/]()
               , [eName/]2.get().[a.nameAttribute().apply_methodGet()/]()
               , "[a.nameAttribute()/] : Les champs ne correspondent pas");
          [/if]
        [/for]
        [for (prop : String | e.autoAttributes())]
          assertEquals([eName/].[prop.nameAutoAttribute().apply_methodGet()/]()
             , [eName/]2.get().[prop.nameAutoAttribute().apply_methodGet()/]()
             , "[prop.nameAutoAttribute()/] : Les champs ne correspondent pas");
        [/for]
          
        [protected ('test all fields inserted 2'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
     [/let]
     

  }
[/template]

[comment écriture pour la prise en compte des références de l'entité./]
[template private writeReferencedFK(e : entity::Entity, rs : OrderedSet(environment::Reference))]
  [for (r | rs)]
    [comment on ne s'occupe que des attributs obligatoires pour passer la création 
    (les autres champs ont gérés dans les tests suivants)./]
    [if (r.isMandatory())]
      [e.writeReferencedEntity(r)/]
    [/if]
  [/for]
  
[/template]

[comment écriture pour la prise en compte des références de l'entité./]
[template private writeReferencedEntity (e : entity::Entity, r : environment::Reference)]
  [let e1 =  r.referencedEntity(e)]
    [let e1Name = e1.referencedEntityName(r)]
      [e1.nameClassEntityImpl()/] [e1Name/] = new [e1.nameClassEntityImpl()/]();
      [e1Name/].[e1.nameSimplePropertyID().apply_methodSet()/](['crud id'.apply_attributeDefault()/]);
      [e.name().apply_variableDefault()/].[r.referencedEntity(e).referencedName(r).apply_methodSet()/]([r.writeDefaultReference(e1, e1Name)/]);
    
      [for (r1 | e1.referencesFK())]
        [comment on coupe si l'entité référencée reprend l'entité référancante./]
        [if (r1.isMandatory() and r1.containingType <> e)]
          [comment e.writeReferencedEntity(r.referencedEntity(e1), r1)/]
        [/if]
    [/for]
    [/let]
  [/let]
[/template]

[comment retoune l'entité référencée, si relation récursive, on ajoute un index afin de ne pas avoir de doublon dans le nom de l'entité./]
[query private referencedEntityName(e : entity::Entity, r : environment::Reference) : String = if (r.isRecursive()) then e.name() 
  + '_' + e.get_counterFK(1) else e.name().apply_variableDefault() endif/]

[comment écriture de la valeur par defaut à injecter dans le setter./]
[query private writeDefaultValue (prop : String) : String = if ('Time'.equalsIgnoreCase(prop) 
	or 'Timestamp'.equalsIgnoreCase(prop)) then prop.get_defaulValueForType() + '.truncatedTo(ChronoUnit.MILLIS)' 
	else if ('Binary'.equalsIgnoreCase(prop)) then prop.nameClassIntegrationTestUtils() + '.' + 'generate random byte array'
	.apply_methodDefault() +  '(10)' else prop.get_defaulValueForType() endif endif/]
	
[comment écriture de la valeur par defaut à injecter dans le setter./]
[query private writeDefaultValue(a : environment::Attribute) : String = a.type.name.writeDefaultValue()/]
	
[comment écriture de la valeur par défaut à injecter dans le setter (non à priori impossible d'avoir des listes sur attribut !!!!)./]  
[comment query private defaultValue(a : environment::Attribute, timeType :  Boolean ) : String = if (a.isMultiple()) then 
	'new ArrayList<' + a.type.type() + '>(List.of(' + a.get_defaulValueForType() + '))' else a.get_defaulValueForType() endif/]
	
[comment écriture de la valeur par défaut à injecter dans le setter./]  
[query private writeDefaultReference(r : environment::Reference, e : entity::Entity, d : String) : String = 
	if (r.isMultiple() and e = r.referencedType	) then 'new ArrayList<' + e.nameClassEntityImpl() + '>(List.of(' + d + '))' else d endif/]

[comment écriture d'une ligne pour un attribut automatique./]
[query private writeAutoAttribute(e : entity::Entity, prop : String, forNull : Boolean) : String = e.name().apply_variableDefault() 
  + '.' + prop.nameAutoAttribute().apply_methodSet() + '(' + if (forNull and 'true'.equalsIgnoreCase(prop.autoAttributNull())) 
  then 'null' else prop.autoAttributeType().writeDefaultValue() endif + ');'/]
  