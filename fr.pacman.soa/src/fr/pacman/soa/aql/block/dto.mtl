[module dto(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0', 
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]	
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::soa::aql::block::common/]

[comment écriture de l'implémentation pour l'objet métier (dto)./]
[template public dtoImpl(d : environment::DTO)]
  [d.classHeader(d.namePackageDtoImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.defaultImports()/]
    import [d.namePackageProject()/].[d.namePackageCommonEntityBase()/].[d.nameClassEntityAbs()/];
    import [d.namePackageProject()/].[d.namePackageCommonBase()/].[d.nameClassValidatorUtilsImpl()/];
    import [d.namePackageProject()/].[d.namePackageCommonException()/].[d.nameClassValidationExceptionImpl()/];
    
  [/protected]
  [d.commentClass()/]
  public class [d.nameClassDtoImpl()/] extends [d.nameClassEntityAbs()/]
   {
      
      [if (not d.immutable())]
        // CONSTANTES
        
        [protected ('constantes'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        
        [/protected]
        
        // ATTRIBUTS
        [let rs = d.referencesFKSB()->union(d.referencesJT())]
          
          ['Id'.commentSingleLine()/]
          private [d.defaultTypePk()/] [d.writePk()/];
          
          [for (a : environment::Attribute | d.attributesNoPK())]
            [a.comment().commentSingleLine()/]
            private [a.type()/] [a.nameAttribute()/];
            
          [/for]
          [for (r : environment::Reference | rs)]
            [r.referencedDto(d).comment().commentSingleLine()/]
            private [r.referencedTypeSignature(d)/] [r.referencedDto(d).referencedName(r).apply_attributeDefault()/];
            
          [/for]
          
          [let e = d.associatedEntity()]
            /**
             * Retourne l'identifiant pour le dto. 
             *
             * @return la valeur de l'identifiant.
             */
             public [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_methodGet()/]()
             {
               return [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/];
             }
             
            /**
             * Affecte l'identifiant pour le dto'. 
             *
             * @param la valeur de l'identifiant'.
             */
             public void [e.nameSimplePropertyID().apply_methodSet()/]
             (final [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/])
             {
                [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/] 
                  = [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/];
             }
          [/let]
          
          [d.writeGetterAndSetterForAttributes(d.attributesNoPK())/]
          [d.writeGetterAndSetterForReferences(rs, d.commandDto())/]
            
          // METHODES
          [protected ('methods'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          
          /**
           * Valide les informations de l'objet en vérifiant la présence des valeurs
           * obligatoires, les contraintes de taille et un pattern spécifique pour
           * certains champs.
           * 
           * Cette méthode utilise des utilitaires de validation pour vérifier que
           * certains des champs modélisés ne sont pas vides, respectent une taille
           * minimale et/ou maximale, ainsi qu'un format spécifique grâce à une expression
           * régulière qui est fournie (toujours par le biais de la modélisation).
           * 
           * Si des erreurs de validation sont trouvées, une exception
           * {@link [d.nameClassValidationExceptionImpl()/]} est lancée avec les messages d'erreur
           * correspondants.
           * 
           * @throws [d.nameClassValidationExceptionImpl()/] si des erreurs de validation sont trouvées.
           *                                  L'exception contient une liste des erreurs
           *                                  sous forme de tableau de chaînes.
           */
          @SuppressWarnings("unused")
          public void ['validate'.apply_methodDefault()/]() throws [d.nameClassValidationExceptionImpl()/]
          {
              List<String> ['errors'.apply_variableDefault()/] = null;
              [for (a | d.attributesNoPK())]
                [a.writeNotNullValidation()/]
                [a.writePatternValidation()/]
                [a.writeSizeValidation()/]
              [/for]
              
              if(null != ['errors'.apply_variableDefault()/] ){
                  throw new [d.nameClassValidationExceptionImpl()/](this, ['errors'.apply_variableDefault()/]
                    .toArray(new String['['/] ['errors'.apply_variableDefault()/].size()[']'/]));
              }
          }
        [/let]
      [/if]
   }
[/template]

[comment écriture de la ligne de validation pour le caractère obligatoire de l'attribut./]
[query private writeNotNullValidation(a : environment::Attribute) : String = if (a.isMandatory()) then 
  a.nameClassValidatorUtilsImpl() + '.' + 'check mandatory'.apply_methodDefault() + '("' + a.nameAttribute() + '", ' 
  + a.nameAttribute() + ', ' + 'errors'.apply_variableDefault() + ');' else '' endif /]
  
[comment écriture de la ligne de validation pour la valeur de l'attribut./]
[query private writeSizeValidation(a : environment::Attribute) : String = if (a.hasSizeConstraints()) then 
  a.nameClassValidatorUtilsImpl() + '.' + 'check size'.apply_methodDefault() + '("' + a.nameAttribute() + '", ' 
  + a.nameAttribute() + ', ' + 'errors'.apply_variableDefault() + ');' else '' endif /]

[comment écriture de la ligne de validation pour la regex de l'attribut./]
[query private writePatternValidation(a : environment::Attribute) : String = ''/]