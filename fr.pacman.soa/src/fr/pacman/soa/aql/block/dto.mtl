[module dto(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0', 
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::attributes/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]	
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::soa::aql::block::common/]

[comment écriture de l'implémentation pour l'objet métier (dto)./]
[template public dtoImpl(d : environment::DTO)]
  [d.classHeader(d.namePackageDtoImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.defaultImports()/]
    import java.util.Objects;
    import [d.namePackageProject()/].[d.namePackageCommonDtoBase()/].[d.nameClassDtoAbs()/];
    import [d.namePackageProject()/].[d.namePackageCommonBase()/].[d.nameClassValidatorUtilsImpl()/];
    import [d.namePackageProject()/].[d.namePackageCommonException()/].[d.nameClassValidationExceptionImpl()/];
    
  [/protected]
  [d.commentClass()/]
  public class [d.nameClassDtoImpl()/] extends [d.nameClassDtoAbs()/]
   {
      
      [if (not d.immutable())]
        // CONSTANTES
        
        [protected ('constantes'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        
        [/protected]
        
        // ATTRIBUTS
        [let rs = d.referencesFKSB()->union(d.referencesJT())]
          
          ['Id'.commentSingleLine()/]
          private [d.defaultTypePk()/] [d.writePk()/];
          
          [for (a : environment::Attribute | d.attributesNoPK())]
            [a.comment().commentSingleLine()/]
            private [a.type()/] [a.nameAttribute()/];
            
          [/for]
          [for (r : environment::Reference | rs)]
            [r.referencedDto(d).comment().commentSingleLine()/]
            private [r.referencedTypeSignature(d)/] [r.referencedDto(d).referencedName(r).apply_attributeDefault()/];
            
          [/for]
          
          [let e = d.associatedEntity()]
            /**
             * Retourne l'identifiant pour le dto. 
             *
             * @return la valeur de l'identifiant.
             */
             public [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_methodGet()/]()
             {
               return [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/];
             }
             
            /**
             * Affecte l'identifiant pour le dto'. 
             *
             * @param la valeur de l'identifiant'.
             */
             public void [e.nameSimplePropertyID().apply_methodSet()/]
             (final [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/])
             {
                [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/] 
                  = [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/];
             }
          [/let]
          
          [d.writeGetterAndSetterForAttributes(d.attributesNoPK())/]
          [d.writeGetterAndSetterForReferences(rs, d.commandDto())/]
            
          // METHODES
          [protected ('methods'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          
          [let oas = d.autoAttributes()]
            /**
             * Valide les informations de l'objet en vérifiant la présence des valeurs
             * obligatoires, les contraintes de taille et un pattern spécifique pour
             * certains champs.
             * 
             * Cette méthode utilise des utilitaires de validation pour vérifier que
             * certains des champs modélisés ne sont pas vides, respectent une taille
             * minimale et/ou maximale, ainsi qu'un format spécifique grâce à une expression
             * régulière qui est fournie (toujours par le biais de la modélisation).
             * 
             * Si des erreurs de validation sont trouvées, une exception
             * {@link [d.nameClassValidationExceptionImpl()/]} est lancée avec les messages d'erreur
             * correspondants.
             * 
             * @throws [d.nameClassValidationExceptionImpl()/] si des erreurs de validation sont trouvées.
             *                                  L'exception contient une liste des erreurs
             *                                  sous forme de tableau de chaînes.
             */
            public [d.nameClassDtoImpl()/] ['validate'.apply_methodDefault()/]() throws [d.nameClassValidationExceptionImpl()/]
            {
                
                List<String> ['errors'.apply_variableDefault()/] = new ArrayList<>();
                [for (a | d.attributesNoPK())]
                  [a.writeNotNullValidation()/]
                  [a.writePatternValidation()/]
                  [a.writeSizeValidation()/]
                [/for]
                
                [for (o | oas)]
                  [comment ce n'est pas au dto de valider les champs automatiques de persistance./]
                  [comment o.writeNotNullValidation()/]
                [/for]
                
                if(!['errors'.apply_variableDefault()/].isEmpty()){
                    throw new [d.nameClassValidationExceptionImpl()/](this, ['errors'.apply_variableDefault()/]
                      .toArray(new String['['/] ['errors'.apply_variableDefault()/].size()[']'/]));
                }
                return this;
            }
            
            /** 
             * Compare cet objet avec l'objet spécifié pour déterminer s'ils sont égaux.
             *
             * Cette méthode vérifie si l'instance actuelle et l'objet fourni sont la même instance,
             * puis compare les attributs des deux objets pour en vérifier l'égalité. La comparaison
             * est effectuée à l'aide de la méthode {@link Objects#equals(Object, Object)} afin de gérer 
             * correctement les valeurs de type 'null'.
             *
             * @param ['obj'.apply_parameterMethodClassicIn()/] L'objet à comparer avec l'instance actuelle. 
             * Celui-ci doit être une instance de {@link [d.nameClassDtoImpl()/]} pour une comparaison valide.
             *
             * @return {@code true} si l'objet spécifié est égal à l'instance actuelle, {@code false} sinon.
             */
             @Override
             public boolean equals(Object ['obj'.apply_parameterMethodClassicIn()/])
             {
               if (this == ['obj'.apply_parameterMethodClassicIn()/]) {
                   return true;
               }	  
                 
               if (!(['obj'.apply_parameterMethodClassicIn()/] instanceof [d.nameClassDtoImpl()/])) {
                  return false;
               }
                
               [d.nameClassDtoImpl()/] [d.name()/] = ([d.nameClassDtoImpl()/]) ['obj'.apply_parameterMethodClassicIn()/];
               return Objects.equals([d.prefixAffectation()/][d.writePk()/], [d.writePk()/])
               
               [for (a : environment::Attribute | d.attributesNoPK())]
                 && Objects.equals([d.prefixAffectation()/][a.nameAttribute()/], [d.name()/].[a.nameAttribute()/])
               [/for]
               
               [for (o | oas)]
                 && Objects.equals([d.prefixAffectation()/][o.nameAutoAttribute()/], [d.name()/].[o.nameAutoAttribute()/])
               [/for];
             }
             
             /**
              * Retourne un code de hachage pour l'objet actuel.
              *
              * Elle utilise la méthode {@link Objects#hash(Object...)} pour générer un code de hachage combiné 
              * basé sur ces attributs. Ce code de hachage est utilisé dans des structures de données 
              * telles que les tables de hachage.
              *
              * @return Le code de hachage pour l'objet actuel.
              */
              @Override
              public int hashCode() 
              {
                return Objects.hash([d.prefixAffectation()/][d.writePk()/][for (a : environment::Attribute | d.attributesNoPK())], 
                  [d.prefixAffectation()/][a.nameAttribute()/][/for]
                  [for (o | oas)],
                  [d.prefixAffectation()/][o.nameAutoAttribute()/][/for]);
              }
              
              /**
               * Retourne une représentation sous forme de chaîne de caractères de l'objet actuel.
               * 
               * Cette méthode est utile pour obtenir une représentation lisible de l'objet, notamment pour les 
               * opérations de débogage ou de journalisation.
               */
               @Override
               public String toString() 
               {
                 return "[d.nameClassDtoImpl()/] { [d.writePk()/] = " + [d.prefixAffectation()/][d.writePk()/]
                   [for (a : environment::Attribute | d.attributesNoPK())] 
                   + "[a.nameAttribute()/] = " + [d.prefixAffectation()/][a.nameAttribute()/][/for]
                   [for (o | oas)] 
                   + "[o.nameAutoAttribute()/] = " + [d.prefixAffectation()/][o.nameAutoAttribute()/][/for] + "}"; 
               }
          [/let]
        [/let]
      [/if]
   }
[/template]

[comment écriture de la ligne de validation pour le caractère obligatoire de l'attribut./]
[query private writeNotNullValidation(a : environment::Attribute) : String = if (a.isMandatory()) then 
  a.nameClassValidatorUtilsImpl() + '.' + 'check mandatory'.apply_methodDefault() + '("' + a.nameAttribute() + '", ' 
  + a.nameAttribute() + ', ' + 'errors'.apply_variableDefault() + ');' else '' endif /]
  
[query private writeNotNullValidation(s: String) : String = if('false'.equalsIgnoreCase(s.autoAttributNull())) 
  then s.nameClassValidatorUtilsImpl() + '.' + 'check mandatory'.apply_methodDefault() + '("' + s.nameAutoAttribute() 
  + '", ' + s.nameAutoAttribute() + ', ' + 'errors'.apply_variableDefault() + ');' else '' endif/]
  
[comment écriture de la ligne de validation pour la valeur de l'attribut./]
[query private writeSizeValidation(a : environment::Attribute) : String = if (a.hasSizeConstraints()) then 
  a.nameClassValidatorUtilsImpl() + '.' + 'check size'.apply_methodDefault() + '("' + a.nameAttribute() + '", ' 
  + a.nameAttribute() + ',' + if (a.minimum.exists()) then a.minimum else 'null' endif + ',' 
  + if (a.maximum.exists()) then a.maximum else 'null' endif + ', ' + 'errors'.apply_variableDefault() 
  + ');' else '' endif /]

[comment écriture de la ligne de validation pour la regex de l'attribut./]
[query private writePatternValidation(a : environment::Attribute) : String = ''/]