[module dto(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0', 
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]	
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::soa::aql::block::common/]

[comment écriture de l'implémentation pour l'objet métier (dto)./]
[template public implementation(d : environment::DTO)]
  [d.classHeader(d.namePackageDtoImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.defaultImports()/]
    import [d.namePackageProject()/].[d.namePackageDtoBase()/].[d.nameClassEntityAbs()/];
    
  [/protected]
  [d.commentClass()/]
  public class [d.nameClassDtoImpl()/] extends [d.nameClassEntityAbs()/]
   {
      
      [if (not d.immutable())]
        // CONSTANTES
        
        [protected ('constantes'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        
        [/protected]
        
        // ATTRIBUTS
        [let rs = d.referencesFKSB()->union(d.referencesJT())]
          
          ['Id'.commentSingleLine()/]
          private [d.defaultTypePk()/] [d.writePk()/];
          
          [for (a : environment::Attribute | d.attributesNoPK())]
            [a.comment().commentSingleLine()/]
            private [a.type()/] [a.nameAttribute()/];
            
          [/for]
          [for (r : environment::Reference | rs)]
            [r.referencedDto(d).comment().commentSingleLine()/]
            private [r.referencedTypeSignature(d)/] [r.referencedDto(d).referencedName(r).apply_attributeDefault()/];
            
          [/for]
          
          [let e = d.associatedEntity()]
            /**
             * Retourne l'identifiant pour le dto. 
             *
             * @return la valeur de l'identifiant.
             */
             public [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_methodGet()/]()
             {
               return [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/];
             }
             
            /**
             * Affecte l'identifiant pour le dto'. 
             *
             * @param la valeur de l'identifiant'.
             */
             public void [e.nameSimplePropertyID().apply_methodSet()/]
             (final [d.defaultTypePk()/] [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/])
             {
                [d.prefixAffectation()/][e.nameSimplePropertyID().apply_attributeDefault()/] 
                  = [e.nameSimplePropertyID().apply_parameterMethodClassicIn()/];
             }
          [/let]
          
          [d.writeGetterAndSetterForAttributes(d.attributesNoPK())/]
          [d.writeGetterAndSetterForReferences(rs, d.commandDto())/]
            
          // METHODES
          [protected ('methods'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
        [/let]
      [/if]
   }
[/template]