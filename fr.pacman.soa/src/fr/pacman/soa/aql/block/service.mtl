[module service(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/requirement/1.0',
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]						
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::resources/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::query::operation/]

[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::class/]
[import fr::pacman::core::aql::rule::method/]

[import fr::pacman::core::service::RequirementUtils/]
[import fr::pacman::core::property::project::ProjectProperties/]
						
[comment écriture de l'implémentation d'un service soa métier (couche domain)./]
[template public serviceImpl (s : soa::Service)]
  [s.classHeader(s.namePackageServiceImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    import [s.namePackageProject()/].[s.namePackageInItf()/].[s.nameClassServiceInItf()/];
    import [s.namePackageProject()/].[s.namePackageOutItf()/].[s.nameClassServiceOutItf()/];
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationIn()/];
    import [s.namePackageProject()/].[s.namePackageServiceImpl()/].[s.nameClassServiceRequirementImpl()/];
    import [s.namePackageProject()/].[s.namePackageRequirement()/].[s.nameClassRequirementEnumerationImpl()/];
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationRequirement()/];
    
  [/protected]
  
  [s.commentClass()/]
  [protected ((s.nameClassServiceImpl() + 'annotation').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  @[s.nameClassAnnotationIn()/]
  public class [s.nameClassServiceImpl()/] implements [s.nameClassServiceInItf()/]
  {
   
      [s.writeRequirement()/]
      
      ['Interface de persistance'.commentSingleLine()/]
      private final [s.nameClassServiceOutItf()/] [s.nameProvider().apply_attributeDefault()/];
      
      [protected ((s.nameClassServiceImpl() + s.suffixInterfaceIn()).protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
      [/protected]
      
      [protected ('constructeur'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
      [/protected]
        
        ['Constructeur avec injection de la persistance'.commentMultiLines()/]
        public [s.nameClassServiceImpl()/] (final [s.nameClassServiceOutItf()/] [s.nameProvider().apply_parameterMethodClassicIn()/]) 
        {  
          [s.prefixAffectation()/][s.nameProvider().apply_attributeDefault()/] = [s.nameProvider().apply_parameterMethodClassicIn()/]; 
        }
       
       
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
        
        [let rs = o.get_requirements()]
          [o.commentOperation()/]
          [protected ((o.name() + 'annotation').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          @Override
          [o.writeRequirement(rs)/]
          [o.writeOperation()/]
          {
            
            // Appel des exigences en provenance de la modélisation
            [o.writeRequirements(rs, true)/]
            
            [protected ((o.name() + 'before').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
              
              [o.writeRequirements(rs, false)/]
              
            [/protected]
            
            [if (o.hasOutput())]
               [o.outputType()/] [o.outputName().apply_variableDefault()/] 
                  = [o.prefixAffectation()/][s.nameProvider().apply_attributeFinal()/].[o.writeInputs()/];
            [/if]
           
            [protected ((o.name() + 'after').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
            [/protected]
            
            [if (o.hasOutput())]return [o.outputName().apply_variableDefault()/];[/if]
          }
        [/let]
      [/for]
  }
[/template]

[comment écriture de l'interface 'technique' crud pour le service (domain -> infrastructure)./]
[template public crudOutItf (d : environment::DTO)]
  [d.classHeader(d.namePackageCrudOutItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.defaultImports()/]
    import [d.namePackageProject()/].[d.namePackageDtoImpl()/].[d.nameClassDtoImpl()/];
    
  [/protected]
  
  [d.commentInterface()/]
  public interface [d.nameClassServiceCrudOutItf()/]
  {
    public void ['save'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['update'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['delete'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['find by id'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
  }
[/template]

[comment écriture de l'interface d'un service (domain -> application)./]
[template public inItf (s : soa::Service)]
  [s.classHeader(s.namePackageInItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    
  [/protected]
  
  [s.commentInterface()/]
  public interface [s.nameClassServiceInItf()/]
  {
	  [s.writeInterface()/]
  }
[/template]

[comment écriture de l'interface d'un service (domain -> infrastructure)./]
[template public outItf (s : soa::Service)]
  [s.classHeader(s.namePackageOutItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    
  [/protected]
  
  [s.commentInterface()/]
  public interface [s.nameClassServiceOutItf()/]
  {
	  [s.writeInterface()/]
  }
[/template]

[comment écriture de la partie commune pour les deux interfaces de service./]
[template private writeInterface(s : soa::Service)]
  [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
     [o.commentOperation()/]
     [o.writeOperation()/];
     
  [/for]
[/template]

[comment écriture de l'implémentation pour les exigences associées au service./]
[template public requirementImpl(s : soa::Service)]
  [s.classHeader(s.namePackageServiceImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    import [s.namePackageProject()/].[s.namePackageCommonBase()/].[s.nameClassAnnotationRequirement()/];
    import [s.namePackageProject()/].[s.namePackageRequirement()/].[s.nameClassRequirementEnumerationImpl()/];
    
  [/protected]
  
  /**
   * Implémentations des exigences métiers pour le service : [s.nameClassServiceImpl()/].
   *
   * @author [s.nameAuthor()/]
   */
  public class [s.nameClassServiceRequirementImpl()/]
  {
     
     [for (r : requirement::Requirement | s.get_allRequirements())]
       [(r.name + '  ' + r.statement).commentMultiLines()/]
       @Requirement([r.nameClassRequirementEnumerationImpl()/].[r.nameRequirementId()/])
       [protected (r.name.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
         
         public void [r.nameRequirement()/]()
         {
           
           throw new [r.nameClassNotImplementedExceptionImpl()/]
           	    ("la règle de gestion [r.name/] n'a pas été implémentée.");
         }
         
       [/protected]
       
     [/for]
     
     [protected (s.nameClassServiceRequirementImpl().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
     [/protected]
  }
[/template]

[comment écriture du rappel pour l'execution des exigences./]
[query private writeRequirements(o : soa::Operation, rs : Sequence(requirement::Requirement), comment : Boolean) : String = 
  if (not rs->isEmpty()) then rs->collect(o2 | if (comment) then '// ' else '' endif + 'requirements'.apply_attributeFinal() 
  + '.' + o2.nameRequirement() + '();')->sep(o.lineSeparator())->toString() else '' endif/]

[comment écriture de l'annotation de rattachement des exigences (si existent)./]
[query private writeRequirement(o :soa::Operation, rs : Sequence(requirement::Requirement)) : String =  if (not rs->isEmpty()) then 
  '@Requirement(value = {' + rs->collect(o1 | o.nameClassRequirementEnumerationImpl() + '.' + o1.nameRequirementId())->sep(', ') 
  + '})' else '' endif/]

[comment écriture de la ligne pour l'instanciation de la classe associées des exigences./]
[query private writeRequirement(s: soa::Service) : String = if (s.get_useServiceRequirements()) then 'Règles de gestion associées'.commentSingleLine() 
  + 'private final ' + s.nameClassServiceRequirementImpl() + ' '+ 'requirements'.apply_attributeFinal() + ' = new ' 
  + s.nameClassServiceRequirementImpl() + '();'  else '' endif/]

[comment écriture de la signature complète d'une opération avec le paramètre en sortie et les paramètres en entrée./]
[query private writeOperation(o : soa::Operation) : String = 'public ' + o.outputType() + ' ' + o.nameOperation() + '(' + o.inputSignature() + ')' /]

[comment écriture de la signature d'une opération avec le paramètre en sortie./]
[query private writeInputs(o : soa::Operation) : String = o.nameOperation()  + '(' + o.input->collect(o1 | o1.name().apply_parameterMethodClassicInOut())
	->sep(', ') + ')' /]