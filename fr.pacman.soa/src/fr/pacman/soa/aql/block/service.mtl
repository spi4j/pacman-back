[module service(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]						
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::query::operation/]

[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::method/]
						
[comment écriture de l'implémentation d'un service soa (couche domain)./]
[template public implementation (s : soa::Service)]
  [s.classHeader(s.namePackageServiceImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    import [s.namePackageProject()/].[s.namePackageInItf()/].[s.nameClassServiceInItf()/];
    import [s.namePackageProject()/].[s.namePackageOutItf()/].[s.nameClassServiceOutItf()/];
    import [s.namePackageProject()/].[s.namePackageAnnotation()/].[s.nameClassAnnotationOut()/];
    
  [/protected]
  
  [s.commentClass()/]
  @[s.nameClassAnnotationOut()/]
  public class [s.nameClassServiceImpl()/] implements [s.nameClassServiceOutItf()/]
  {
      
      ['Interface de persistance'.commentSingleLine()/]
      private final [s.nameClassServiceInItf()/] [s.nameProvider().apply_attributeDefault()/];
      
      [protected ((s.nameClassServiceImpl() + s.suffixInterfaceIn()).protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
      [/protected]
      
      [protected ('constructeur'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        
        ['Constructeur avec injection de la persistance'.commentMultiLines()/]
        public [s.nameClassServiceImpl()/] (final [s.nameClassServiceInItf()/] [s.nameProvider().apply_parameterMethodClassicIn()/]) 
        {  
          [s.prefixAffectation()/][s.nameProvider().apply_attributeDefault()/] = [s.nameProvider().apply_parameterMethodClassicIn()/]; 
        }
        
      [/protected]
      
      [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
        
        [o.commentOperation()/]
        @Override
        [o.writeOperation()/]
        {
          
          [if (o.hasOutput())]
             [o.outputType()/] [o.outputName().apply_variableDefault()/] 
                = [o.prefixAffectation()/][s.nameProvider().apply_attributeFinal()/].[o.writeInputs()/];
          [/if]
         
          [protected (o.name().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
          
          [if (o.hasOutput())]return [o.outputName().apply_variableDefault()/];[/if]
        }
      [/for]
  }
[/template]

[comment écriture de l'interface 'technique' crud pour le service (domain -> infrastructure)./]
[template public interfaceCrudIn (d : environment::DTO)]
  [d.classHeader(d.namePackageCrudInItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [d.defaultImports()/]
    import [d.namePackageProject()/].[d.namePackageDtoImpl()/].[d.nameClassDtoImpl()/];
    
  [/protected]
  
  [d.commentInterface()/]
  public interface [d.nameClassServiceCrudInItf()/]
  {
    public void ['save'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['update'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['delete'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
    
    public void ['find by id'.apply_methodDefault()/](final [d.nameClassDtoImpl()/] [d.name().apply_parameterMethodClassicIn()/]);
  }
[/template]

[comment écriture de l'interface d'un service (domain -> application)./]
[template public interfaceOut (s : soa::Service)]
  [s.classHeader(s.namePackageOutItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    
  [/protected]
  
  [s.commentInterface()/]
  public interface [s.nameClassServiceOutItf()/]
  {
	  [s.writeInterface()/]
  }
[/template]

[comment écriture de l'interface d'un service (domain -> infrastructure)./]
[template public interfaceIn (s : soa::Service)]
  [s.classHeader(s.namePackageInItf())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    
  [/protected]
  
  [s.commentInterface()/]
  public interface [s.nameClassServiceInItf()/]
  {
	  [s.writeInterface()/]
  }
[/template]

[comment écriture de la partie commune pour les deux interfaces de service./]
[template private writeInterface(s : soa::Service)]
  [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
     [o.commentOperation()/]
     [o.writeOperation()/];
     
  [/for]
[/template]

[comment écriture de la signature complète d'une opération avec le paramètre en sortie et les paramètres en entrée./]
[query private writeOperation(o : soa::Operation) : String = 'public ' + o.outputType() + ' ' + o.nameOperation() + '(' + o.inputSignature() + ')' /]

[comment écriture de la signature d'une opération avec le paramètre en sortie./]
[query private writeInputs(o : soa::Operation) : String = o.nameOperation()  + '(' + o.input->collect(o1 | o1.name().apply_parameterMethodClassicInOut())
	->sep(', ') + ')' /]