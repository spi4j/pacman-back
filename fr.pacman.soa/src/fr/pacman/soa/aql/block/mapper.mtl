[module mapper(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0',
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::query::dto/]	
[import fr::pacman::core::aql::query::attribute/]				
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::common/]
[import fr::pacman::core::aql::rule::method/]

[comment 	écriture de la classe utilitaire de mapping pour la couche d'infrastructure.
			Le entités (ou dto) sont traitées avec le wrapper 'Optional' si besoin, 
			aucun contrôle n'est effectué au niveau des types 'primitifs'./]
			
[template public mapperIn(d : environment::DTO)]
  [d.classHeader(d.namePackageMapperInImpl())/]
  [d.defaultImports()/]
  import [d.namePackageProject()/].[d.namePackageDtoImpl()/].[d.nameClassDtoImpl()/];
  import [d.namePackageProject()/].[d.associatedEntity().namePackageEntityImpl()/].[d.associatedEntity().nameClassEntityImpl()/];
  
  /**
   * Classe utilitaire pour la conversion entre les objets {@link [d.nameClassDtoImpl()/]} et {@link [d.associatedEntity().nameClassEntityImpl()/]}.  
   * Cette classe fournit deux méthodes statiques pour convertir un objet DTO en une entité et inversement.
   * Elle permet de mapper un objet {@link [d.nameClassDtoImpl()/]} vers un {@link [d.associatedEntity().nameClassEntityImpl()/]} et vice-versa.  
   */
  public class [d.nameClassMapperImpl()/]
  {
   /**
    * Cette méthode permet de convertir un objet {@link [d.nameClassDtoImpl()/]} en une entité {@link [d.associatedEntity().nameClassEntityImpl()/]}.
    * 
    * @param [d.suffixDto().apply_parameterMethodClassicIn()/] L'objet de type {@link [d.nameClassDtoImpl()/]} à convertir. Il ne doit pas être nul.
    * @return Un objet de type {@link [d.associatedEntity().nameClassEntityImpl()/]} représentant l'entité correspondante.
    * 
    * @throws [d.nameClassMapperExceptionImpl()/] Si le paramètre dto est nul, une exception est lancée pour signaler l'impossibilité de réaliser la conversion.
    */
    public static [d.associatedEntity().nameClassEntityImpl()/] [('to ' + d.suffixEntity()).apply_methodDefault()/] (final [d.nameClassDtoImpl()/] [d.suffixDto().apply_parameterMethodClassicIn()/])
    { 
       if(null ==[d.suffixDto().apply_parameterMethodClassicIn()/])
       {
          throw new [d.nameClassMapperExceptionImpl()/]("Impossible de mapper la classe : [d.associatedEntity().nameClassEntityImpl()/]");
       }
       
       [d.associatedEntity().nameClassEntityImpl()/] [d.suffixEntity().apply_variableDefault()/] = new [d.associatedEntity().nameClassEntityImpl()/]();
       return [d.suffixEntity().apply_variableDefault()/];
    }
    
   /**
    * Cette méthode permet de convertir un objet {@link [d.associatedEntity().nameClassEntityImpl()/]} en un {@link [d.nameClassDtoImpl()/]}.
    * 
    * @param entity L'objet de type {@link [d.associatedEntity().nameClassEntityImpl()/]} à convertir. Il ne doit pas être nul.
    * @return Un objet de type {@link [d.nameClassDtoImpl()/]} représentant le DTO correspondant.
    * 
    * @throws [d.nameClassMapperExceptionImpl()/] Si le paramètre entity est nul, une exception est lancée pour signaler l'impossibilité de réaliser la conversion.
    */
    public static [d.nameClassDtoImpl()/] [('to ' + d.suffixDto()).apply_methodDefault()/] 
      (final [d.associatedEntity().nameClassEntityImpl()/] [d.suffixEntity().apply_parameterMethodClassicIn()/])
    {
        if(null ==[d.suffixEntity().apply_parameterMethodClassicIn()/])
        {
           throw new [d.nameClassMapperExceptionImpl()/]("Impossible de mapper la classe : [d.nameClassDtoImpl()/]");
        }
        
        [if (d.immutable())]
          return new [d.nameClassDtoImpl()/]([d.dsq1()/]);
        [else]
          [d.nameClassDtoImpl()/] [d.suffixDto()/] = new [d.nameClassDtoImpl()/]();
          [for (a : environment::Attribute | d.attributesNoPKAndNoComputed())]
            [d.writeStandardInDtoMapper(a)/];
          [/for]
          [for (r | d.referencesSB())]
            [if (not r.isOptional() and not r.isMultiple())]
              [r.writeReferenceInDtoMapper(d, false)/];
            [/if]
            [if (r.isOptional())]
              
              if ([d.suffixEntity().apply_parameterMethodClassicIn()/].[r.referencedDto(d).name().apply_methodGet()/]().isPresent()) {
                  [r.writeReferenceInDtoMapper(d, true)/];
              }
                  
            [/if]
            [if (r.isMultiple() and d = r.containingType)]
              [r.writeListInDtoMapper(d)/];
            [/if]
          [/for]
          
          [protected (d.nameClassDtoImpl().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
          [/protected]
               
          return [d.suffixDto()/];[/if]  
     }
  }
[/template]

[comment écriture d'une ligne de mapping pour un attribut standard./]
[query private writeStandardInDtoMapper(d : environment::DTO, a : environment::Attribute) : String = d.suffixDto().apply_variableDefault() 
  + '.' + a.name().apply_methodSet() + '(' + d.suffixEntity().apply_parameterMethodClassicIn() + '.' + a.name().apply_methodGet() + '())'/]

[comment écriture de mapping pour une liste dans le cadre d'une référence./]
[query private writeListInDtoMapper(r : environment::Reference, d : environment::DTO) : String = d.suffixDto().apply_variableDefault() 
  + '.' + r.referencedDto(d).name().apply_methodSet() + '(' + d.suffixEntity().apply_parameterMethodClassicIn() + '.' 
  + r.referencedDto(d).name().apply_methodGet() + '().stream().map(o -> ' + r.referencedDto(d).nameClassMapperImpl() + '.' 
  + ('to ' + d.suffixDto()).apply_methodDefault() + '(o)).collect(Collectors.toList()))'/]

[comment écriture de la ligne de mapping pour une référence optionelle ou non (hors liste)./]
[query private writeReferenceInDtoMapper(r : environment::Reference, d : environment::DTO, optional : Boolean) : String  = 
  d.suffixDto().apply_variableDefault() + '.' + r.referencedDto(d).name().apply_methodSet() + '(' + if (optional) 
  then 'Optional.of(' else '' endif  + r.referencedDto(d).nameClassMapperImpl() + '.' + ('to ' + d.suffixDto()).apply_methodDefault() 
  + '(' + d.suffixEntity().apply_parameterMethodClassicIn() + '.' + r.referencedDto(d).name().apply_methodGet() + '()' 
  + if (optional) then '.get())))' else '))' endif/]
  
[query private writeReferenceInEntityMapper(d : environment::DTO) : String  = ''/]
[query private writeReferenceOutXtoMapper(d : environment::DTO) : String  = ''/]

[comment écriture de la classe utilitaire de mapping pour la couche application./]
[template public mapperOut(d : environment::DTO)]
  [d.classHeader(d.namePackageMapperOutImpl())/]
  [d.defaultImports()/]
  import [d.namePackageProject()/].[d.namePackageXtoImpl()/].[d.nameClassXtoImpl()/];
  import [d.namePackageProject()/].[d.namePackageDtoImpl()/].[d.nameClassDtoImpl()/];
  
  /**
   * La classe {@code [d.nameClassMapperImpl()/]} est responsable de la conversion entre deux types d'objets : 
   * {@link [d.nameClassXtoImpl()/]} et {@link [d.nameClassDtoImpl()/]}. Elle fournit des méthodes statiques pour effectuer 
   * ces transformations. Si une conversion échoue (en raison d'un paramètre {@code null}), une exception
   * {@link [d.nameClassMapperExceptionImpl()/]} est lancée.
   */
  public class [d.nameClassMapperImpl()/]
  {
  
    /**
     * Convertit un objet {@link [d.nameClassXtoImpl()/]} en un objet {@link [d.nameClassDtoImpl()/]}.
     * Si l'objet {@code [d.nameClassXtoImpl()/]} est {@code null}, une {@link [d.nameClassMapperExceptionImpl()/]} est lancée.
     *
     * @param [d.suffixXto().apply_parameterMethodClassicIn()/] L'objet {@code [d.nameClassXtoImpl()/]} à convertir.
     * @return Un objet {@code [d.nameClassDtoImpl()/]} représentant les mêmes informations que {@code [d.nameClassXtoImpl()/]}.
     * @throws [d.nameClassMapperExceptionImpl()/] Si l'objet {@code [d.nameClassXtoImpl()/]} est {@code null}.
     */
    public static [d.nameClassDtoImpl()/] [('to ' + d.suffixDto()).apply_methodDefault()/] (final [d.nameClassXtoImpl()/] [d.suffixXto().apply_parameterMethodClassicIn()/])
    { 
    
       if(null == [d.suffixXto().apply_parameterMethodClassicIn()/])
       {
          throw new [d.nameClassMapperExceptionImpl()/]("Impossible de mapper la classe : [d.nameClassDtoImpl()/]");
       }
       
       [if (d.immutable())]
         return new [d.nameClassDtoImpl()/]([d.dsq2()/]);
       [else]
         [d.nameClassDtoImpl()/] [d.suffixDto().apply_variableDefault()/] = new [d.nameClassDtoImpl()/]();
         [for (a : environment::Attribute | d.attributesNoPKAndNoComputed())]
           [d.suffixDto().apply_variableDefault()/].[a.name().apply_methodSet()/]([d.suffixXto().apply_parameterMethodClassicIn()/].[a.name().apply_methodGet()/]());
         [/for]
         return [d.suffixDto().apply_variableDefault()/];
       [/if]  
    }
  
    /**
     * Convertit un objet {@link [d.nameClassDtoImpl()/]} en un objet {@link [d.nameClassXtoImpl()/]}.
     * Si l'objet {@code [d.nameClassDtoImpl()/]} est {@code null}, une {@link [d.nameClassMapperExceptionImpl()/]} est lancée.
     *
     * @param [d.suffixDto().apply_parameterMethodClassicIn()/] L'objet {@code [d.nameClassDtoImpl()/]} à convertir.
     * @return Un objet {@code [d.nameClassXtoImpl()/]} représentant les mêmes informations que {@code [d.nameClassDtoImpl()/]}.
     * @throws [d.nameClassMapperExceptionImpl()/] Si l'objet {@code [d.nameClassDtoImpl()/]} est {@code null}.
     */
    public static [d.nameClassXtoImpl()/] [('to ' + d.suffixXto()).apply_methodDefault()/] (final [d.nameClassDtoImpl()/] [d.suffixDto().apply_parameterMethodClassicIn()/])
    { 
    
      if(null == [d.suffixDto().apply_parameterMethodClassicIn().apply_parameterMethodClassicIn()/])
      {
         throw new [d.nameClassMapperExceptionImpl()/]("Impossible de mapper la classe : [d.nameClassXtoImpl()/]");
      }
    
      [d.nameClassXtoImpl()/] [d.suffixXto().apply_variableDefault()/] = new [d.nameClassXtoImpl()/]();
      [for (a : environment::Attribute | d.attributesNoPKAndNoComputed())]
        [d.suffixXto().apply_variableDefault()/].[a.name().apply_methodSet()/]([d.suffixDto().apply_parameterMethodClassicIn()/].[a.name().apply_methodGet()/]());
      [/for]
      return [d.suffixXto().apply_variableDefault()/];
    }	  
  }
[/template]

[query private dsq1(d : environment::DTO) : String = d.attributesNoPKAndNoComputed()->collect(o | 'entity'.apply_parameterMethodClassicIn() + '.' + o.nameAttribute().apply_methodGet() + '()'  + o.lineSeparator())->sep(',')/]
[query private dsq2(d : environment::DTO) : String = d.attributesNoPKAndNoComputed()->collect(o | 'xto'.apply_parameterMethodClassicIn() + '.' + o.nameAttribute().apply_methodGet() + '()'  + o.lineSeparator())->sep(',')/]
