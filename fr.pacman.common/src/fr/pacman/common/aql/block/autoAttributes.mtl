[module autoAttributes(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
						'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]				
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::attributes/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture des champs automatiques pour la base de données./]
[template public persistenceAutoAttributes (any : ecore::EObject, target : String)]
  [any.classHeader(if (any.commandEntity().equalsIgnoreCase(target)) then any.namePackageEntityBase() else any.namePackageDtoBase() endif)/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [any.defaultsImports()/]
    import jakarta.persistence.Column;
    import jakarta.persistence.MappedSuperclass;
    import org.hibernate.annotations.SourceType;
    import org.hibernate.annotations.CreationTimestamp;
    import org.hibernate.annotations.UpdateTimestamp;
    
  [/protected]
  
  /**
   * Classe abstraite représentant un modèle avec des champs additionnels dans le
   * cadre de la gestion de la couche de persistance. Cette classe est utilisée
   * pour gérer l'auto-attribution des valeurs sur les différents champs.
   */
  [target.writeAnnotationEntity()/]
  public abstract class [any.nameClassAutoAttributesImpl()/]
  {
    
    // CONSTANTES ET ATTRIBUTS
    [protected ('constantes'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
          
    [for (prop : String | any.autoAttributes())]
      [if (prop.hasToWriteAutoAttribute ())]
        [prop.autoAttributeComment().commentSingleLine()/]
        [prop.writeAnnotationColumn(target)/]
        private [prop.writeAttribute(target)/]
      [/if]
      
    [/for]
    
    [for (prop : String | any.autoAttributes())]
      [prop.writeAutomaticGetter()/]
      [prop.writeAutomaticSetter()/]
    [/for]
    // METHODES
    [protected ('methods'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    [/protected]
  }
[/template]

[comment écriture des getters pour les champs automatiques./]
[template private writeAutomaticGetter(prop : String)]
  [if (prop.hasToWriteAutoAttribute())]
    /**
     * Retourne la valeur de '[prop.nameAutoAttribute().apply_attributeDefault()/]' 
     *
     * @return la valeur de '[prop.nameAutoAttribute().apply_attributeDefault()/]'
     */
    public [prop.autoAttributeType()/] [prop.nameAutoAttribute().apply_methodGet()/] ()
    {
      return [prop.prefixAffectation()/][prop.nameAutoAttribute().apply_attributeDefault()/];
    }
  [/if]
  
[/template]

[comment écriture des setters pour les champs automatiques./]
[template private writeAutomaticSetter(prop : String)]
  [if (prop.hasToWriteAutoAttribute())]
    /**
     * Affecte la valeur de '[prop.nameAutoAttribute().apply_attributeDefault()/]' 
     *
     * @param la valeur de '[prop.nameAutoAttribute().apply_attributeDefault()/]'
     */
    public void [prop.nameAutoAttribute().apply_methodSet()/]
    (final [prop.autoAttributeType()/] [prop.nameAutoAttribute().apply_parameterMethodClassicIn()/])
    {
      [prop.prefixAffectation()/][prop.nameAutoAttribute().apply_attributeDefault()/] 
      	= [prop.nameAutoAttribute().apply_parameterMethodClassicIn()/];
    }
  [/if]
  
[/template]

[comment écriture de la ligne de définition pour l'attribut./]
[query private writeAttribute(prop : String, target : String) : String = prop.autoAttributeType() + ' ' 
	+ prop.nameAutoAttribute().apply_attributeDefault() + if (prop.commandEntity().equalsIgnoreCase(target) 
	and prop.autoAttributDefault().exists()) then ' = ' + if (prop.autoAttributeType().needsToBeQuoted()) 
	then '"' + prop.autoAttributDefault() + '"' else prop.autoAttributDefault() endif else '' endif + ';'/]

[comment écriture de la ligne pour l'annotation @column./]
[query private writeAnnotationColumn(prop : String, target : String) : String = if (target.commandEntity().equalsIgnoreCase(target)) 
	then if (prop.isXdMaj()) then '@UpdateTimestamp (source = SourceType.DB)' + prop.lineSeparator() else '' endif 
	+ '@Column(name = "' + prop.nameAutoAttribute() +'", nullable = ' + if (prop.autoAttributNull().exists()) 
	then prop.autoAttributNull() else 'true' endif + if (prop.autoAttributSize().exists()) then ', length = ' 
	+ prop.autoAttributSize() else '' endif + ')' else '' endif/]

[comment écriture de la ligne d'annotation pour l'entité./]
[query private writeAnnotationEntity(target : String) : String = if (target.commandEntity().equalsIgnoreCase(target)) 
	then '@MappedSuperclass' else '' endif/]