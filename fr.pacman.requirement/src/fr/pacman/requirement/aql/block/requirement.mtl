[module requirement(	'http://www.obeonetwork.org/dsl/requirement/1.0', 
						'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::resources/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::query::requirement/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture de l'enumération pour la centralisation pour l'ensemble des règles de gestion./]
[template public enumImpl (any : ecore::EObject, pkg : String, name : String , cs : Sequence(requirement::Category), p : Integer, nameT : String)]
  [any.classHeader(pkg)/]
  [any.defaultsImports()/]
  import [any.namePackageProject()/].[any.namePackageRequirement()/].[any.nameClassRequirementItf()/];
  import [any.namePackageProject()/].[any.namePackageRequirement()/].[any.nameClassRequirementUtilsImpl()/];

  public enum [name/] implements Requirement 
  { 
    [for (r : requirement::Requirement | cs->asSequence()->requirements(p))]
      /**
       * [r.writeComment(nameT)/]
       */
       [for (o : ecore::EObject | r.referencedObject)]
         [if (o.oclIsKindOf(soa::Operation))]
           // Exigence utilisée dans : [o.ancestors(soa::Service)->first().name/]Service.[o.oclAsType(soa::Operation).name/]
         [/if]
       [/for]
       [r.writeEnumeration(cs)/]
       
    [/for]
    
    /** Id. */
    private final String ['id'.apply_attributeFinal()/];
    
    /** Nom. */
    private final String ['name'.apply_attributeFinal()/];
   
    /** La version de l'exigence dans le modèle Requirement */
    private final String ['version model'.apply_attributeFinal()/];
    
    /** La version implémentée. */
    private String ['version implem'.apply_attributeDefault()/];
        
    /**
     * Constructeur de l'énumeration de l'exigence.
     * @param ['name'.apply_parameterMethodClassicIn()/]
     *           le nom.
     * @param ['version model'.apply_parameterMethodClassicIn()/]
     *           La version de l'exigence dans la modélisation.
     */
     private [name/] (final String ['name'.apply_parameterMethodClassicIn()/], final String ['version model'.apply_parameterMethodClassicIn()/])
     {
       [any.prefixAffectation()/]['id'.apply_attributeFinal() /] = toString().substring("[any.get_requirementPrefix()/]".length());
       [any.prefixAffectation()/]['name'.apply_attributeFinal()/] = ['name'.apply_parameterMethodClassicIn()/];
       [any.prefixAffectation()/]['version model'.apply_attributeFinal()/] = ['version model'.apply_parameterMethodClassicIn()/];
     }
     
     @Override
     public String ['id'.apply_methodGet()/] ()
     {
        return ['id'.apply_attributeFinal()/];
     }
     
     @Override
     public String ['name'.apply_methodGet()/] ()
     {
        return ['name'.apply_attributeFinal()/];
     }
     
     @Override
     public void ['version implem'.apply_methodSet()/] ()
     {
        ['version implem'.apply_methodSet()/](['not implemented'.apply_attributeFinalStatic()/]);
     }
     
     @Override
     public String ['version implem'.apply_methodGet()/] ()
     {
        return ['version implem'.apply_attributeDefault()/];
     }
        
     @Override
     public void ['version implem'.apply_methodSet()/] (final String ['version implem'.apply_parameterMethodClassicIn()/])
     {
        // Vérifier que la version implémentée est égale à celle de la modélisation
        [any.nameClassRequirementUtilsImpl()/].['check requirement version'.apply_methodDefault()/] (this, ['version implem'.apply_parameterMethodClassicIn()/]);
        // Si version pas encore affectée
        [any.prefixAffectation()/]['version implem'.apply_attributeDefault()/] = ['version implem'.apply_parameterMethodClassicIn()/];
     }
       
     @Override
     public String ['version model'.apply_methodGet()/] ()
     {
        return ['version model'.apply_attributeFinal()/];
     }
  }
[/template]

[comment écriture de la ligne d'énumération pour le requirement./]
[query private writeEnumeration (r : requirement::Requirement, cs : Sequence(requirement::Category)) : String = r.nameRequirementId() 
  + '("' + r.name.sanitize() + '", "' + r.version + '")' + if (r <> cs->collect(o1 | o1.eAllContents(requirement::Requirement))->last()) 
  then ','  else ';' endif/]

[comment écriture des lignes de commentaire pour la ligne d'énumération./]
[query private writeComment(r : requirement::Requirement, nameT : String) : String = r.name + ' :' + ''.encodeJavadoc(r.statement) 
  + 'Provenance : '.encodeJavadoc(r.rationale) + 'Critère d\'acceptance : '.encodeJavadoc(r.acceptanceCriteria) + r.lineSeparator() 
  +  'Voir ' + nameT + '#testVersion_' + r.get_requirementPrefix() + r.id.sanitizeReqID() + '()'/]

[comment ./]
[query private encodeJavadoc(label : String, attribute : String) : String = if not (attribute = null) and attribute.size() > 0 
  then ' <br>' + ''.lineSeparator() + label + attribute.replaceAll('\r\n', ' <br>' + ''.lineSeparator()).replaceAll('\t', '   ').trim() else '' endif/]