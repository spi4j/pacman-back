[module service(	'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::back::core::aql::base/]
[import fr::pacman::back::core::aql::name::classes/]
[import fr::pacman::back::core::aql::name::packages/]
[import fr::pacman::back::core::aql::output::comments/]
[import fr::pacman::back::core::aql::output::headers/]
[import fr::pacman::back::core::aql::output::resources/]
[import fr::pacman::back::core::aql::query::operation/]
[import fr::pacman::back::core::aql::query::service/]
[import fr::pacman::back::core::aql::query::parameter/]
[import fr::pacman::back::core::aql::name::eobjects/]
[import fr::pacman::back::core::aql::rule::method/]
[import fr::pacman::back::core::aql::rule::parameter/]
[import fr::pacman::back::core::aql::rule::attribute/]
[import fr::pacman::back::core::service::AnnotationUtils/]

[comment écriture pour l'implémentation du service de type client pour appel service fournisseur./]
[template public serviceRsClientImpl (s : soa::Service)]
  [s.classHeader(s.namePackageRsClientImpl())/]
  [protected ('imports'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
    
    [s.defaultImports()/]
    import org.springframework.stereotype.Service;
    import org.springframework.beans.factory.annotation.Autowired;
    import reactor.core.publisher.Mono;
    import [s.namePackageProject()/].[s.namePackageRsBase()/].[s.nameClassRsClientHelper()/];
    import [s.namePackageProject()/].[s.namePackageRsBase()/].[s.nameClassRsMapUtils()/];
    
  [/protected]
  
  [s.commentClass()/]
  [protected (s.name.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
  [/protected]
  @Service
  public class [s.nameClassRsClientImpl()/]
  {
    
    ['Helper centralisé utilisé pour exécuter les appels WebClient vers l\'API '.commentMultiLines()/]
    private final [s.nameClassRsClientHelper()/] ['client helper'.apply_attributeFinal()/];
    
    ['Constructeur (@Autowired pour meilleure lisibilité)'.commentMultiLines()/]
    @Autowired
    [s.nameClassRsClientImpl()/](final [s.nameClassRsClientHelper()/] ['client helper'.apply_parameterMethodClassicIn()/])
    {
       [s.prefixAffectation()/]['client helper'.apply_attributeFinal()/] = ['client helper'.apply_parameterMethodClassicIn()/];
    }
    
    [for (o : soa::Operation | s.ownedInterface.ownedOperations)]
      
      [if (o.isRsOperation())]
        [o.commentOperation()/]
        [protected ((o.name + 'annotation').protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
        [o.writeRsSignature()/]
        {
        
          [o.writeRsOperation(s)/]
        }
      [/if]
      
    [/for]
  }
[/template]

[comment écriture du corps de l'opération (pour l'instant ne traite pas encore les cookies)./]
[query private writeRsOperation(o : soa::Operation, s : soa::Service) : String = if (o.hasOutput()) then 'return ' else '' endif 
  + 'client helper'.apply_attributeFinal() + '.' + 'builder'.apply_methodGet() + '().' + o.verb.toString().toLower() + '()' 
  + if(o.hasOutput()) then  '.' + 'with response type'.apply_methodDefault() + '(' + o.outputRsType() + '.class)' else '' endif 
  + '.' + 'with uri'.apply_methodDefault() + '("' + s.rsUri() + o.rsUri() + '")' + if (o.hasInputs()) then if (not o.input
  ->select(o1 | o1.isRsQueryParam())->isEmpty()) then '.' + 'with query params'.apply_methodDefault() + '(' 
  + if(o.input->select(o1 | o1.isRsQueryParam())->size() > 10) then o.nameClassRsMapUtils() + '.mapOf(' else 'Map.of(' endif 
  +  o.input->select(o1 | o1.isRsQueryParam())->collect(o2 | '"' + o2.restData.restId + '",' + o2.name().apply_parameterMethodClassicIn())
  ->sep(', ') + '))' else '' endif + if (not o.input->select(o1 | o1.isRsPathParam())->isEmpty()) then '.' + 'with path params'.apply_methodDefault() 
  + '(Map.of(' +  o.input->select(o1 | o1.isRsPathParam())->collect(o2 | '"' + o2.restData.restId + '",' + o2.name().apply_parameterMethodClassicIn())
  ->sep(', ') + '))' else '' endif + if (not o.input->select (o3 | o3.isRsHeaderParam())->isEmpty()) then '.' + 'with headers'.apply_methodDefault() 
  + '(Map.of(' +  o.input->select(o3| o3.isRsHeaderParam())->collect(o4 | '"' + o4.restData.restId + '",' + o4.name().apply_parameterMethodClassicIn())
  ->sep(', ') + '))'  else '' endif + if (not o.input->select (o3 | o3.isRsBodyParam())->isEmpty()) then '.' + 'with body'.apply_methodDefault() 
  + '(' + let b = o.input->select (o3 | o3.isRsBodyParam())->first() in b.name().apply_parameterMethodClassicIn() + ')'  else '' endif  else '' endif 
  + if(o.isRsSecured()) then '.' +  if (o.isRsApiKeyByQuerySecurity()) then 'with query token'.apply_methodDefault() else 'with header token'.apply_methodDefault() 
  endif + '("' + if (o.hasRsApiKeySecurity()) then o.securitySchemes->first().key else 'Authorization' endif + '", ' + if (o.isRsHttpBasicSecurity()) then '' 
  else '"Bearer " + ' endif + 'token'.apply_parameterMethodClassicIn() +')' else '' endif + if (o.has_metaSkipEmptyValues()) then '.' + 
  'with skip empty values'.apply_methodDefault() + '()' else '' endif + '.' + 'execute'.apply_methodDefault() + '();'/]

[comment écriture de la signature complète d'une opération avec le paramètre en sortie et les paramètres en entrée./]
[query private writeRsSignature(o : soa::Operation) : String = 'public ' + o.writeRsOutput() + ' ' + o.name().apply_methodDefault() 
  + ' (' + o.writeRsInputs() + ')'/]
  
[comment écriture de la liste des paramètres en entrée (si existent) pour une opération de type rest./]
[query private writeRsInputs(o : soa::Operation) : String = if (o.hasInputs()) then o.input->asOrderedSet()
  ->collect(o1 : soa::Parameter | 'final ' + o1.inputRsType() + ' ' + o1.name().apply_parameterMethodClassicIn())
  ->sep(', ')->toString() else '' endif + if (o.isRsSecured()) then if(o.hasInputs()) then ', ' else '' endif 
  + 'final String ' + 'token'.apply_parameterMethodClassicIn() else '' endif /]
  
[comment écriture du paramètre de sortie pour une opération de type rest./]
[query private writeRsOutput(o : soa::Operation) : String =  if (not o.mustHaveRsOutput()) then 'Void' else o.outputRsType() endif/]