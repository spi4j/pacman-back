[module eobjects(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::common/]
[import fr::pacman::core::aql::rule::attribute/]

[import fr::pacman::core::service::AnnotationUtils/]

[comment retourne les noms pour les différents objets de modélisation (entity, dto, references, etc...)
		 pas assez de queries pour effectuer une séparation en plusieurs fichiers pour chaque objet./]

[comment retourne le nom pour l'entité, on enlève le suffixe 'entity' si déjà présent./]
[query public name(e : entity::Entity) : String = e.name.replaceAll('(?i)' + e.suffixEntity(),' ').sanitize()/]

[comment retourne le nom du DTO, on enlève le suffixe 'dto' si déjà présent (mais penser aussi à enlever entity !)./]  
[query public name(d : environment::DTO) : String = d.name.replaceAll('(?i)' + d.suffixDto(), ' '.sanitize())/]

[comment retourne le nom de l'attribut./]
[query public name(a : environment::Attribute) : String = a.name.sanitize()/]
  
[comment retourne le nom de l'énumération./]
[query public name(e : environment::Enumeration) : String = e.name.sanitize()/]

[comment retourne le nom pour un litéral dans une énumération./]
[query public name(l : environment::Literal) : String = l.name.sanitize()/]

[comment retourne le nom pour une opération au sein d'un service./]
[query public name(o : soa::Operation) : String = o.name.sanitize()/]
  
[comment retourne le nom pour un paramètre./]
[query public name(p : soa::Parameter) : String = p.name.sanitize()/]
  
[comment retourne le nom pour la référence./]
[query public name(r : environment::Reference) : String = r.containingType.oclAsType(entity::Entity).name.safeUpper() + r.name.safeUpperFirst()/]
  
[comment retourne le nom pour un service de type soa./]
[query public name(s : soa::Service) : String = s.name.replaceAll('(?i)' + s.suffixService(), ' ').sanitize()/]

[comment retourne le nom de la clé primaire d'une entitée / dto dans les énumérations./]
[query public nameSimplePropertyID(e : entity::Entity) : String = e.name.safeCamelCase() + e.suffixIdPk()/]
  
[comment retourne le nom formatté d'un attribut./]
[query public nameAttribute(a : environment::Attribute) : String = a.name().apply_attributeDefault()/]

[comment retourne le nom formatté pour une opération de service./]
[query public nameOperation(o : soa::Operation) : String = o.name().apply_methodDefault() /]

[comment retourne le nom formattée pour le literal d'une énumération ./]
[query public nameLiteral(l : environment::Literal) : String = l.name.apply_attributeFinalStatic()/]
  
[comment retourne le nom du conteneur pour un service soa./]
[query public nameComponent(s : soa::Service) : String = s.eContainer(soa::Component).name.safeLower()/]












[comment retourne le nom physique de la référence (si existe) ou le nom direct de la référence pour la couche de persistance./]
[comment query public namePhysical(r : environment::Reference) : String = if r.hasNamePhysical() then r.get_annotationBody(r.get_metakeyPhysicalName()) else r.containingType.oclAsType(entity::Entity).name.safeUpper() + r.referencedType.oclAsType(entity::Entity).name.safeUpper()endif/]
























[comment retourne /]
[query public nameBaseAttribute(a : environment::Attribute) : String = a.name.safeLowerFirst()/]

[comment retourne /]
[query public nameBaseReference(r : environment::Reference) : String = r.name.safeLowerFirst()/]

[comment retourne le nom de la référence, on enlève le 'DTOS' en fin de nom./]
[query public nameSimpleXX(r : environment::Reference) : String = if r.name.size() > 4 and r.name.substring(r.name.size() - 3).equalsIgnoreCase('dtos') then r.name.substring(1, r.referencedType.oclAsType(environment::DTO).name.size() - 4).safeCamelCase() else r.name.safeCamelCase() endif/]

[comment retourne/]
[comment query public getNameGetterListEntity(r : environment::Reference) : String = 'get ' + r.name.normalize().apply_attributeMultiple()).apply_methodDefault()/]

[comment retourne/]
[comment query public getNameSetterListEntity(r : environment::Reference) : String = 'set ' + r.name.normalize().apply_attributeMultiple()).apply_methodDefault()/]

[comment on enlève le 'Entity' en fin de nom./]
[comment query public buildSimpleEntityName(e : entity::Entity) : String = if e.name.size() > 6 and e.name.substring(e.name.size() - 5).equalsIgnoreCase('entity') then e.name.substring(1, e.name.size() - 6).sanitize() else e.name.sanitize() endif/]

[comment on enlève le 'Service' en fin de nom./]
[comment query public buildSimpleServiceName(s : soa::Service) : String = if s.name.size() > 7 and s.name.substring(s.name.size() - 6).equalsIgnoreCase('service') then s.name.substring(1, s.name.size() - 7).sanitize() else s.name.sanitize() endif/]

[comment securite, si pas de presence _id on ajoute a la fin de la reference /]
[comment query public buildSimpleReferenceName(s : String) : String = if s.useIdSqlSuffixForReferences() then if s.size() > s.nameSQL_REF_ID().size() + 1 and s.substring(s.size() - s.nameSQL_REF_ID().size() + 1).equalsIgnoreCase(s.nameSQL_REF_ID()) then s else s + s.nameSQL_REF_ID() endif else s endif/]