[module packages(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::rule::common/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment 	retourne les noms des différents packages (ne pas confondre avec les chemins de génération). 
			ATTENTION, ici les noms de packages sont automatiquement concaténés avec le package racine 
			de l'application, il n'est donc pas nécessaire de le préciser à ce niveau./]
			
[comment retourne le package pour les types spéciaux de Pacman./]
[query public namePackageType(any : ecore::EObject) : String = 'type'/]
  
[comment retourne le package pour l'interface du port (domain->controller)./]
[query public namePackageOutItf(s : soa::Service) : String = s.get_suffixCommon() + '.features' + '.' + s.nameComponent()/]
  
[comment retourne le package pour l'implémentation du port par l'adaptateur (domain->controller)./]
[query public namePackageOutImpl(s : soa::Service) : String = s.get_suffixCommon() + '.features'/]

[comment retourne le package pour l'interface du port (domain->persistance)./]
[query public namePackageInItf(s : soa::Service) : String = s.get_suffixCommon() + '.' + s.suffixInterfaceIn().trim() + 's' + '.' + s.nameComponent()/]

[comment retourne le package pour l'implémentation du port par l'adaptateur (domain->persistance)./]
[query public namePackageInImpl(s : soa::Service) : String = 'adapters.infra.' + s.nameComponent()/]
  
[comment retourne le package pour une classe d'énumération./]
[query public namePackageEnumeration(e : environment::Enumeration) : String = 'app'/]

[comment retourne le package pour les classes d'annotation./]
[query public namePackageAnnotation(e : ecore::EObject) : String = 'annotation'/]
 
[comment retourne le package pour l'implémentation d'un service soa./]
[query public namePackageServiceImpl(s : soa::Service) : String = s.get_suffixCommon() + '.' + s.suffixService() +  's.' + s.nameComponent()/]
  
[comment retourne le package pour l'implémentation d'un contrôleur soa./]
[query public namePackageControllerImpl(s : soa::Service) : String = 'adapters.app.' + s.nameComponent()/]
  
[comment retourne le package pour une classe d'implémentation (cas d'une entité)./]
[query public namePackageEntityImpl(e : entity::Entity) : String = 'persistence' + e.blockHierarchy()/]
  
[comment retourne le package pour une interface (cas d'une entité)./]
[query public namePackageEntityItf(e : entity::Entity) : String = ''/]
  
[comment retourne le package pour une classe d'interface de la persitance ORM./]
[query public namePackageEntityDaoItf(e : entity::Entity) : String = 'persistence.repo' + e.blockHierarchy()/]
  
[comment retourne le package pour une classe d'implémentation de la persistance ORM./]
[query public namePackageEntityDaoImpl(e : entity::Entity) : String = 'persistence.repo' + e.blockHierarchy()/]

[comment retourne le package pour une classe d'implémentation (cas d'un objet de transfert)./]  
[query public namePackageDtoImpl(d : environment::DTO) : String = d.get_suffixCommon() + '.objects' + d.blockHierarchy()/]
  
[comment retourne le package pour une classe d'implémentation (cas d'un objet sérialisé)./]  
[query public namePackageXtoImpl(d : environment::DTO) : String = d.get_suffixServer() + '.xto' + d.blockHierarchy()/]
  
[comment retourne le package pour une classe de mapping entre l'objet métier et l'objet d'infrastructure./]  
[query public namePackageMapperInImpl(d : environment::DTO) : String = 'adapters.infra.' + d.suffixMapper().trim() + 's' + d.blockHierarchy()/]
  
[comment retourne le package pour une classe de mapping entre l'objet métier et l'objet application./]  
[query public namePackageMapperOutImpl(d : environment::DTO) : String = 'adapters.app.' + d.suffixMapper().trim() + 's' + d.blockHierarchy()/]
  
[comment ESSAYER DE MUTUALISER ?????./]
  
[comment retourne le package en fonction de la hiérarchie des namespaces (cas d'une entité)./] 
[query private blockHierarchy(e : entity::Entity) : String = if (e.ancestors(environment::Namespace)->size() < 1) then '' else '.' 
  + e.ancestors(environment::Namespace)->select(o1 | not (o1.name = null))->reverse()->collect(o2 | o2.oclAsType(environment::Namespace))
  ->collect(o3 | o3.name)->collect(o4 | o4.sanitize())->collect(o5 | o5.toLower())->sep('.') endif/]

[comment ./]
[query private blockHierarchy(r : environment::Reference) : String = if (r.ancestors(environment::Namespace)->size() < 1) then '' else '.' 
  + r.ancestors(environment::Namespace)->select(o1 | not (o1.name = null))->reverse()->collect(o2 | o2.oclAsType(environment::Namespace))
  ->collect(o3 | o3.name)->collect(o4 | o4.sanitize())->collect(o5 | o5.toLower())->sep('.') endif/]
  
[comment :  /]
[query public blockHierarchy(d : environment::DTO) : String = if d.ancestors(environment::Namespace)->size() < 1 then '' else '.' 
 + d.ancestors(environment::Namespace)->select(o1 | o1.oclIsTypeOf(environment::Namespace) and not (o1.name = null))
 ->reverse()->collect(o2 | o2.oclAsType(environment::Namespace))->collect(o3 | o3.name)->collect(o4 | o4.sanitize())
 ->collect(o5 | o5.toLower())->sep('.') endif/]

[comment ESSAYER DE MUTUALISER ?????./]


[comment retourne le package principal pour /]
[comment query public packageApi(any : ecore::EObject) : String = any.getPackageApi_invoke().trim()/]

[comment retourne le package principal pour la gestion du métier./]
[comment query public packageBusiness(any : ecore::EObject) : String = any.getPackageBusiness_invoke().trim()/]

[comment retourne le package principal pour la gestion de la persistance ()./]
[comment query public packagePersistence(any : ecore::EObject) : String = any.getPackagePersistence_invoke().trim()/]

[comment retourne le package principal /]
[comment query public packageReferentiel(any : ecore::EObject) : String = any.getPackageReferentiel_invoke().trim()/]

[comment retourne le package principal pour /]
[comment query public packageRequirement(any : ecore::EObject) : String = any.getPackageRequirement_invoke().trim()/]

[comment retourne le package principal pour /]
[comment query public packageMatching(any : ecore::EObject) : String = any.getPackageMatching_invoke().trim()/]

[comment retourne le package principal pour/]
[comment query public packageJdbcImpl(any : ecore::EObject) : String = any.getPackageImplJdbc_invoke().trim()/]

[comment retourne le package principal pour ./]
[comment query public packageServerImpl(any : ecore::EObject) : String = any.get_packageImplemServer().trim()/]