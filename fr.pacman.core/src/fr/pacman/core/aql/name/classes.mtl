[module classes(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/soa/4.0.0')/]
						
[import fr::pacman::core::aql::base/]						
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::rule::class/]
[import fr::pacman::core::aql::rule::common/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment 	retourne les noms des classes java./]

[comment retourne le nom pour les interfaces des classes de mapping./]
[comment query public nameClassEntityMapperItf(e : entity::Entity) : String = (e.name() + e.suffixMapper()).apply_classInterface()/]

[comment retourne le nom pour l'implémentation d'une classe de service soa (feature)./]  
[query public nameClassServiceImpl(s : soa::Service) : String = (s.name() + s.suffixService()).apply_classImplem()/]
  
[comment retourne le nom pour l'implémentation d'une classe de service soa (contrôleur rest, etc..)./]  
[query public nameClassControllerImpl(s : soa::Service) : String = (s.name() + ' controller').apply_classImplem()/]
  
[comment retourne le nom pour l'interface d'une classe de service soa (feature)./]  
[query public nameClassServiceOutItf(s : soa::Service) : String = (s.name() + s.suffixService()).apply_classInterface()/]  

[comment retourne le nom pour l'interface d'une classe de service soa (infra)./]  
[query public nameClassServiceInItf(s : soa::Service) : String = (s.name() + s.suffixInterfaceIn()).apply_classInterface()/]  

[comment retourne le nom pour l'interface d'une classe de service soa crud (infra)./]  
[query public nameClassServiceCrudInItf(d : environment::DTO) : String = (d.name() + ' crud ' + d.suffixInterfaceIn()).apply_classInterface()/]  

[comment retourne le nom d'implémentation d'une classe pour le service de persistance./]
[query public nameClassServiceInImpl(s : soa::Service) : String = (s.name() + ' jpa' + s.suffixInterfaceOut()).apply_classImplem()/]  

[comment retourne le nom d'implémentation d'une classe pour le service crud de persistance./]
[query public nameClassServiceCrudInImpl(d : environment::DTO) : String = (d.name() +' crud jpa' + d.suffixInterfaceOut()).apply_classImplem()/]  

[comment retourne le nom pour la classe d'implémentation d'un type spécial pacman./]
[query public nameClassType(s : String) : String = s.apply_classDefault()/]

[comment retourne le nom pour l'annotation d'injection des services métier./]
[query public nameClassAnnotationOut (any : ecore::EObject) : String = any.nameAnnotationDomainService().apply_classDefault()/]
  
[comment retourne le nom pour l'annotation d'injection des services métier./]
[query public nameClassAnnotationIn (any : ecore::EObject) : String = any.nameAnnotationAdapter().apply_classDefault()/]
  
[comment retourne le nom pour l'annotation de gestion des transactions./]
[query public nameClassAnnotationTrans (any : ecore::EObject) : String = any.nameAnnotationTransactionnal().apply_classDefault()/]
  
[comment retourne le nom pour l'utilitaire de validation des champs pour les objets métier./]
[query public nameClassValidatorUtilsImpl (any : ecore::EObject) : String = 'validator utils'.apply_classDefault()/]

[comment retourne le nom de la classe pour le type spécifique pacman 'XtopSup'./]
[query public nameClassXtopSupImpl (any : ecore::EObject) : String = any.nameTypeXtopSup().nameClassType()/]

[comment retourne le nom pour la classe d'énumération du statut de la ligne en base de données./]
[query public nameClassDatabaseStatusImpl (any : ecore::EObject) : String = any.nameDatabaseStatusEnum().apply_classEnum()/]
  
[comment retourne le nom pour une classe d'énumération./]
[query public nameClassEnumeration(e : environment::Enumeration) : String = e.name().apply_classEnum()/]

[comment retourne le nom pour l'implémentation de l'entité./]
[query public nameClassEntityImpl(e : entity::Entity) : String = (e.name() + e.suffixEntity()).apply_classImplem()/]

[comment retourne le nom pour l'interface de l'entité./]
[query public nameClassEntityItf(e : entity::Entity) : String = e.name().apply_classInterface()/]

[comment retourne le nom de la classe abstraite pour les champs automatiques de la base de données./]
[query public nameClassEntityAbs(any: ecore::EObject) : String = (any.nameProject() + ' entity').apply_classAbstract()/]
  
[comment retourne le nom de la classe de démarrage pour une application Spring./]
[query public nameClassAppBoostrap(any : ecore::EObject) : String = (any.nameProject() + any.suffixApplicationBoostrap()).apply_classDefault()/]
  
[comment retourne le nom de la classe pour un objet métier./]
[query public nameClassDtoImpl(d : environment::DTO) : String = (d.name() + d.suffixDto()).apply_classImplem()/]
  
[comment retourne le nom de la classe pour un objet sérialisé./]
[query public nameClassXtoImpl(d : environment::DTO) : String = (d.name() + d.suffixXto()).apply_classImplem()/] 
  
[comment retourne le nom pour la classe d'implémentation du mapper objet métier <-> objet infrastructure./]
[query public nameClassMapperImpl(d : environment::DTO) : String = (d.name() + ' ' + d.suffixMapper()).apply_classDefault()/]

[comment retourne le nom pour la classe d'implémentation du mapper objet métier <-> objet infrastructure./]
[query public nameClassMapperImpl(s : soa::Service) : String = (s.name() + ' ' + s.suffixMapper()).apply_classDefault()/]

[comment retourne le nom pour l'interface de persistance pour une entité./]
[query public nameClassEntityPersistItf(e : entity::Entity) : String = (e.name() + e.suffixEntityDao()).apply_classInterface()/]
  
[comment retourne le nom pour la classe d'implémentation de la persistance./]
[query public nameClassEntityPersistImpl(e : entity::Entity) : String = (e.name() + e.suffixEntityDao()).apply_classImplem()/]
  
[comment retourne le nom de la classe pour l'implémentation de la gestion globale des erreurs rest./]
[query public nameClassRsExceptionHandlerImpl(any : ecore::EObject) : String = (any.get_projectName() + any.suffixRsExceptionHandler()).apply_classDefault()/]

[comment retourne le nom de la classe d'exception dans le cas ou les données ne sont pas trouvées./]
[query public nameClassRsDataNotFoundExceptionImpl(any : ecore::EObject) : String = (any.get_projectName() + ' not found exception').apply_classDefault()/]
  
[comment retourne le nom de la classe d'exception dans le cas d'une problématique dans les mappers./]
[query public nameClassMapperExceptionImpl(any : ecore::EObject) : String = (any.get_projectName() + ' mapper exception').apply_classDefault()/]
  
[comment retourne le nom de la classe d'exception dans le cas d'une problématique dans les mappers./]
[query public nameClassNotImplementedExceptionImpl(any : ecore::EObject) : String = (any.get_projectName() + ' not implemented exception').apply_classDefault()/]
  
[comment retourne le nom de la classe d'exception dans le cas d'une erreur de validation (champs absent ou invalide)./]
[query public nameClassValidationExceptionImpl(any : ecore::EObject) : String = (any.get_projectName() + ' validation exception').apply_classDefault()/]

[comment retourne le nom de la classe contenant le corps de la reponse pour la gestion globale des erreurs rest./]
[query public nameClassRsErrorBodyResponseImpl(any : ecore::EObject) : String = (any.get_projectName() + ' error body response').apply_classDefault()/]

[comment retourne le nom de la classe de résolution des statuts http (int <-> HTTPStatus) pour les erreurs rest./]
[query public nameClassRsHttpStatusResolverImpl(any : ecore::EObject) : String = (any.get_projectName() + ' http status resolver').apply_classDefault()/]
  
[comment retourne le nom de la classe gestion des transactions jpa./]
[query public nameClassJpaTransactionExecutorImpl(any : ecore::EObject) : String = (any.get_projectName() + ' transactional executor').apply_classDefault()/]
  
[comment retourne le nom de la classe gestion aspect des transactions jpa./][query public nameClassJpaTransactionServiceAspectImpl(any : ecore::EObject) : String = (any.get_projectName() + ' transactional service aspect').apply_classDefault()/]
  
[comment retourne le nom de la classe de configuration des transactions jpa./]
[query public nameClassJpaTransactionConfigurationImpl(any : ecore::EObject) : String = (any.get_projectName() + ' transactional configuration').apply_classDefault()/]

[comment retourne le nom de la classe pour la configuration de la sécurité dans le cadre des services rest./]
[query public nameClassRsSecurityConfigImpl(any : ecore::EObject) : String = (any.get_projectName() + ' security config').apply_classDefault()/]
  
[comment retourne le nom pour la classe d'implémentation du DAO dans le cadre des test./]
[comment query public nameClassDaoJdbcTest(e : entity::Entity) : String = (e.name() + e.suffixDaoTest()).apply_classTest()/]
  
[comment retourne le nom pour ???????????????????/]
[comment query public nameClassReferenceDaoImpl(r : environment::Reference) : String = (r.name() + r.suffixDao()).apply_classImplem()/]