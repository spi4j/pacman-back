[module attribute(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::service::DtoEntityUtils/]
[import fr::pacman::core::property::project::ProjectProperties/]

[comment liste des requêtes possibles sur les attributs./]

[comment retourne le type pour l'attribut./]
[query public type(a : environment::Attribute) : String = if (a.isIdentifier) then a.defaultTypePk() else if (a.type = null) then 'String' 
  else if (a.isMultiple()) then 'List<' + a.type.type() + '>'else a.type.type() endif endif endif/]

[comment vérifie si l'attribut est une énumération./]
[query public isTypeOfEnumeration(a : environment::Attribute) : Boolean = a.type.oclIsTypeOf(environment::Enumeration) and 
	not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty()/]

[comment vérifie si l'attribut est obligatoire./]
[query public isMandatory(a : environment::Attribute) : Boolean = a.multiplicity = environment::MultiplicityKind::ONE 
  or a.multiplicity = environment::MultiplicityKind::ONE_STAR/] 
  
[comment vérifie si l'attribut est une liste (0,*)(1,*) (utilisé uniquement pour la validation). /]
[query public isMultiple(a : environment::Attribute) : Boolean = a.multiplicity = environment::MultiplicityKind::ONE_STAR 
  or a.multiplicity = environment::MultiplicityKind::ZERO_STAR/]

[comment vérifie si l'attribut a des contraintes de taille (min | max) pour sa valeur./]
[query public hasSizeConstraints(a: environment::Attribute) : Boolean =  a.type.name.equalsIgnoreCase('string') 
  and (a.minimum.exists() or a.maximum.exists())/]
	
[comment retourne tous les attributs d'une entité qui ne sont pas des clés primaires. /]
[query public attributesNoPK(e : entity::Entity) : OrderedSet(environment::Attribute) = e.get_attributes()->select(a | 
  not a.isIdentifier)->asOrderedSet()/]

[comment retourne tous les attributs d'un objet de transfert qui ne sont pas des clés primaires. /]
[query public attributesNoPK(d : environment::DTO) : OrderedSet(environment::Attribute) = d.get_attributes()->asOrderedSet()/]
	
[comment retourne tous les attributs d'une entité qui ne sont pas des clés primaires et ne sont pas des champs calculés. /]
[query public attributesNoPKAndNoComputed(e : entity::Entity) : OrderedSet(environment::Attribute) = e.get_attributes()->select(a | 
	not a.isIdentifier and not a.is_metaComputed())->asOrderedSet()/]
	
[comment retourne tous les attributs d'un objet métier qui ne sont pas des clés primaires et ne sont pas des champs calculés. /]
[query public attributesNoPKAndNoComputed(d : environment::DTO) : OrderedSet(environment::Attribute) = d.get_attributes()->select(a | 
	not a.isIdentifier)->asOrderedSet()/]

[comment retourne tous les attributs d'une entité qui ne sont pas des clés primaires et ne sont pas versionnés./]
[query public attributesNoPkNoVersion(e : entity::Entity) : OrderedSet(environment::Attribute) = e.get_attributes()
	->select(a | not a.isIdentifier and not a.has_metaVersion())->asOrderedSet()/]

[comment vérifie si il est possible d'écrire l'attribut additionnel (champ auto)./]
[query public hasToWriteAutoAttribute (prop : String) : Boolean =  prop.keyNameSqlAutoAttribut().get_property().exists() 
	and  prop.keyNameSqlAutoAttribut().get_property().exists()/]

[comment vérifie si l'attribut automatique est de type xtopsup./]	
[query public isXtopSup(prop : String) : Boolean = prop.lastIndex(prop.keyXtopSup()) > 0/]
	
[comment vérifie si l'attribut automatique est de type xdmaj./]	
[query public isXdMaj(prop : String) : Boolean = prop.lastIndex(prop.keyXdMaj()) > 0/]

[comment retourne le type pour l'attribut additionnel (champ auto)./]
[query public autoAttributeType(prop : String) : String = prop.keyTypeSqlAutoAttribut().get_property()/]

[comment retourne le nom pour l'attribut additionnel (champ auto)./]
[query public autoAttributeName(prop : String) : String = prop.keyNameSqlAutoAttribut().get_property()/]

[comment retourne le nom pour l'attribut additionnel (champ auto)./]
[query public autoAttributeComment (prop : String) : String = prop.keyCommentSqlAutoAttribut().get_property()/]

[comment retourne la taille pour l'attribut additionnel (champ auto)./]
[query public autoAttributSize(prop : String) : String = prop.keySizeSqlAutoAttribut().get_property()/]

[comment retourne le type de nullité pour l'attribut additionnel (champ auto)./]
[query public autoAttributNull(prop : String) : String = prop.keyNullSqlAutoAttribut().get_property()/]

[comment retourne la valeur par défaut pour l'attribut additionnel (champ auto)./]
[query public autoAttributDefault(prop : String) : String = prop.keyDefaultSqlAutoAttribut().get_property()/]