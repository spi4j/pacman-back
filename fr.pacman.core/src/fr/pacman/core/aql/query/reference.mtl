[module reference(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
					'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::service::DatabaseUtils/]

[comment liste des requêtes possibles au niveau des références pour les entités./]

[comment retourne le nom pour l'attribut en provenance de la référence./]
[query public referencedName(e : entity::Entity, r : environment::Reference) : String = 
	if(r.isMultipleBidirectionnal() or (r.isMultiple() and r.containingType <> e) 
	or r.isRecursive()) then r.name else e.name() endif/]

[comment retourne le nom pour l'attribut en provenance de la référence./]
[query public referencedName(d : environment::DTO, r : environment::Reference) : String = 
	if(r.isMultipleBidirectionnal() or (r.isMultiple() and r.containingType <> d) 
	or r.isRecursive()) then r.name else d.name() endif/]
	
[comment raccourci pour l'obtention de l'entité dans le cadre des références (toujours une entité)./]
[comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! A REVOIR PAS BON./]	
[query public referencedEntity(r : environment::Reference, e : entity::Entity) : entity::Entity = 
	r.structuredType(e).oclAsType(entity::Entity)/]

[comment raccourci pour l'obtention du dto dans le cadre des références (toujours un dto)./]
[comment !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! A REVOIR PAS BON./]		
[query public referencedDto(r : environment::Reference, d: environment::DTO) : environment::DTO = 
	r.structuredType(d).oclAsType(environment::DTO)/]
	
[comment retourne le type xxxx (si fonctionne mal peut toujours comparer les identifiants techniques !)./] 
[query private structuredType(r : environment::Reference, st : environment::StructuredType) : environment::StructuredType = 
	if (r.containingType = st) then r.referencedType else r.containingType endif/]  

[comment retourne les références triées par nom./]	
[query private sortedByName(c : Sequence(environment::Reference)) : OrderedSet(environment::Reference) = 
	c->asOrderedSet()->sortedBy(o | o.name.toLower())/]

[comment retourne les références triées par nom et sans doublon fonctionnel pour les bidirectionnelles./]
[query private skipDuplicates(c : Sequence(environment::Reference)) : OrderedSet(environment::Reference) = 
	c->do_skipDuplicates()->sortedByName()/]

[comment vérifie si un référence est de type recursif (0,*)(1,*)./]
[query public isStarRecursive(r : environment::Reference) : Boolean = r.referencedType = r.containingType 
  and r.oppositeOf = null and r.isMultiple()/]

[comment vérifie si la référence est de type récursif (0,1) (1)./]
[query public isZeroOneRecursive(r : environment::Reference) : Boolean = r.referencedType = r.containingType 
  and not r.isMultiple()/]

[comment vérifie si la référence est de type récursif./]
[query public isRecursive(r : environment::Reference) : Boolean = r.isZeroOneRecursive() or r.isStarRecursive()/]

[comment vérifie si la relation est biderectionnlle et multiple (n-n)./]
[query public isMultipleBidirectionnal(r : environment::Reference) : Boolean = 
	r.isMultiple() and r.oppositeOf <> null/]

[comment vérifie si la référence exige une entité ou un dto/xto (les listes sont considérées comme obligatoire)./]
[query public isMandatory(r : environment::Reference) : Boolean = if (r.exists()) then not (r.multiplicity = 
	environment::MultiplicityKind::ZERO_ONE) else false endif/]

[comment retourne toutes les références unidirectionnelles niveau entité ou dto/xto, la requête est 
		légèrement différente de 'referencesFK' et fonctionne sur les deux diagrammes (entity / soa).
		-> pour spring boot uniquement./]	
[query public referencesFKSB(st : environment::StructuredType) : OrderedSet(environment::Reference) = 
	st.references
	->select(o | (o.oppositeOf = null 
		and not (o.isMultiple() 
		and o.referencedType = st)))		
	->union(st.eContainer( if (st.oclIsKindOf(entity::Entity)) 
		then entity::Root else soa::System endif)
		.eAllContents(environment::Reference)
	->select(o | o.oppositeOf = null 
		and o.isMultiple() 
		and o.referencedType = st
		and not (o.containingType = o.referencedType)))			
	->sortedByName()/]

[comment retourne les références simples niveau entité (FK) : 
		- relations unidirectionnelles et récursives (0,1)(1)
		- relations bidirectionnelles (0,*)(1,*) 
		- relations unidirectionnelles (0,*)(1,*) inversées (A->B devient B->A)
		-> pour scripts sql et spi4j uniquement./]
[query public referencesFK(st : environment::StructuredType) : OrderedSet(environment::Reference) = 
	st.references
	->select(o | (o.oppositeOf = null 
		and not o.isMultiple()) 
		or (not (o.oppositeOf = null) 
		and not o.isMultiple()))					
	->union(st.eContainer(entity::Root).eAllContents(environment::Reference)
	->select(o | o.oppositeOf = null 
		and o.isMultiple() 
		and o.referencedType = st
		and not (o.containingType = o.referencedType)))
	->sortedByName()/]

[comment retourne les références pour les tables de jointure : 
		- les relations bidirectionnelles (*,*)
		- les relations unidirectionnelles récursives (0,*)(1,*)
		-> pour scripts sql et spi4j uniquement./]	
[query private referencesJT(rs : Sequence(environment::Reference)) : Sequence(environment::Reference) = 
	rs
	->select(o : environment::Reference | o.isMultiple() 
		and (not (o.oppositeOf = null) 
		and o.oppositeOf.isMultiple()
		and o.navigable) 
		or (o.oppositeOf = null 
		and o.isMultiple() 
		and o.referencedType = o.containingType))/]

[comment retourne les références des tables de jointure pour les deux diagrammes (entity / soa) 	
 		-> pour scripts sql, spi4j, spring boot./]
[query public referencesJT(st : environment::StructuredType) : OrderedSet(environment::Reference) = 
	st.ownedReferences
	->referencesJT()
	->sortedByName()/]	

[comment retourne les références des tables de jointure, niveau root 
		-> pour scripts sql et spi4j uniquement./]
[query public referencesJT(r : entity::Root) : OrderedSet(environment::Reference) = 
	r.eAllContents(environment::Reference)
	->referencesJT()
	->do_skipDuplicates()
	->sortedByName()/]
  
[comment écriture du type complet pour les entités ou les dtos référencés (pas d'optional sinon plante jpa)./]
[query public referencedTypeSignature(r : environment::Reference, st : environment::StructuredType) : String = 
  if (r.isMultiple() and r.containingType = st) then if (r.isMultipleBidirectionnal()) then 'Set<' else  'List<' endif  
  + if (st.oclIsKindOf(entity::Entity)) then r.referencedEntity(st).nameClassEntityImpl() 
  else r.referencedDto(st.oclAsType(environment::DTO)).nameClassDtoImpl() endif + '>' 
  else if (st.oclIsKindOf(entity::Entity)) then  r.referencedEntity(st).nameClassEntityImpl() 
  else r.referencedDto(st.oclAsType(environment::DTO)).nameClassDtoImpl() endif endif /]
  
[comment écriture du type complet pour les types référencés en srotie vers la couche application./]
[query public referencedOutTypeSignature(r : environment::Reference, st : environment::StructuredType) : String = 
  if (r.isMultiple() and r.containingType = st) then if (r.isMultipleBidirectionnal()) then 'Set<' else  'List<' endif  
  +  r.referencedDto(st.oclAsType(environment::DTO)).nameClassXtoImpl() + '>' 
  else  r.referencedDto(st.oclAsType(environment::DTO)).nameClassXtoImpl() endif /]

[template public blockHierarchy(r : environment::Reference) post(self.trim())]
  [if (r.ancestors(environment::Namespace)->size() < 1)]
  [else]
    .[r.ancestors(environment::Namespace)->select(temp6 | not (temp6.name = null))
    ->reverse()->collect(temp7 | temp7.oclAsType(environment::Namespace))
    ->collect(temp8 | temp8.name)->collect(temp9 | temp9.safeCamelCase())
    ->collect(temp10 | temp10.toLower())->sep('.')/]
  [/if]
[/template]  
