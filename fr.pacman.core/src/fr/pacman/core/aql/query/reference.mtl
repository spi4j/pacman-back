[module reference(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::service::DatabaseUtils/]

[comment liste des requêtes possibles au niveau des références pour les entités./]

[comment retourne le type xxxx ./] 
[query public structuredType(r : environment::Reference, e : entity::Entity) : environment::StructuredType = 
	if (r.containingType.oclAsType(entity::Entity) = e) then r.referencedType else r.containingType endif/]  
	
[comment raccourci pour l'obtention de l'entité dans le cadre des références (toujours une entité)./]	
[query public referencedType(r : environment::Reference, e : entity::Entity) : entity::Entity = r.structuredType(e).oclAsType(entity::Entity)  /]

[comment retourne les références triées par nom./]	
[query private sortedByName(c : Sequence(environment::Reference)) : OrderedSet(environment::Reference) = 
	c->asOrderedSet()->sortedBy(o | o.name.toLower())/]

[comment retourne les références triées par nom et sans doublon fonctionnel pour les bidirectionnelles./]
[query private skipDuplicates(c : Sequence(environment::Reference)) : OrderedSet(environment::Reference) = 
	c->do_skipDuplicates()->sortedByName()/]

[comment vérifie si un référence est de type recursif (0,*)(1,*)./]
[query public isStarRecursive(r : environment::Reference) : Boolean = 
	r.referencedType = r.containingType and r.oppositeOf = null and r.isMultiple()/]

[comment retourne les références simples niveau entité (FK) : 
	- relations unidirectionnelles et récursives (0,1)(1)
	- relations bidirectionnelles (0,*)(1,*) 
	- relations unidirectionnelles (0,*)(1,*) inversées (A->B devient B->A)/]
[query public referencesForeignKeys(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.references
	->select(o | (o.oppositeOf = null 
		and not o.isMultiple()) 
		or (not (o.oppositeOf = null) 
		and not o.isMultiple()))					
	->union(e.eContainer(entity::Root).eAllContents(environment::Reference)
	->select(o | o.oppositeOf = null 
		and o.isMultiple() 
		and o.referencedType = e
		and not (o.containingType = o.referencedType)))
	->sortedByName()/]

[comment retourne les références pour les tables de jointure : 
	- les relations bidirectionnelles (*,*)
	- les relations unidirectionnelles récursives (0,*)(1,*)./]	
[query private referencesJoinTables(rs : Sequence(environment::Reference)) : Sequence(environment::Reference) = 
	rs
	->select(o : environment::Reference | o.isMultiple() 
		and (not (o.oppositeOf = null) 
		and o.oppositeOf.isMultiple()
		and o.navigable) 
		or (o.oppositeOf = null 
		and o.isMultiple() 
		and o.referencedType = o.containingType))/]

[comment retourne les références des tables de jointure niveau entité. /]	
[query public referencesJoinTables(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.ownedReferences
	->referencesJoinTables()
	->sortedByName()/]	

[comment retourne les références des tables de jointure, niveau root./]
[query public referencesJoinTables(r : entity::Root) : OrderedSet(environment::Reference) = 
	r.eAllContents(environment::Reference)
	->referencesJoinTables()
	->do_skipDuplicates()
	->sortedByName()/]
























[comment retourne les références pour les relations récursives de type (0,*)(1,*) sur une entité./][query public starOwnedAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(o | o.isMultiple() 
	and o.referencedType = e and o.oppositeOf = null)->sortedByName()/]

[comment retourne les références navigables de type (*,*) sur une entité./]
[query public starStarNavigable(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.ownedReferences->select(o | o.isMultiple() and o.navigable and not (o.oppositeOf = null) and o.oppositeOf.isMultiple())->sortedByName()/]

[comment retourne les références de type (0,1)(1) sur une entité./]
[query private zeroOne(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.references->select(o | not o.isMultiple())->sortedByName()/]

[comment retourne les références de type (0,1)(1), pour une entité référencée (ent) donnée, sur une entité./]
[query public zeroOne(e : entity::Entity, ent : entity::Entity) : OrderedSet(environment::Reference) = 	e.references->select(o | not o.isMultiple() and o.referencedType.oclAsType(entity::Entity) = ent)->sortedByName()/]

[comment retourne les références de type (0,*)(1,*) d'une entité référençante (ent) vers une entité référencée (sauf recursive (0,*)(1,*)./]
[query public star(e : entity::Entity, ent : entity::Entity) : OrderedSet(environment::Reference) = 
	if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)
	->select(o | o.isMultiple() and o.referencedType = e and o.containingType = ent and o.oppositeOf = null)
	->select(o | not e.starOwnedAllNavigability()->includes(o))->sortedByName() endif/]

[comment retourne les références de type (0,*)(1,*) vers une entité./]
[query public star(e : entity::Entity) : OrderedSet(environment::Reference) = 
	if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)
	->select(o | o.isMultiple() and o.referencedType = e and (o.oppositeOf = null or not o.oppositeOf.isMultiple()))->sortedByName() endif/]

[comment retourne les références d'une entité (0,*)(1) ainsi que les références (0,*)(1,*) vers cette entité, pour une entité fk (ent) donnée/]
[query public noStarAndStarAllNavigability(e : entity::Entity, ent : entity::Entity) : OrderedSet(environment::Reference) = 
	e.zeroOne(ent)->union(e.star(ent))->asSequence()->sortedByName()/]

[comment retourne toutes les entités référencées ou référencantes, pour une entitée./]
[query public entitiesReferencedOrReferencing(e : entity::Entity) : OrderedSet(entity::Entity) = 
	e.zeroOne()->asSequence()->collect(o1 | o1.referencedType)->collect(o2 | o2.oclAsType(entity::Entity))
	->union(e.star()->asSequence()->collect(o3 | o3.containingType)->collect(o4 | o4.oclAsType(entity::Entity)))
	->asOrderedSet()/]















[comment retourne les références de type (0,*)(1,*) vers une entité./]
[comment query public starAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = 
	if e.eContainer(entity::Root) = null then Sequence{}->asOrderedSet() else e.eContainer(entity::Root).eAllContents(environment::Reference)
	->select(r | r.isMultiple() and r.referencedType = e and (r.oppositeOf = null or not r.oppositeOf.isMultiple()))->sort() endif/]

[comment retourne les références d'une entité (0,*)(1) ainsi que les références (0,*)(1,*) vers cette entité, pour une entité fk (ent) donnée/]
[comment !!!!!!!! VOIR SI ON DOIT DEPLACER LE RECURSIF PLUTOT AU NIVEAU DE starAllNavigability()  !!!!!!!!!/]
[comment query public noStarAndStarAllNavigability(e : entity::Entity, ent : entity::Entity) : OrderedSet(environment::Reference) = 
	e.noStarAllNavigability(ent)->union(e.starAllNavigability(ent))->select(o | not e.starOwnedAllNavigability()->includes(o))->asSequence()->sort()/]

[comment retourne les références pour les relations récursives de type (0,*)(1,*) sur une entité./]
[comment query public starOwnedAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = e.references->select(r | r.isMultiple() 
	and r.referencedType = e and r.oppositeOf = null)->sort()/]
























[comment retourne les références d'une entité (0,*)(1) ainsi que les références (0,*)(1,*) vers cette entité, navigables ou non./]
[comment query public noStarAndStarAllNavigability(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.noStarAllNavigability()->union(e.starAllNavigability())->asSequence()->sortedByName() /]


[comment retourne les références d'une entité sans multiplicité ainsi que les références multiple vers cette entité./]
[comment query public referencesNoStarAndReferencingStar(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.referencesNoStar()
	->union(e.referencingStar())
	->asOrderedSet()
	->sortedBy(o | o.name.toLower())
/]

[comment retourne les références d'une entité sans multiplicité./]
[comment query public referencesNoStar(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.references->select(r | 
		not r.isMultiple() 
		and r.navigable)
	->asOrderedSet()
	->sortedBy(temp1 | temp1.name.toLower())
/]

[comment retourne toutes les références d'une entité de type (O,*)(1,*) et navigable./]
[comment query public referencesStar(e : entity::Entity) : OrderedSet(environment::Reference) = 
	e.references->select(r | r.isMultiple() and r.navigable)
	->asOrderedSet()
	->sortedBy(temp1 | temp1.name.toLower())
/]

[comment retourne les références avec multiplicité vers une entité./]
[comment query public referencingStar(e : entity::Entity) : OrderedSet(environment::Reference) = 
	if e.eContainer(entity::Root) = null then 
		Sequence{}->asOrderedSet() 
	else 
		e.eContainer(entity::Root).eAllContents(environment::Reference)
		->select(r | r.isMultiple() 
			and r.referencedType = e 
			and r.navigable 
			and (r.oppositeOf = null 
			or not r.oppositeOf.isMultiple()))
		->sortedByName()
	endif
/]




  
















[template public blockHierarchy(r : environment::Reference) post(self.trim())]
  [if (r.ancestors(environment::Namespace)->size() < 1)]
  [else]
    .[r.ancestors(environment::Namespace)->select(temp6 | not (temp6.name = null))
    ->reverse()->collect(temp7 | temp7.oclAsType(environment::Namespace))
    ->collect(temp8 | temp8.name)->collect(temp9 | temp9.safeCamelCase())
    ->collect(temp10 | temp10.toLower())->sep('.')/]
  [/if]
[/template]  