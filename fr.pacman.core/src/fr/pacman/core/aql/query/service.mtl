[module service(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
				    'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]				    
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::operation/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::service::ServiceUtils/]

[comment retourne toutes les opérations d'un service soa./]
[query public operations(s : soa::Service) : Sequence(soa::Operation) = s.ownedInterface.ownedOperations/]

[comment retourne la liste des paramètres de type 'Entity' (sans doublon) pour toutes les opérations sur un service./]					
[query public outputEntities(s : soa::Service) : OrderedSet(entity::Entity) = s.ownedInterface.ownedOperations.output.type
  ->select(o | o.oclIsKindOf(entity::Entity))->asOrderedSet()/]

[comment retourne le(s) dto(s) associé(s) au service métier./]  
[query public associatedDtos(s : soa::Service) : OrderedSet(environment::DTO) = s.eAllContents(soa::Parameter)
  ->select(o1 | o1.type.oclIsTypeOf(environment::DTO))->collect(o2 | o2.type.oclAsType(environment::DTO))->asSet()/]

[comment retourne tous les fournisseurs de persistance associés à un service./]
[query public associatedProviders(s : soa::Service, ss : Sequence(soa::Service)) : OrderedSet(environment::DTO) = 
  s.associatedDtos()->get_associatedProvider(ss)->asSet()/]

[comment vérifie si un service contient des opérations de type rest./]
[query public isRsService(s : soa::Service) : Boolean = s.exists() and not s.ownedInterface.ownedOperations
  ->select(o | o.exposition = soa::ExpositionKind::REST)->isEmpty() /]

[comment retourne l'uri (partielle) pour un service rest, si rien de renseigné, renvoie '/' par défaut./]
[query public rsUri(s : soa::Service) : String = if (s.isRsService()) then  ( '/' + s.eContainer().oclAsType(soa::Component).URI 
  + '/' + s.eContainer().oclAsType(soa::Component).apiVersion + '/' + s.URI).toUri() else s.cNoModelisation() endif/]