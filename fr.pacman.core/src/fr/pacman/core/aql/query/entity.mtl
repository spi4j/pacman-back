[module entity(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects /]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::service::MandatoryUtils/]
[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::aql::rule::parameter/]

[comment liste des requêtes possibles sur les entités./]
  
[comment vérifie si une propriété (un attribut ou une référence) est obligatoire pour une entité./]
[query public isMandatory(e : entity::Entity , p : environment::Property) : Boolean = p.is_mandatoryEntity()/] 

[comment retourne true si l'entité possède un attribut avec l'annotation Version./]
[query public hasVersion(e : entity::Entity) : Boolean = if e = null then false else e.attributes->exists(o | o.has_metaVersion()) endif/]

[comment retourne l'enchainement des packages (namespaces) pour l'entité./]
[query public blockHierarchy(e : entity::Entity) : String = if (e.ancestors(environment::Namespace)->size() < 1) then '' 
	else '.' + e.ancestors(environment::Namespace)->select(o1 | not (o1.name = null))->reverse()
	->collect(o2 | o2.oclAsType(environment::Namespace))->collect(o3 | o3.name)->collect(o4 | o4.safeCamelCase())
	->collect(o5 | o5.toLower())->sep('.')/]

[comment retourne les types et les nom des attributs pour l'entité (optional + list + type + nom)./]
[query public inputSignature(e : entity::Entity, rs : OrderedSet(environment::Reference)) : String =  
  e.attributesNoPK()->collect(o1 | 'final ' + o1.type() + ' ' + o1.name().apply_parameterMethodClassicInOut())->sep(', ')->toString() 
  + if (rs->size() > 0) then ', ' + rs->collect(o2 | 'final ' + o2.referencedType(e) + ' ' + o2.referencedEntity(e).name().apply_parameterMethodClassicIn())
  ->sep(', ')->toString() else '' endif/]
