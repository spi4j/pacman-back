[module entity(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
				'http://www.obeonetwork.org/dsl/entity/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects /]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::service::MandatoryUtils/]
[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::aql::rule::parameter/]

[import fr::pacman::core::service::DtoEntityUtils/]

[comment liste des requêtes possibles sur les entités./]
  
[comment vérifie si une propriété (un attribut ou une référence) est obligatoire pour une entité./]
[query public isMandatory(e : entity::Entity , p : environment::Property) : Boolean = p.is_mandatoryEntity()/] 

[comment retourne true si l'entité possède un attribut avec l'annotation Version./]
[query public hasVersion(e : entity::Entity) : Boolean = if e = null then false else e.attributes->exists(o | o.has_metaVersion()) endif/]

[comment retourne true si l'entité a au moins un attribut obligatoire./]
[query public hasMandatoryAttributes(e : entity::Entity) : Boolean = not e.attributesNoPK()->select(o | o.isMandatory())->isEmpty()/]

[comment retourne uniquement la liste de toutes les entités qui ne sont pas héritées (aucune classe mère)./]
[query public withoutParentEntities(r : entity::Root) : Sequence(entity::Entity) = r.eAllContents(entity::Entity)
  ->select(o1 | r.eAllContents(entity::Entity)->forAll(o2 | not o2.supertype->includes(o1)))/]
  
[comment retourne le parent de l'entité (classe mère), si la classe n'a pas de parent alors retourne l'entité (pour l'instant bloqué)./]
[query public parentOrSelf(e : entity::Entity) : entity::Entity = if let b = false in (e.supertype <> null and b) then e.get_parent() else e endif/]