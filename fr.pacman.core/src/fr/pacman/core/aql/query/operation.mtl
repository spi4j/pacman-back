[module operation(	'http://www.obeonetwork.org/dsl/environment/3.0.0', 
					'http://www.obeonetwork.org/dsl/entity/3.0.0',
				    'http://www.obeonetwork.org/dsl/soa/4.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::query::parameter/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::common/]
[import fr::pacman::core::aql::rule::class/]
[import fr::pacman::core::service::AnnotationUtils/]

[comment vérifie si l'opération a un paramètre en sortie (entité, dto, type primitif) (transverse)./]
[query public hasOutput(o : soa::Operation) : Boolean = o.output <> null and o.output->size() > 0 /]
  
[comment vérifie si l'opération a des paramètres en entrée (entité, dto, type primitif) (transverse)./]
[query public hasInputs(o : soa::Operation) : Boolean = o.input <> null and o.input->size() > 0 /]

[comment retourne le nom du paramètre de sortie pour l'operation./]
[query public outputName(o : soa::Operation) : String = if (o.hasOutput()) then o.output->first().name() else o.cNoModelisation() endif/]
   
[comment retourne le type complet (optional + list) pour le paramètre de sortie d'une opération (transverse)./]
[query public outputType(o : soa::Operation) : String = if (o.hasOutput()) then o.output->first().outputType(false, false) else 'void' endif/]
  
[comment retourne le type complet (optional + list) pour le paramètre de sortie dans le cadre d'une opération rest./]
[query public outputRsType(o : soa::Operation) : String = if (o.hasOutput()) then o.output->first().outputRsType() else o.cNoModelisation() endif/]
  
[comment retourne le type complet (optional + list) pour le paramètre en entrée, pour une opération rest./]
[query public inputRsType(p : soa::Parameter) : String = if (p.type.oclIsKindOf(environment::DTO)) then  if (p.isMultiple()) then 'List<' 
  + p.type.oclAsType(environment::DTO).nameClassXtoImpl() + '>' else  p.type.oclAsType(environment::DTO).nameClassXtoImpl() endif else p.type(false) endif/]

[comment retourne le type complet (optional + list) pour le paramètre de sortie pour une opération de persistance (si paginé obligatoirement un param de sortie)./]
[query public outputPersistType(o : soa::Operation) : String = if (o.paged) then 'Page<' + if (o.output->first().type.oclIsKindOf(environment::DTO)) then 
  o.output->first().type.oclAsType(environment::DTO).associatedEntity().nameClassEntityImpl() else o.output->first().type endif +  '>' 
  else  if (o.hasOutput() and o.output->first().type.oclIsKindOf(environment::DTO)) then o.output->first().outputType(false, true) 
  else o.outputType() endif endif/]
  
[comment retourne le type complet pour le paramètre de sortie (transverse) (optional + list)./]
[query private outputType(p : soa::Parameter, serialized : Boolean, associatedEntity : Boolean) : String =  if (not serialized and p.isOptional()) 
  then 'Optional<' + p.type(associatedEntity) + '>' else p.type(associatedEntity) endif /]

[comment retourne le type complet pour le paramètre de sortie, dans le cadre d'une opération rest (optional + list)./]
[query private outputRsType(p : soa::Parameter) : String = if (p.type.oclIsKindOf(environment::DTO)) then  if (p.isMultiple()) then 'List<' 
  + p.type.oclAsType(environment::DTO).nameClassXtoImpl() + '>' else  p.type.oclAsType(environment::DTO).nameClassXtoImpl() endif 
  else p.outputType(true, false) endif/]

[comment retourne l'opération chargée de la récupération du jeton jwt (token) dans le cadre de la générartion d'un web client./]
[query public operationRsToken (m : soa::System) : soa::Operation = m.eAllContents(soa::Operation)->select(o | o.has_metaAuthToken())->first()/]

[comment vérifie si l'opération a un code de retour pour les services rest. /]
[query public hasRsStatusCode(o : soa::Operation) : Boolean = o.exists() and o.hasOutput() and not (o.output->first().statusCode = null) 
  and o.output->first().statusCode.size() > 0/]

[comment vérifie si le paramètre de retour est obligatoire, toutes les opérations autre que HEAD et OPTIONS doivent avoir un paramètre de retour./]
[query public mustHaveRsOutput(o : soa::Operation) : Boolean = o.verb <> soa::Verb::HEAD and o.verb <> soa::Verb::OPTIONS/]

[comment vérifie si l'opération a défini un type de média pour la sortie du service rest./]
[query public hasMediaRsType(o : soa::Operation) : Boolean = o.exists() and o.output->first().exists() and o.output->first().hasMediaRsType()/]
  
[comment vérifie si le paramètre de sortie a défini un type de média pour le service rest./]
[query public hasMediaRsType(p : soa::Parameter) : Boolean = p.exists() and p.mediaType <> null and  p.mediaType->size() > 0/]
  
[comment retourne le type de média pour le paramètre de sortie du service rest./]
[query public mediaRsType(p : soa::Parameter) : String = p.mediaType->first().identifier/]

[comment vérifie si une 'fault' de type 'Not Found' a été définie sur l'opération rest./]
[query public hasRsNotFoundFault (o :soa::Operation) : Boolean = o.exists() and not o.fault->select(f | f.statusCode.equalsIgnoreCase
 (o.defaultRsNotFoundStatusCode1()) or f.statusCode.equalsIgnoreCase(o.defaultRsNotFoundStatusCode2()))->isEmpty()/]

[comment retourne la 'fault' de type 'Not Found' qui a été définie sur l'opération rest./]
[query public notRsFoundFault (o :soa::Operation) : soa::Parameter =  o.fault->select(f | f.statusCode.equalsIgnoreCase
 (o.defaultRsNotFoundStatusCode1()) or f.statusCode.equalsIgnoreCase(o.defaultRsNotFoundStatusCode2()))->first()/]
  
[comment vérifie si l'opération est une opération de type rest./]
[query public isRsOperation(o : soa::Operation) : Boolean = o.exists() and o.public and o.exposition = soa::ExpositionKind::REST/]

[comment retourne l'uri (partielle) pour une opération rest, si rien de renseigné on force à null par défaut./]
[query public rsUri(o : soa::Operation) : String = if (o.isRsOperation()) then if (o.URI.exists()) then ('/' +  o.URI).toUri() 
  else null endif else o.cNoModelisation() endif/] 

[comment vérifie si une opération est sécurisée au niveau service rest./]
[query public isRsSecured(o : soa::Operation) : Boolean = not o.securitySchemes->isEmpty() 
  or not o.eContainer(soa::Service).securitySchemes->isEmpty()/]
  
[comment retourne le schema de sécurité pour l'opération (pour l'instant basique on remonte la chaine et on prend le premier)./]  
[query public securityRsScheme(o : soa::Operation) : soa::SecurityScheme = if (o.isRsSecured()) then o.securitySchemes
  ->union(o.eContainer(soa::Service).securitySchemes)->first() else null endif/]

[comment vérifie si l'opération a une sécurité de type api key./]
[query public hasRsApiKeySecurity(o : soa::Operation) : Boolean = not o.securitySchemes->isEmpty() and o.securitySchemes->first().type 
  = soa::SecuritySchemeType::API_KEY/]
  
[comment vérifie si l'opération a une sécurité de type http./]
[query public hasRsHttpSecurity(o : soa::Operation) : Boolean = not o.securitySchemes->isEmpty() and o.securitySchemes->first().type 
  = soa::SecuritySchemeType::HTTP/]

[comment vérifie si l'oération a une sécurité de type api key passé par la requête./]
[query public isRsApiKeyByQuerySecurity(o : soa::Operation) : Boolean =  o.hasRsApiKeySecurity() and o.securitySchemes->first()
  .apiKeyLocation = soa::ApiKeyLocation::QUERY/]
  
[comment vérifie si l'oération a une sécurité de type api key passé par la requête./]
[query public isRsHttpBasicSecurity(o : soa::Operation) : Boolean =  o.hasRsHttpSecurity() and o.securitySchemes->first()
  .httpScheme = soa::HttpScheme::BASIC/]

[comment retourne le type et le nom du paramètre de sortie (si existe) (liste + optional + type + nom)./]
[query public outputSignature(o : soa::Operation) : String = if(o.hasOutput()) then o.output->first().type(false) 
  + ' ' + o.output->first().name() else 'void' endif/]
  
[comment retourne les types et les noms des paramètres en entrée (si existent) (list + optional + type + nom)./]
[query public inputSignature(o : soa::Operation) : String = o.input->collect(o1 | 'final ' + o1.type(false) + ' ' 
  + o1.name().apply_parameterMethodClassicIn())->sep(', ') + if (o.paged) then ', String ' 
  + 'sort by'.apply_parameterMethodClassicIn() else '' endif/]

[comment retourne le dto associé pour la couche de persistance (point d'entrée). 
	Algo très simple : 
		- si on trouve un dto en sortie il provient obligatoirement de la persistance et à la priorité sur tout le reste. 
		- sinon, si on trouve un dto en en entrée, c'est ce dto qui est considéré comme persistant.
		- sinon, si on trouve plusieurs dtos en entrée, on ne sait pas les distinguer -> zone non générée avec exception.
		- sinon, si ce ne sont que des 'primitives', on ne connait pas la requête -> zone non générée avec exception.  /]
[query public persistDto(o :soa::Operation) : environment::DTO = o.persistDto(o.persistOutputDto(), o.persistInputDto())/]
 
[comment retourne le DTO persistant en paramètre de sortie (si existe)./]
[query private persistOutputDto(o : soa::Operation) : environment::DTO = if (o.hasOutput() and o.output->first().type.oclIsKindOf(environment::DTO) 
  and o.output->first().type.oclAsType(environment::DTO).isPersistent()) then o.output->first().type.oclAsType(environment::DTO) else null endif/]
  
[comment retourne le(s) DTO(s) persistant(s) au niveau de l'entrée (si existe(nt))./]
[query private persistInputDto(o : soa::Operation) : Sequence(environment::DTO) =  o.input->select(o1 | o1.type.oclIsKindOf(environment::DTO) 
  and o1.type.oclAsType(environment::DTO).isPersistent())->collect(o2 | o2.type.oclAsType(environment::DTO))/]
  
[comment retourne le dto associé pour la couche de persistance (si impossible à déterminer on retourne null)./][query private persistDto(o : soa::Operation, d : environment::DTO, ds : Sequence(environment::DTO)) : environment::DTO = if (d.exists()) 
  then d else if (ds->size() = 1) then ds->first() else null endif endif/]
