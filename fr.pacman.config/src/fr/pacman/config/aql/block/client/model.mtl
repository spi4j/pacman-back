[module model(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]

[comment √©criture du fichier de configuration Maven pour le sous-projet de mod√©lisation./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectModel()/]</artifactId>
    <packaging>jar</packaging>
    
    <!-- M√™me si ce n‚Äôest pas strictement n√©cessaire pour Maven, certains outils
    (comme Eclipse avec m2e) veulent le voir dans chaque module. -->
    <properties>
       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
  </project>
[/template]

[comment ./]
[template public readMe (any : ecore::EObject)]
  <style>
        body {
            font-family: 'Segoe UI Emoji', 'Arial', sans-serif;
        }
    </style>
    <h1>Bienvenue dans votre nouveau projet de librairie client [any.nameProject()/]</h1>
    <hr />
    <p>Ce fichier vous permet de rapidement prendre en main le d√©marrage de l'application :</p>
      <h2>üìÅ Projets inclus</h2>
      <p>Quatre projets sont cr√©√©s :</p>
      <ul>
      <li><strong>[any.nameProject()/]</strong> : le projet qui encapsule les trois autres projets, son seul r√¥le est de contenir le fichier pom.xml parent.</li>
      <li><strong> [any.nameProjectCommon()/]</strong> : le projet contenant l'ensemble des objets m√©tier n√©cessaires pout l'envoi et la r√©ception des donn√©es (Xto).</li>
      <li><strong>[any.nameProjectModel()/]</strong> : le projet de mod√©lisation. Aucune classe Java ne doit √™tre pr√©sente dans ce projet. Il n'est, par ailleurs, pas embarqu√© lors du d√©ploiement de l'application.</li>
      <li><strong>[any.nameProjectServer()/]</strong> : le projet contenant les classes client d'appel pour les services de type rest.</li>
      </ul>
      <hr/>
        <h2>üìÇ Emplacement des fichiers de configuration et classe de d√©marrage</h2>
      <ul>
      <li style="margin-bottom: 10px;"><b>Configuration des options pour la g√©n√©ration</b> : <code>[any.nameProjectModel()/]/[any.namePropertiesDirectory()/]/project.properties</code>
             Utiliser ce fichier de configuration pour modifier les diff√©rentes options utilis√©es pour la g√©n√©ration de code. Ce fichier a 
             initialement √©t√© cr√©√© suite aux principaux choix dans le formulaire de cr√©ation mais toute modification sera automatiquement prise 
             en compte lors de la prochaine g√©n√©ration. Ce fichier de configuration interne pour la g√©n√©ration est commun pour l'ensemble 
             des diff√©rents types de projet, certaines propri√©t√©s ne sont donc pas prises en consid√©ration suivant le type de projet"
      </li>
      <li style="margin-bottom: 10px;"><b>Configuration du nommage des classes et interfaces pour la g√©n√©ration</b> : <code>[any.nameProjectModel()/]/[any.namePropertiesDirectory()/]/nommage.properties</code>
            Utiliser ce fichier de configuration pour modifier les diff√©rentes options de nommage utilis√©es pour la g√©n√©ration de code. Si 
            par exemple vous d√©sirez que tous la param√®tres des m√©thodes soient pr√©fix√©s par <code>'p_'</code>, il suffit de modifier la propri√©t√©
            suivante dans le fichier de configuration <code>parameterMethodClassicIn=['['/]CamelCase.LowerFirst/[']'/]</code> 
            en <code>parameterMethodClassicIn=p_['['/]CamelCase.LowerFirst/[']'/]</code>. 
            Toute modification sera automatiquement prise en compte lors de la prochaine g√©n√©ration.
      </li>
      <li style="margin-bottom: 10px;"><b>Configuration principale</b> : <code>[any.nameProjectServer()/]/[any.dirResources()/]application.properties</code>
            Le fichier de configuration de SpringBoot, avec l'uri de base pour les appels, les timeouts de connexion, etc...
      </li>
      </ul>
      <hr/>
      <h2>üìÅ Principaux packages g√©n√©r√©s</h2>
      <ul>
        <li>[any.nameProjectServer()/]
           <ul>
             <li><code>[any.namePackageProject()/].[any.namePackageRsBase()/]</code> : classes de haut niveau pour le focntionnement des clients rest.</li>
           </ul>
        </li>
      </ul>
      <hr/>
      <h2>üöÄ Pour commencer rapidement</h2>
      <ol>
        <li>R√©cup√©rer le fichier Swagger du fournisseur de services rest (sous format json ou yaml).</li>
        <li>Importer le fichier Swagger par click droit sur la racine du fichier de mod√©lisation <code>.soa</code></li>
        <li>Si besoin, appliquer la m√©tadonn√©e @AUTH_TOKEN au niveau de l'op√©ration d'authentification (r√©cup√©ration du jeton)</li>
        <li>G√©n√©rer le code client √† partir du fichier de mod√©lisation</li>
        <li>Si besoin, compl√©ter la classe <code>[any.nameClassRsClienTokenTestsHelper()/]</code> avec les donn√©es d'authentification.</li>
        <li>Effectuer les tests pour v√©rifier le bon fonctionnement des diff√©rents appels.</li>
        <li>Proc√©der au d√©ploiement et √† l'int√©gration de la librairie dans le projet cible.</li>
      </ol>
[/template]