[module webapp(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]

[comment écriture du fichier de configuration Maven pour le sous-projet webapp./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectWebapp()/]</artifactId>
    <packaging>jar</packaging>
    
    <dependencies>
    	<dependency>
    		<groupId>[any.namePackageProject()/]</groupId>
    		<artifactId>[any.nameProjectServer()/]</artifactId>
    		<version>0.0.1-SNAPSHOT</version>
    	</dependency>
    </dependencies>
    
    <build>
      <plugins>
      </plugins>
    </build>
  </project>
[/template]

[comment écriture du boostrap pour l'application./]
[template public applicationBoostrapImpl(any : ecore::EObject)]
  [any.classHeader(null)/]
  [any.defaultImports()/]
  import org.springframework.boot.CommandLineRunner;
  import org.springframework.boot.SpringApplication;
  import org.springframework.boot.autoconfigure.SpringBootApplication;
  import org.springframework.context.ApplicationContext;
  import org.springframework.context.annotation.Bean;
  import org.springframework.context.annotation.EnableAspectJAutoProxy;
  import org.springframework.context.annotation.FilterType;
  import org.springframework.context.annotation.ComponentScan;
  import [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationOut()/];
  import [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationIn()/];
  
  
  /**
   * Classe principale de démarrage de l'application {@code [any.nameClassAppBoostrap()/]}.
   * Cette classe démarre l'application Spring Boot et configure le scan des composants
   * en incluant spécifiquement des services annotés avec {@link [any.nameClassAnnotationOut()/]} 
   * ou {@link [any.nameClassAnnotationIn()/]}.
   */
  @SpringBootApplication
  @EnableAspectJAutoProxy
  @ComponentScan(basePackages = {"[any.namePackageProject()/]"}, includeFilters = {
  @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = { [any.nameClassAnnotationOut()/].class, [any.nameClassAnnotationIn()/].class })})
  public class [any.nameClassAppBoostrap()/]
  {
  
     /**
      * Point d'entrée de l'application Spring Boot. Il démarre l'application en appelant
      * {@link SpringApplication#run(Class, String...)} avec la 
      * classe {@code  [any.nameClassAppBoostrap()/]}.
      *
      * @param args Les arguments de la ligne de commande.
      */
	  public static void main(String... args) {
		    SpringApplication.run([any.nameClassAppBoostrap()/].class, args);
	  }
	  
	  /**
	   * Un {@link CommandLineRunner} qui est exécuté au démarrage de l'application. Il affiche
	   * la liste de tous les beans définis dans le contexte de l'application Spring.
	   *
	   * @param ctx Le contexte de l'application Spring contenant les beans.
	   * @return Un {@link CommandLineRunner} qui est exécuté au démarrage de l'application.
	   */
	  @Bean
	  public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
	    return args -> {
			System.out.println("Let's inspect the beans provided by Spring Boot:");
	    	String['['/][']'/] beanNames = ctx.getBeanDefinitionNames();
	    	Arrays.sort(beanNames);
	    	for (String beanName : beanNames) {
	    		System.out.println(beanName);
	    	}
	  	};
	  }
  }
[/template]