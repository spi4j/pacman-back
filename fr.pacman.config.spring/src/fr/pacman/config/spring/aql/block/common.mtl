[module common(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::method/]
[import fr::pacman::core::aql::rule::attribute/]

[comment écriture du fichier de configuration Maven pour le sous-projet métier (domain)./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectCommon()/]</artifactId>
    <packaging>jar</packaging>
    
    <dependencies>
       <dependency>
          <groupId>org.slf4j</groupId>
          <artifactId>slf4j-api</artifactId>
       </dependency>
       <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
       </dependency>
       <dependency>
          <groupId>org.assertj</groupId>
          <artifactId>assertj-core</artifactId>
       </dependency>
    </dependencies>
    
    <build>
      <plugins>
         <!-- Vérification des prérequis pour le module métier. -->
         <!-- ************************************************** --> 
         <!-- Placer ici uniquement les dépendances authorisées. --> 
         <!-- ************************************************** -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
               <execution>
                  <goals>
                     <goal>enforce</goal>
                  </goals>
                  <configuration>
                     <rules>
                        <bannedDependencies>
                           <excludes>
                              <exclude>*</exclude>                              
                           </excludes>
                           <includes>
                              <!-- Placer ici les librairies authorisées. -->
                              <!-- Pour l'instant uniquement librairies de test. -->
                              <include>*:*:*:*:test</include>
                              <include>org.junit.jupiter:junit-jupiter</include>
                              <include>org.assertj:assertj-core</include>
                              <include>org.slf4j:slf4j-api</include>
                           </includes>
                        </bannedDependencies>
                     </rules>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
    </build>
    
    <!-- Même si ce n’est pas strictement nécessaire pour Maven, certains outils
    (comme Eclipse avec m2e) veulent le voir dans chaque module. -->
    <properties>
       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
  </project>
[/template]


[comment écriture de l'annotation pour l'injection de service métier./]
[template public annotationIn(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonBase())/]
  
  [any.defaultImports()/]
  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;

  /** 
   * Annotation personnalisée pour marquer les services du domaine dans
   * l'application [any.nameProject()/].
   * 
   * Cette annotation est utilisée pour indiquer qu'une classe fait partie du
   * domaine métier de l'application, généralement utilisée pour désigner les
   * services ou les composants qui gèrent la logique métier. Elle est disponible
   * à l'exécution grâce à {@link RetentionPolicy#RUNTIME}.
   * 
   * Cette annotation ne comporte actuellement aucun élément spécifique, mais peut
   * être étendue à l'avenir pour ajouter des métadonnées supplémentaires si
   * nécessaire.
   *
   * @author [any.nameAuthor()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationIn()/] {
     //RAS.
   }
[/template]

[comment écriture de l'annotation pour l'injection de service persistance./]
[template public annotationOut(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonBase())/]
  
  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;

    /**
   * Annotation personnalisée pour marquer les adaptateurs de service dans
   * l'application [any.nameProject()/].
   * 
   * Cette annotation est utilisée pour identifier les classes qui servent
   * d'adaptateurs pour les services. Les adaptateurs de service sont généralement
   * utilisés pour intégrer des services externes ou des composants spécifiques à
   * l'architecture de l'application tout en offrant une interface uniforme. Elle
   * est disponible à l'exécution grâce à {@link RetentionPolicy#RUNTIME}.
   * 
   * @author [any.nameAuthor()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationOut()/] {
     //RAS.
   }
[/template]

[comment écriture de l'annotation pour l'injection de service persistance (stub)./]
[template public annotationStubOut(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonBase())/]
  
  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;

  /**
   * Annotation personnalisée pour marquer les adaptateurs de service dans
   * l'application dans le cadre des tests du domaine et/ou de l'infrastructure'.
   * 
   * Cette annotation est utilisée pour identifier les classes qui servent
   * d'adaptateurs pour les services. Les adaptateurs de service sont généralement
   * utilisés pour intégrer des services externes ou des composants spécifiques à
   * l'architecture de l'application tout en offrant une interface uniforme. Elle
   * est disponible à l'exécution grâce à {@link RetentionPolicy#RUNTIME}.
   * 
   * @author [any.nameAuthor()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationStubOut()/] {
     //RAS.
   }
[/template]

[comment écriture de l'annotation pour l'injection de service persistance./]
[template public annotationTrans(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonBase())/]

  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;
  
  /**
   * Annotation personnalisée marquant les méthodes ou les classes qui doivent
   * être exécutées dans un contexte transactionnel. Cette annotation peut être
   * utilisée pour indiquer qu'une méthode ou une classe doit être traitée dans
   * une transaction.
   * 
   * Elle peut être utilisée en combinaison avec un gestionnaire de transactions,
   * tel qu'un aspect, pour appliquer la logique transactionnelle. 
   * 
   * @see org.springframework.transaction.annotation.Transactional
   * @see [any.nameClassJpaTransactionExecutorImpl()/]
   *   * @author [any.nameAuthor()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationTrans()/] {
     //RAS
   }
[/template]

[comment écriture du valideur pour l'ensemble des objets métiers./]
[template public validatorUtilsImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonBase())/]
  
  [any.defaultImports()/]
  
  /**
   * Classe utilitaire contenant des méthodes de validation pour vérifier certaines contraintes
   * sur des champs de données. Ces méthodes vérifient des conditions telles que la présence 
   * d'une valeur obligatoire ou la taille d'une chaîne de caractères.
   * 
   * Cette classe n'a pas besoin d'être instanciée, car elle contient uniquement des méthodes statiques.
   * 
   * @author [any.nameAuthor()/]
   */
  public class [any.nameClassValidatorUtilsImpl()/]
  {
   /**
    * Vérifie si une valeur obligatoire (non nulle) est fournie pour un champ.
    * Si la valeur est nulle, le nom du champ est ajouté à la liste des champs invalides.
    *
    * @param ['field name'.apply_parameterMethodClassicIn()/] Le nom du champ à valider.
    * @param ['value'.apply_parameterMethodClassicIn()/]   La valeur du champ à vérifier.
    * @param ['invalid fields'.apply_parameterMethodClassicIn()/] La liste des champs invalides à laquelle ajouter le nom du champ en cas de validation échouée.
    */
    public static void ['check mandatory'.apply_methodDefault()/](final String ['field name'.apply_parameterMethodClassicIn()/]
       , final Object ['value'.apply_parameterMethodClassicIn()/], List<String> ['invalid fields'.apply_parameterMethodClassicIn()/]) 
       {
       if (['value'.apply_parameterMethodClassicIn()/] == null) {
          if (['invalid fields'.apply_parameterMethodClassicIn()/] == null) {
             ['invalid fields'.apply_parameterMethodClassicIn()/] = new ArrayList<>();
          }
          ['invalid fields'.apply_parameterMethodClassicIn()/].add(['field name'.apply_parameterMethodClassicIn()/]);
       }
    }
    
   /**
    * Vérifie si la taille d'une chaîne de caractères est comprise dans une plage spécifiée.
    * Si la taille dépasse la taille maximale autorisée, une entrée est ajoutée à la liste des champs invalides
    * indiquant la taille actuelle de la chaîne et la taille maximale autorisée. Idem pour la taille minimale.
    * 
    * Si la chaîne est nulle, cette méthode ne fait aucune vérification.</p>
    *
    * @param ['field name'.apply_parameterMethodClassicIn()/] Le nom du champ à valider.
    * @param ['value'.apply_parameterMethodClassicIn()/]   La valeur du champ (une chaîne de caractères) à vérifier.
    * @param ['min size'.apply_parameterMethodClassicIn()/]  La taille minimale autorisée pour la chaîne.
    * @param ['max size'.apply_parameterMethodClassicIn()/]  La taille maximale autorisée pour la chaîne.
    * @param ['invalid fields'.apply_parameterMethodClassicIn()/] La liste des champs invalides à laquelle ajouter une entrée en cas de validation échouée.
    */
    public static void ['check size'.apply_methodDefault()/](final String ['field name'.apply_parameterMethodClassicIn()/]
       , final String ['value'.apply_parameterMethodClassicIn()/], final Integer ['min size'.apply_parameterMethodClassicIn()/] 
       , final Integer ['max size'.apply_parameterMethodClassicIn()/], List<String> ['invalid fields'.apply_parameterMethodClassicIn()/]) 
         {
         
          if (['value'.apply_parameterMethodClassicIn()/] == null) 
              return;
              
          if (['max size'.apply_parameterMethodClassicIn()/] != null && ['value'.apply_parameterMethodClassicIn()/]
             .length() > ['max size'.apply_parameterMethodClassicIn()/]) {
             if (['invalid fields'.apply_parameterMethodClassicIn()/] == null) 
               ['invalid fields'.apply_parameterMethodClassicIn()/] = new ArrayList<>();
             ['invalid fields'.apply_parameterMethodClassicIn()/].add(['field name'.apply_parameterMethodClassicIn()/] 
                + " (" + ['value'.apply_parameterMethodClassicIn()/].length() + " > " + ['max size'.apply_parameterMethodClassicIn()/] + ")");}
                
           if (['min size'.apply_parameterMethodClassicIn()/] != null && ['value'.apply_parameterMethodClassicIn()/]
              .length() < ['min size'.apply_parameterMethodClassicIn()/]) {
              if (['invalid fields'.apply_parameterMethodClassicIn()/] == null) 
                 ['invalid fields'.apply_parameterMethodClassicIn()/] = new ArrayList<>();
               ['invalid fields'.apply_parameterMethodClassicIn()/].add(['field name'.apply_parameterMethodClassicIn()/] 
                   + " (" + ['value'.apply_parameterMethodClassicIn()/].length() + " < " + ['min size'.apply_parameterMethodClassicIn()/] + ")");}
    }
  }
[/template]

[comment écriture de l'interface pour un requirement (règle de gestion)./]
[template public requirementItf(any : ecore::EObject)]
  [any.classHeader(any.namePackageRequirement())/]
  
  [any.defaultImports()/]
  
  /**
   * L'interface {@code [any.nameClassRequirementItf()/]} définit les méthodes nécessaires pour
   * gérer les informations relatives à une exigence (requirement). Elle permet
   * de récupérer l'identifiant, le nom, et la version d'implémentation d'une
   * exigence, ainsi que d'en définir la version d'implémentation.
   * 
   * Cette interface définit également des constantes utilisées pour indiquer
   * des statuts d'implémentation.
   * 
   * @author [any.nameAuthor()/]
   */
  public interface [any.nameClassRequirementItf()/]
  {
     
     ['Constante indiquant qu\'une exigence n\'est pas implémentée'.commentSingleLine()/]
     String ['not implemented'.apply_attributeFinalStatic()/] = "notImplemented";
     
     ['Constante indiquant qu\'une exigence n\'est pas implémentable'.commentSingleLine()/]
     String ['not implementable'.apply_attributeFinalStatic()/] = "notImplementable";
     
     ['l\'identifiant de l\'exigence'.commentSingleLine()/]
     String ['id'.apply_methodGet()/]();
     
     ['le nom de l\'exigence'.commentSingleLine()/]
     String ['name'.apply_methodGet()/]();
     
     ['Le No de version implémentée (ex : "0.9")'.commentSingleLine()/]
     String ['version implem'.apply_methodGet()/]();
     
     ['Indique qu\'une exigence n\'est pas implémentée'.commentSingleLine()/]
     void ['version implem'.apply_methodSet()/]();
     
     ['Le No de version du modèle (ex : "1.0")'.commentSingleLine()/]
     void ['version implem'.apply_methodSet()/](final String ['version implem'.apply_parameterMethodClassicIn()/]);
     
     ['Le No de version du modèle (ex : "1.0")'.commentSingleLine()/]
     String ['version model'.apply_methodGet()/]();
  }
[/template]

[comment écriture de l'immplémentation pour la classe utilitaire de gestion des requirements./]
[template public requirementUtilsImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageRequirement())/]
  
  [any.defaultImports()/]
  import [any.namePackageProject()/].[any.namePackageCommonException()/].[any.nameClassRequirementExceptionImpl()/];
  
  /**
   * Classe utilitaire contenant des méthodes de validation pour les exigences.
   * Cette classe est conçue pour valider la version d'implémentation d'une exigence, et lance des exceptions
   * spécifiques si des erreurs sont détectées, telles que des versions déjà définies ou des incohérences entre
   * la version du modèle et la version implémentée.
   * 
   * Cette classe est une classe utilitaire qui ne peut pas être instanciée.
   * 
   * @author [any.nameAuthor()/]
   */
  public final class [any.nameClassRequirementUtilsImpl()/]
  {
    
    /**
     * Constructeur privé pour empêcher l'instanciation de cette classe utilitaire.
     */
    private [any.nameClassRequirementUtilsImpl()/] ()
    {
      // RAS
    }
    
    /**
     * Vérifie la version d'implémentation d'une exigence donnée et lance des exceptions
     * en cas de problèmes de version.
     * 
     * <ul>
     *   <li>Si une version d'implémentation est déjà affectée à l'exigence, une exception est lancée.</li>
     *   <li>Si la version spécifiée est {@code [any.nameClassRequirementItf()/].['not implemented'.apply_attributeFinalStatic()/]}, une exception est lancée pour indiquer
     *       que l'exigence n'est pas encore implémentée.</li>
     *   <li>Si la version spécifiée est {@code [any.nameClassRequirementItf()/].['not implementable'.apply_attributeFinalStatic()/]}, aucune action n'est effectuée, mais la
     *       situation est enregistrée dans le log.</li>
     *   <li>Si la version spécifiée ne correspond pas à la version du modèle, une exception est lancée pour indiquer
     *       une incohérence de version.</li>
     * </ul>
     * 
     * @param ['requirement'.apply_parameterMethodClassicIn()/] L'exigence à vérifier, qui contient les informations sur la version du modèle et de l'implémentation.
     * @param ['version implem'.apply_parameterMethodClassicIn()/] La version d'implémentation à vérifier.
     * @throws [any.nameClassRequirementExceptionImpl()/] Si une erreur est détectée lors de la vérification des versions.
     */
    public static void ['check requirement version'.apply_methodDefault()/] 
        (final [any.nameClassRequirementItf()/] ['requirement'.apply_parameterMethodClassicIn()/]
        , final String ['version implem'.apply_parameterMethodClassicIn()/])
    {
       if (['requirement'.apply_parameterMethodClassicIn()/].['version implem'.apply_methodGet()/]() != null)
       {
          throw new [any.nameClassRequirementExceptionImpl()/](['requirement'.apply_parameterMethodClassicIn()/], "La version a déjà été affectée",
             "Vérifier que le ['version implem'.apply_methodSet()/]() n'a été appelé qu'une seule fois pour l'exigence : "
              + ['requirement'.apply_parameterMethodClassicIn()/].['name'.apply_methodGet()/]());
       }
       else if ([any.nameClassRequirementItf()/].['not implemented'.apply_attributeFinalStatic()/].equals(['version implem'.apply_parameterMethodClassicIn()/]))
       {
          throw new [any.nameClassRequirementExceptionImpl()/](['requirement'.apply_parameterMethodClassicIn()/], "Exigence pas encore implémentée", "Pour l'exigence "
              + ['requirement'.apply_parameterMethodClassicIn()/].['name'.apply_methodGet()/]() + ", il faut :\n" + "   - soit faire un appel à : " 
              + ['requirement'.apply_parameterMethodClassicIn()/] + ".['version implem'.apply_methodSet()/]([any.nameClassRequirementItf()/].['not implementable'.apply_attributeFinalStatic()/])\n"
              + "   - soit spécifier la version comme suit : " + ['requirement'.apply_parameterMethodClassicIn()/] + ".['version implem'.apply_methodSet()/](\""
              + ['requirement'.apply_parameterMethodClassicIn()/].['version model'.apply_methodGet()/]() + "\")");
       }
       else if ([any.nameClassRequirementItf()/].['not implementable'.apply_attributeFinalStatic()/].equals(['version implem'.apply_parameterMethodClassicIn()/]))
       {
         //LoggerFactory.getLogger([any.nameClassRequirementUtilsImpl()/].class).debug("Exigence non implémentable : " + ['requirement'.apply_parameterMethodClassicIn()/]);
       }
       else if (['requirement'.apply_parameterMethodClassicIn()/].['version model'.apply_methodGet()/]().equals(['version implem'.apply_parameterMethodClassicIn()/]) == false)
       {
          throw new [any.nameClassRequirementExceptionImpl()/](['requirement'.apply_parameterMethodClassicIn()/], "La version du modèle (="
              + ['requirement'.apply_parameterMethodClassicIn()/].['version model'.apply_methodGet()/]() + ") ne correspond pas à la version implémentée (= "
              + ['version implem'.apply_parameterMethodClassicIn()/] + ")", "Vérifier l'implémentation de l'exigence : " 
              + ['requirement'.apply_parameterMethodClassicIn()/].['name'.apply_methodGet()/]());
       }
    }
  }
[/template]

[comment écriture de l'implémentation pour la classe d'exception concernant les exigences./]
[template public requirementExceptionImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageCommonException())/]
  
  [any.defaultImports()/]
  import [any.namePackageProject()/].[any.namePackageRequirement()/].[any.nameClassRequirementItf()/];
  
  /**
   * Cette exception est lancée lorsque des problèmes sont rencontrés liés à une exigence spécifique.
   * Elle permet de fournir un message d'erreur et un message supplémentaire concernant la possibilité de correction.
   * 
   * Cette exception hérite de {@link RuntimeException} et permet d'ajouter des détails concernant l'exigence
   * (de type {@link [any.nameClassRequirementItf()/]}) associée à l'erreur.
   * 
   * @author [any.nameAuthor()/]
   */
  public class [any.nameClassRequirementExceptionImpl()/] extends RuntimeException
  {
    ['identifiant de sérialisation'.commentMultiLines()/]
    private static final long serialVersionUID = 1L;
    
    /**
     * Message par défaut suggérant une vérification du service et/ou du test de l'exigence.
     */
    private static final String ['messageCorrectionPossible'.apply_attributeFinalStatic()/] = "Vérifier l'implémentation du service ou du test de l'exigence";
    
    /**
     * L'exigence liée à cette exception.
     */
    private final [any.nameClassRequirementItf()/] ['requirement'.apply_attributeFinal()/];
    
    /**
     * Constructeur par défaut qui initialise l'exception avec une exigence et un message spécifique.
     * Le message de correction possible est défini par défaut.
     * 
     * @param ['requirement'.apply_parameterMethodClassicIn()/] L'exigence liée à cette exception.
     * @param ['message'.apply_parameterMethodClassicIn()/] Le message d'erreur détaillant le problème.
     */
    public [any.nameClassRequirementExceptionImpl()/] (final [any.nameClassRequirementItf()/] ['requirement'.apply_parameterMethodClassicIn()/]
     , final String ['message'.apply_parameterMethodClassicIn()/])
    {
      this(['requirement'.apply_parameterMethodClassicIn()/], ['message'.apply_parameterMethodClassicIn()/]
       , ['messageCorrectionPossible'.apply_attributeFinalStatic()/]);
    }
    
    /**
     * Constructeur qui initialise l'exception avec une exigence, un message spécifique et un message pour la correction possible.
     * 
     * @param ['requirement'.apply_parameterMethodClassicIn()/] L'exigence liée à cette exception.
     * @param ['message'.apply_parameterMethodClassicIn()/] Le message d'erreur détaillant le problème.
     * @param ['messageCorrectionPossible'.apply_parameterMethodClassicIn()/] Le message suggérant une correction possible pour le problème.
     */
    public [any.nameClassRequirementExceptionImpl()/] (final [any.nameClassRequirementItf()/] ['requirement'.apply_parameterMethodClassicIn()/]
     , final String ['message'.apply_parameterMethodClassicIn()/],
            final String ['messageCorrectionPossible'.apply_parameterMethodClassicIn()/])
    {
      //super(['message'.apply_parameterMethodClassicIn()/], ['messageCorrectionPossible'.apply_parameterMethodClassicIn()/]);
      [any.prefixAffectation()/]['requirement'.apply_attributeFinal()/] = ['requirement'.apply_parameterMethodClassicIn()/];
    }
    
    /**
     * Constructeur qui initialise l'exception avec une exigence, un message spécifique et un message pour la correction possible.
     * 
     * @param ['requirement'.apply_parameterMethodClassicIn()/] L'exigence liée à cette exception.
     * @param ['message'.apply_parameterMethodClassicIn()/] Le message d'erreur détaillant le problème.
     * @param ['messageCorrectionPossible'.apply_parameterMethodClassicIn()/] Le message suggérant une correction possible pour le problème.
     */
    public [any.nameClassRequirementExceptionImpl()/] (final [any.nameClassRequirementItf()/] ['requirement'.apply_parameterMethodClassicIn()/]
     , final String ['message'.apply_parameterMethodClassicIn()/], final Throwable ['root cause'.apply_parameterMethodClassicIn()/])
    {
      //super(['root cause'.apply_parameterMethodClassicIn()/], ['message'.apply_parameterMethodClassicIn()/]
      //  , ['messageCorrectionPossible'.apply_attributeFinalStatic()/]);
      [any.prefixAffectation()/]['requirement'.apply_attributeFinal()/] = ['requirement'.apply_parameterMethodClassicIn()/];
    }
    
    /**
     * Retourne l'exigence liée à cette exception.
     * 
     * @return L'exigence associée à cette exception.
     */
    public [any.nameClassRequirementItf()/] getRequirement ()
    {
      return ['requirement'.apply_attributeFinal()/];
    }
  }
[/template]