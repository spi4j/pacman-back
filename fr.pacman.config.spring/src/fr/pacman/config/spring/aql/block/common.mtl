[module common(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::output::headers/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture du fichier de configuration Maven pour le sous-projet métier (domain)./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectCommon()/]</artifactId>
    <packaging>jar</packaging>
    
    <dependencies>
       <dependency>
          <groupId>org.junit.jupiter</groupId>
          <artifactId>junit-jupiter</artifactId>
          <scope>test</scope>
       </dependency>
    </dependencies>
    
    <build>
      <plugins>
         <!-- Vérification des prérequis pour le module métier. -->
         <!-- ************************************************** --> 
         <!-- Placer ici uniquement les dépendances authorisées. --> 
         <!-- ************************************************** -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
               <execution>
                  <goals>
                     <goal>enforce</goal>
                  </goals>
                  <configuration>
                     <rules>
                        <bannedDependencies>
                           <excludes>
                              <exclude>*</exclude>                              
                           </excludes>
                           <includes>
                              <!-- Placer ici les librairies authorisées. -->
                              <!-- Pour l'instant uniquement librairies de test. -->
                              <include>*:*:*:*:test</include>
                           </includes>
                        </bannedDependencies>
                     </rules>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
    </build>
  </project>
[/template]


[comment écriture de l'annotation pour l'injection de service métier./]
[template public annotationOut(any : ecore::EObject)]
  [any.classHeader(any.namePackageAnnotation())/]
  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;

  /** 
   * Annotation personnalisée pour marquer les services du domaine dans l'application.
   * <p>
   * Cette annotation est utilisée pour indiquer qu'une classe fait partie du domaine métier de l'application,
   * généralement utilisée pour désigner les services ou les composants qui gèrent la logique métier.
   * Elle est disponible à l'exécution grâce à {@link RetentionPolicy#RUNTIME}.
   * </p>
   * Cette annotation ne comporte actuellement aucun élément spécifique, mais peut être étendue à l'avenir pour  
   * ajouter des métadonnées supplémentaires si nécessaire.
   *
   * @author [any.get_authorName()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationOut()/] {
     //RAS.
   }
[/template]

[comment écriture de l'annotation pour l'injection de service persistance./]
[template public annotationIn(any : ecore::EObject)]
  [any.classHeader(any.namePackageAnnotation())/]
  import java.lang.annotation.Retention;
  import java.lang.annotation.RetentionPolicy;

  /**
   * Annotation personnalisée pour marquer les adaptateurs de service dans l'application.
   * <p>
   * Cette annotation est utilisée pour identifier les classes qui servent d'adaptateurs pour les services.
   * Les adaptateurs de service sont généralement utilisés pour intégrer des services externes ou des composants 
   * spécifiques à l'architecture de l'application tout en offrant une interface uniforme.
   * Elle est disponible à l'exécution grâce à {@link RetentionPolicy#RUNTIME}.
   * </p>
   * Cette annotation ne comporte actuellement aucun élément spécifique, mais peut être étendue à l'avenir pour
   * ajouter des métadonnées supplémentaires si nécessaire.
   * 
   * @author [any.get_authorName()/]
   */
   @Retention(RetentionPolicy.RUNTIME)
   public @interface [any.nameClassAnnotationIn()/] {
     //RAS.
   }
[/template]