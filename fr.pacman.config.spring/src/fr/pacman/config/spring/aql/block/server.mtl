[module server(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::method/]

[comment écriture du fichier de configuration Maven pour le sous-projet serveur (infrastructure)./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectServer()/]</artifactId>
    <packaging>jar</packaging>
    
    <dependencies>
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-data-jpa</artifactId>
    	</dependency>
    	<dependency>
    		<groupId>org.springframework.boot</groupId>
    		<artifactId>spring-boot-starter-web</artifactId>
    	</dependency>
    	<!-- Projet métier (domaine). -->
    	<dependency>
    	   <groupId>[any.namePackageProject()/]</groupId>
    	   <artifactId>[any.nameProjectCommon()/]</artifactId>
    	   <version>0.0.1-SNAPSHOT</version>
    	</dependency>
    	<!-- Base H2 embarquée pour les tests. -->
    	<dependency>
    	   <groupId>com.h2database</groupId>
    	   <artifactId>h2</artifactId>
    	   <scope>runtime</scope>
    	</dependency>
    </dependencies>
    
    <build>
      <plugins>
      </plugins>
    </build>
  </project>
[/template]

[comment écriture de la classe d'exception pour les données rest non trouvées./]
[template public rsDataNotFoundException(any : ecore::EObject)]
  [any.classHeader(null)/]
  
  public class [any.nameClassRsDataNotFoundExceptionImpl()/] extends RuntimeException {
      
      private static final long serialVersionUID = 3708878571796774828L;
      
      ['Code retour pour le statut de la réponse'.commentMultiLines()/]
      private int ['code'.apply_attributeDefault()/];
      
      ['Constructeur'.commentMultiLines()/]
      public [any.nameClassRsDataNotFoundExceptionImpl()/](final int ['code'.apply_parameterMethodClassicIn()/], 
          final String ['msg'.apply_parameterMethodClassicIn()/]) {
          super(['msg'.apply_parameterMethodClassicIn()/]);
          [any.prefixAffectation()/]['code'.apply_attributeDefault()/] = ['code'.apply_parameterMethodClassicIn()/];
      }
      
      public int ['code'.apply_methodGet()/]() {
          return ['code'.apply_attributeDefault()/];
      }
  }  
[/template]

[comment écriture de la classe de gestion globale des erreurs pour les api rest./]
[template public rsExceptionhandler(any : ecore::EObject)]
  [any.classHeader(null)/]
  
  import org.springframework.http.HttpHeaders;
  import org.springframework.http.HttpStatus;
  import org.springframework.http.ResponseEntity;
  import org.springframework.web.bind.annotation.ControllerAdvice;
  import org.springframework.web.bind.annotation.ExceptionHandler;
  import org.springframework.web.context.request.WebRequest;
  import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
  
  @ControllerAdvice
  public class [any.nameClassRsExceptionHandlerImpl()/] extends ResponseEntityExceptionHandler {
    
    @ExceptionHandler(value = { IllegalArgumentException.class, IllegalStateException.class })
    protected ResponseEntity<Object> handleConflict(RuntimeException ex, WebRequest request) {
       String bodyOfResponse = "This should be application specific";
       return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT, request);
  	}
  	
  	@ExceptionHandler(value = { [any.nameClassRsDataNotFoundExceptionImpl()/].class})
  	protected ResponseEntity<Object> handleDataNotFound([any.nameClassRsDataNotFoundExceptionImpl()/] ['ex'.apply_parameterMethodClassicIn()/]
  	   , WebRequest ['request'.apply_parameterMethodClassicIn()/]) {

		ExceptionBody bodyOfResponse = new ExceptionBody();
		bodyOfResponse.setStatusCode(['ex'.apply_parameterMethodClassicIn()/].getCode());
		bodyOfResponse.setErrMessage(['ex'.apply_parameterMethodClassicIn()/].getMessage());

       return handleExceptionInternal(['ex'.apply_parameterMethodClassicIn()/], bodyOfResponse, new HttpHeaders(), HttpStatus.CONFLICT
         , ['request'.apply_parameterMethodClassicIn()/]);
    }
    
    class ExceptionBody {

    		private int statusCode;

    		private String errMessage;

    		public int getStatusCode() {
    		return statusCode;
    	}

    		public void setStatusCode(int statusCode) {
    		this.statusCode = statusCode;
    	}

    		public String getErrMessage() {
    		return errMessage;
    	}

    		public void setErrMessage(String errMessage) {
    		this.errMessage = errMessage;
    	}
    }
  }
[/template]