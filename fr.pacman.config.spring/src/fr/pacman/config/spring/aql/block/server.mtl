[module server(	'http://www.obeonetwork.org/dsl/overview/2.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::name::classes/]
[import fr::pacman::core::aql::name::packages/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::output::headers/]
[import fr::pacman::core::aql::output::comments/]
[import fr::pacman::core::aql::output::resources/]
[import fr::pacman::core::aql::rule::attribute/]
[import fr::pacman::core::aql::rule::parameter/]
[import fr::pacman::core::aql::rule::variable/]
[import fr::pacman::core::aql::rule::method/]

[import fr::pacman::core::property::project::ProjectProperties/]

[comment écriture du fichier de configuration Maven pour le sous-projet serveur (infrastructure)./]
[template public pom (any : ecore::EObject)]
  <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>[any.namePackageProject()/]</groupId>
        <artifactId>[any.nameProject()/]</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>[any.nameProjectServer()/]</artifactId>
    <packaging>jar</packaging>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-client</artifactId>
        </dependency>
        <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
        </dependency>
        
        <!-- Projet métier (domaine). -->
        <dependency>
           <groupId>[any.namePackageProject()/]</groupId>
           <artifactId>[any.nameProjectCommon()/]</artifactId>
           <version>0.0.1-SNAPSHOT</version>
        </dependency>
        
        <!-- Base H2 embarquée pour les tests. -->
        <dependency>
           <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
        </dependency>
        [if (any.get_dataBasesNames().toLower().index('postgresql') != -1)]
          <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
          </dependency>
    	[/if]
    	[if (any.get_dataBasesNames().toLower().index('mysql') != -1)]
    	  <dependency>
    	    <groupId>mysql</groupId>
    	    <artifactId>mysql-connector-java</artifactId>
    	  </dependency>
    	[/if]
    	[if (any.get_dataBasesNames().toLower().index('mariadb') != -1)]
    	  <dependency>
    	    <groupId>org.mariadb.jdbc</groupId>
    	    <artifactId>mariadb-java-client</artifactId>
    	  </dependency>
    	[/if]
    	[if (any.get_dataBasesNames().toLower().index('oracle-') != -1)]
    	  <dependency>
            <groupId>com.oracle</groupId>
            <artifactId>ojdbc7</artifactId>
    	  </dependency>
    	[/if]
    	[if (any.get_dataBasesNames().toLower().index('oracle+') != -1)]
    	  <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
    	  </dependency>
    	[/if]
    </dependencies>
    
    <build>
      <plugins>
      </plugins>
    </build>
  </project>
[/template]

[comment écriture du boostrap pour l'application./]
[template public applicationBoostrapImpl(any : ecore::EObject)]
  [any.classHeader(null)/]
  [any.defaultImports()/]
  import java.util.TimeZone;
  import org.springframework.boot.CommandLineRunner;
  import org.springframework.boot.SpringApplication;
  import org.springframework.boot.autoconfigure.SpringBootApplication;
  import org.springframework.context.ApplicationContext;
  import org.springframework.context.annotation.Bean;
  import org.springframework.context.annotation.EnableAspectJAutoProxy;
  import org.springframework.context.annotation.FilterType;
  import org.springframework.context.annotation.ComponentScan;
  import [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationIn()/];
  import [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationOut()/];
  
  /**
   * Classe de démarrage de l'application Spring Boot. Cette classe est annotée
   * avec {@link SpringBootApplication}, ce qui permet de configurer
   * automatiquement les composants nécessaires à l'exécution de l'application.
   * Elle active également la gestion des aspects avec
   * {@link EnableAspectJAutoProxy} et configure un scan de composants
   * personnalisé pour inclure les services annotés avec {@link [any.nameClassAnnotationStubOut()/]} et
   * {@link [any.nameClassAnnotationIn()/]}.
   * <p>
   * La méthode {@link #main(String...)} est le point d'entrée principal de
   * l'application, qui démarre l'application Spring Boot.
   *
   * @author [any.nameAuthor()/] 
   *
   * @see SpringBootApplication
   * @see EnableAspectJAutoProxy
   * @see ComponentScan
   * @see DomainService
   * @see AdapterService
   */
  @SpringBootApplication
  @EnableAspectJAutoProxy
  @ComponentScan(basePackages = {"[any.namePackageProject()/]"}, includeFilters = {
  @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = { [any.nameClassAnnotationIn()/].class
    ,  [any.nameClassAnnotationOut()/].class})})
  public class [any.nameClassAppBoostrap()/]
  {
  
     /**
      * Point d'entrée de l'application Spring Boot. Il démarre l'application en appelant
      * {@link SpringApplication#run(Class, String...)} avec la 
      * classe {@code  [any.nameClassAppBoostrap()/]}.
      *
      * @param args Les arguments de la ligne de commande.
      */
	  public static void main(String... args) {
	    
	    TimeZone.setDefault(TimeZone.getTimeZone("GMT+08:00"));	
	    SpringApplication.run([any.nameClassAppBoostrap()/].class, args);
	  }
	  
	  /**
	   * Un {@link CommandLineRunner} qui est exécuté au démarrage de l'application. Il affiche
	   * la liste de tous les beans définis dans le contexte de l'application Spring.
	   *
	   * @param ctx Le contexte de l'application Spring contenant les beans.
	   * @return Un {@link CommandLineRunner} qui est exécuté au démarrage de l'application.
	   */
	  //@Bean
	  public CommandLineRunner commandLineRunner(ApplicationContext ctx) {
	    return args -> {
			System.out.println("Liste des beans disponibles pour Spring Boot:");
	    	String['['/][']'/] beanNames = ctx.getBeanDefinitionNames();
	    	Arrays.sort(beanNames);
	    	for (String beanName : beanNames) {
	    		System.out.println(beanName);
	    	}
	  	};
	  }
  }
[/template]

[comment écriture de la classe d'exception pour les données rest non trouvées./]
[template public rsDataNotFoundExceptionImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageException())/]
  [any.defaultImports()/]
  
  /**
   * Services REST: Classe minimaliste (à titre d'exemple) pour une exception de
   * type fonctionnelle. Elle est automatiquement renvoyée par les générateurs si
   * l'entitée n'est pas trouvée dans le cadre des services rest.
   * <p>
   * Cette classe fonctionne en relation avec les classes {@link [any.nameClassRsErrorBodyResponseImpl()/]} 
   * et {@link [any.nameClassRsExceptionHandlerImpl()/]}
   * <p>
   * Si besoin, créer des exceptions supplémentaires et les positionner au niveau
   * de ce package.
   * 
   * @author [any.nameAuthor()/]
   */
  public class [any.nameClassRsDataNotFoundExceptionImpl()/] extends RuntimeException {
      
      private static final long serialVersionUID = 3708878571796774828L;
      
      ['Code pour le statut HTTP'.commentMultiLines()/]
      private int ['status code'.apply_attributeDefault()/];
      
      ['Constructeur'.commentMultiLines()/]
      public [any.nameClassRsDataNotFoundExceptionImpl()/](final int ['status code'.apply_parameterMethodClassicIn()/], 
          final String ['msg'.apply_parameterMethodClassicIn()/]) {
          super(['msg'.apply_parameterMethodClassicIn()/]);
          [any.prefixAffectation()/]['status code'.apply_attributeDefault()/] = ['status code'.apply_parameterMethodClassicIn()/];
      }
      
      /**
       * Retourne le code de statut HTTP.
       * 
       * @return le code de statut HTTP.
       */
      public int ['status code'.apply_methodGet()/]() {
          return ['status code'.apply_attributeDefault()/];
      }
  }  
[/template]

[comment écriture de la classe de gestion globale des erreurs pour les api rest./]
[template public rsExceptionhandlerImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsBase())/]
  [any.defaultImports()/]
  import org.springframework.http.HttpHeaders;
  import org.springframework.http.HttpStatus;
  import org.springframework.http.ResponseEntity;
  import org.springframework.web.bind.annotation.ControllerAdvice;
  import org.springframework.web.bind.annotation.ExceptionHandler;
  import org.springframework.web.context.request.WebRequest;
  import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
  
  /**
   * Gère les exceptions dans l'application en fournissant des réponses d'erreur personnalisées.
   * Cette classe utilise l'annotation {@link ControllerAdvice} pour intercepter les exceptions globalement
   * et les convertir en réponses HTTP structurées.
   * <p>
   * Compléter la classe si besoin avec autant de méthodes de gestion des
   * exceptions que nécessaires;
   * 
   * @author [any.nameAuthor()/]
   */
  @ControllerAdvice
  public class [any.nameClassRsExceptionHandlerImpl()/] extends ResponseEntityExceptionHandler {
    
   /**
    * Gère les exceptions {@link [any.nameClassRsDataNotFoundExceptionImpl()/]} et renvoie une réponse d'erreur avec le code de statut approprié.
    * 
    * @param ex L'exception {@link [any.nameClassRsDataNotFoundExceptionImpl()/]} capturée.
    * @param request La requête HTTP associée à l'exception.
    * @return Une réponse HTTP avec un corps contenant le message d'erreur et le code de statut approprié.
    */
    @ExceptionHandler(value = { [any.nameClassRsDataNotFoundExceptionImpl()/].class})
    protected ResponseEntity<Object> ['handle data not found'.apply_methodDefault()/]
      ([any.nameClassRsDataNotFoundExceptionImpl()/] ['ex'.apply_parameterMethodClassicIn()/]
       , WebRequest ['request'.apply_parameterMethodClassicIn()/]) {
       [any.nameClassRsErrorBodyResponseImpl()/] ['body response'.apply_variableDefault()/] 
         = new [any.nameClassRsErrorBodyResponseImpl()/] (['ex'.apply_parameterMethodClassicIn()/].['status code'.apply_methodGet()/](), 
          ['ex'.apply_parameterMethodClassicIn()/].['message'.apply_methodGet()/]());
          
       [protected ('handle data not found'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
       [/protected]
       
       return handleExceptionInternal(['ex'.apply_parameterMethodClassicIn()/], ['body response'.apply_variableDefault()/]
       , new HttpHeaders(), [any.nameClassRsHttpStatusResolverImpl()/].['resolve'.apply_methodDefault()/]
       (['body response'.apply_variableDefault()/].['status code'.apply_methodGet()/]()), ['request'.apply_parameterMethodClassicIn()/]);
    }
    
    /**
      * Gère les exceptions {@link [any.nameClassNotImplementedExceptionImpl()/]} et renvoie une réponse d'erreur avec un code de statut 501.
      * 
      * @param ex L'exception {@link [any.nameClassNotImplementedExceptionImpl()/]} capturée.
      * @param request La requête HTTP associée à l'exception.
      * @return Une réponse HTTP avec un corps contenant le message d'erreur et le code de statut 501.
      */
      @ExceptionHandler(value = { [any.nameClassNotImplementedExceptionImpl()/].class})
      protected ResponseEntity<Object> ['handle not implemented'.apply_methodDefault()/]
        ([any.nameClassNotImplementedExceptionImpl()/] ['ex'.apply_parameterMethodClassicIn()/]
         , WebRequest ['request'.apply_parameterMethodClassicIn()/]) {
         [any.nameClassRsErrorBodyResponseImpl()/] ['body response'.apply_variableDefault()/] 
           = new [any.nameClassRsErrorBodyResponseImpl()/] (HttpStatus.NOT_IMPLEMENTED.value() 
            , ['ex'.apply_parameterMethodClassicIn()/].['message'.apply_methodGet()/]());
            
         [protected ('handle not implemented'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
         [/protected]
         
         return handleExceptionInternal(ex, ['body response'.apply_variableDefault()/]
         , new HttpHeaders(), HttpStatus.NOT_IMPLEMENTED, request);
      }
    
   /**
    * Gère les exceptions génériques {@link Exception} et renvoie une réponse d'erreur avec un code de statut 500.
    * 
    * @param ex L'exception générique capturée.
    * @param request La requête HTTP associée à l'exception.
    * @return Une réponse HTTP avec un corps contenant un message générique d'erreur et un code de statut 500.
    */
    @ExceptionHandler(value = { Exception.class })
    protected ResponseEntity<Object> ['handle server error'.apply_methodDefault()/](
	   Exception ['ex'.apply_parameterMethodClassicIn()/], WebRequest ['request'.apply_parameterMethodClassicIn()/]) {
       [any.nameClassRsErrorBodyResponseImpl()/] ['body response'.apply_variableDefault()/] 
         = new [any.nameClassRsErrorBodyResponseImpl()/](HttpStatus.INTERNAL_SERVER_ERROR.value()
         , ['ex'.apply_parameterMethodClassicIn()/].getMessage());
         
       [protected ('handle server error'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
       [/protected]
       
       return handleExceptionInternal(ex, ['body response'.apply_variableDefault()/]
       , new HttpHeaders(), HttpStatus.INTERNAL_SERVER_ERROR, request);
  	}
  	
  	[protected (any.nameClassRsExceptionHandlerImpl().protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
  	[/protected]
  }
[/template]

[comment écriture de la classe pour le corps des erreurs sur les api rest./]
[template public rsErrorBodyResponseImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsBase())/]
  [any.defaultImports()/]
  
  /**
   * Représente une réponse d'erreur avec un code de statut HTTP et un message d'erreur.
   * Cette classe est utilisée pour encapsuler les informations d'une erreur retournée par un service,
   * incluant un code de statut HTTP et un message d'erreur associé.
   * <P>
   * Cette classe est utilisée par le gestionnaire global des exceptions de
   * l'application [any.nameProject()/], la classe {@link [any.nameClassRsExceptionHandlerImpl()/]}. 
   * Par défaut, la structure est minimale avec un statut HTTP (bien qu'il soit aussi présent au
   * niveau de l'en-tête) et un message d'erreur. 
   * <p>
   * Compléter la classe selon le besoin et modifier la classe {@link [any.nameClassRsExceptionHandlerImpl()/]} 
   * afin de prendre en compte l'ensemble des modifications apportées.
   * 
   * @author [any.nameAuthor()/]
   */
  class [any.nameClassRsErrorBodyResponseImpl()/] {
     
     ['Le code de statut HTTP associé à l\'erreur'.commentMultiLines()/]
     private final int ['status code'.apply_attributeDefault()/];
       
     ['Le message d\'erreur ou d\'avertissement associé à l\'erreur.'.commentMultiLines()/]
     private final String ['err message'.apply_attributeFinal()/];
     
     ['Constructeur'.commentMultiLines()/]
     [any.nameClassRsErrorBodyResponseImpl()/](final int ['status code'.apply_parameterMethodClassicIn()/], 
       final String ['err message'.apply_parameterMethodClassicIn()/])
     {
        [any.prefixAffectation()/]['status code'.apply_attributeFinal()/] = ['status code'.apply_parameterMethodClassicIn()/] ;
        [any.prefixAffectation()/]['err message'.apply_attributeFinal()/] = ['err message'.apply_parameterMethodClassicIn()/];
     }
     
     /**
      * Retourne le statut HTTP pour l'exception.
      * 
      * @return le statut HTTP.
      */
     public int ['status code'.apply_methodGet()/]() {
        return ['status code'.apply_attributeDefault()/];
     }
     
     /**
      * Retourne le message d'erreur ou d'avertissement pour l'exception.
      * 
      * @return le message d'erreur ou d'avertissment?
      */
     public String ['err message'.apply_methodGet()/]() {
        return ['err message'.apply_attributeDefault()/];
     }
  }
[/template]

[comment écriture de la classe de résolution des statuts (int <-> HTttpStatus) pour les services rest./]
[template public rsHttpStatusResolverImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsBase())/]
  [any.defaultImports()/]
  import org.springframework.http.HttpStatus;
  
  /**
   * La classe {@code [any.nameClassRsHttpStatusResolverImpl()/]} fournit une méthode statique
   * permettant de résoudre un code de statut HTTP en utilisant la classe
   * {@link HttpStatus}. Cette méthode permet de retourner un objet
   * {@link HttpStatus} correspondant au code de statut HTTP fourni.
   *  
   * @author [any.nameAuthor()/]
   */
  class [any.nameClassRsHttpStatusResolverImpl()/]
  {
      /**
       * Résout un code de statut HTTP en un objet {@link HttpStatus}.
       *
       * @param ['status code'.apply_parameterMethodClassicIn()/] Le code de statut HTTP à résoudre.
       * @return Un objet {@link HttpStatus} représentant le code de statut HTTP, ou {@code null} si le code n'est pas valide.
       * @throws IllegalArgumentException Si le code de statut est invalide et ne peut être résolu.
       * 
       * @param ['status code'.apply_parameterMethodClassicIn()/] le code de statut HTTP sous forme d'entier.
       * @return le statut sous forme d'énumération.
       */
      static HttpStatus ['resolve'.apply_methodDefault()/](final int ['status code'.apply_parameterMethodClassicIn()/]) {
         return HttpStatus.resolve(['status code'.apply_parameterMethodClassicIn()/]);
      }
  }
[/template]

[comment écriture de l'implémentation pour la classe de gestion des transactions jpa./]
[template public jpaTransactionExecutorImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageInfrastructureBase())/]
  [any.defaultImports()/]
  import java.util.function.Supplier;
  import org.springframework.transaction.annotation.Transactional;
  
  /**
   * Classe responsable de l'exécution d'opérations dans un contexte transactionnel.
   * Elle utilise l'annotation {@code @Transactional} pour gérer les transactions.
   * Cette classe permet d'exécuter des blocs de code dans une transaction, facilitant ainsi
   * la gestion des transactions dans des applications où plusieurs opérations doivent être
   * atomiquement validées ou annulées.
   *
   * @author [any.nameAuthor()/]
   */
  class [any.nameClassJpaTransactionExecutorImpl()/]
  {
     /**
      * Exécute une opération dans une transaction.
      * Cette méthode prend un {@link Supplier} représentant l'opération à exécuter et renvoie
      * le résultat de cette opération après l'avoir exécutée dans le cadre d'une transaction.
      * La transaction est gérée automatiquement grâce à l'annotation {@code @Transactional}.
      *
      * @param <T> Le type du résultat de l'exécution.
      * @param execution Le {@link Supplier} représentant l'opération à exécuter.
      * @return Le résultat de l'exécution de l'opération.
      * 
      * @Author [any.nameAuthor()/]
      */
     @Transactional
     <T> T executeInTransaction(Supplier<T> execution) {
        return execution.get();
     }
  }
[/template]


[comment écriture de l'implémentation pour la classe aspect de gestion des transactions jpa./]
[template public jpaTransactionServiceAspectImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageInfrastructureBase())/]
  [any.defaultImports()/]
  import org.aspectj.lang.ProceedingJoinPoint;
  import org.aspectj.lang.annotation.Around;
  import org.aspectj.lang.annotation.Aspect;
  import org.aspectj.lang.annotation.Pointcut;
  
  /**
   * Aspect responsable de l'encapsulation des méthodes annotées avec 
   * {@link [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationTrans()/]}.
   * Cet aspect garantit que les méthodes au sein du domaine de service spécifié soient 
   * exécutées dans un contexte transactionnel.Il utilise le {@link [any.nameClassJpaTransactionExecutorImpl()/]} 
   * pour exécuter les opérations dans une transaction.
   *
   * @author [any.nameAuthor()/]
   */
  @Aspect
  class [any.nameClassJpaTransactionServiceAspectImpl()/]
  {
    
    ['Le gestionnaire de transactions'.commentSingleLine()/]
    private final [any.nameClassJpaTransactionExecutorImpl()/] ['transactional executor'.apply_attributeDefault()/];
    
   /**
    * Constructeur de l'aspect, injectant un {@link [any.nameClassJpaTransactionExecutorImpl()/]} pour la gestion des transactions.
    *
    * @param ['transactional executor'.apply_parameterMethodClassicIn()/] L'exécuteur de transactions utilisé pour exécuter les méthodes dans un contexte transactionnel.
    */
    public [any.nameClassJpaTransactionServiceAspectImpl()/]([any.nameClassJpaTransactionExecutorImpl()/] ['transactional executor'.apply_parameterMethodClassicIn()/]) {
       [any.prefixAffectation()/]['transactional executor'.apply_attributeDefault()/] 
          = ['transactional executor'.apply_parameterMethodClassicIn()/];
    }
    
    /**
     * Méthode exécutée autour des méthodes annotées avec
     * {@link [any.namePackageProject()/].[any.namePackageCommonBase()/].[any.nameClassAnnotationTrans()/]} ou celles qui se trouvent
     * dans des classes annotées par cette même annotation. Cette méthode garantit
     * que l'exécution des méthodes annotées se déroule dans un contexte
     * transactionnel.
     * <p>
     * La logique de gestion de la transaction est assurée par l'exécution de la
     * méthode cible dans le contexte d'une transaction, et en cas d'exception, elle
     * est capturée et transformée en une {@link RuntimeException} pour une gestion
     * centralisée.
     * </p>
     * 
     * @param proceedingJoinPoint Le point de jonction pour accéder à la méthode
     *                            annotée, permettant de procéder à l'exécution de
     *                            la méthode cible.
     * 
     * @return L'objet retourné par la méthode annotée après son exécution dans un
     *         contexte transactionnel.
     * 
     * @throws RuntimeException Si une exception est levée pendant l'exécution de la
     *                          méthode, elle est enveloppée dans une
     *                          {@link RuntimeException}.
     */
    @Around(value = "@annotation([any.writeTransAnnotation()/]) " 
          + "|| @within([any.writeTransAnnotation()/])")
    private Object ['transactionnal operation'.apply_methodDefault()/](ProceedingJoinPoint ['proceeding join point'.apply_parameterMethodClassicIn()/]) {
       return ['transactional executor'.apply_attributeDefault()/].executeInTransaction(() -> {
          try {
             return ['proceeding join point'.apply_parameterMethodClassicIn()/].proceed();
          } catch (Throwable e) {
             throw new RuntimeException(e);
          }
       });
    }
  }
[/template]

[comment simple raccourci pur l'écriture de l'annotation./]
[query private writeTransAnnotation(any : ecore::EObject) : String = any.namePackageProject() + '.' 
  + any.namePackageCommonBase() + '.' + any.nameClassAnnotationTrans()/]

[comment écriture de l'implémentation pour la classe de configuration des transactions jpa./]
[template public jpaTransactionConfigurationImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageInfrastructureBase())/]
  [any.defaultImports()/]
  import org.springframework.context.annotation.Bean;
  import org.springframework.context.annotation.Configuration;
  
  /**
   * Configuration de la gestion transactionnelle pour l'application [any.nameProject()/].
   * <p>
   * Cette classe configure les beans nécessaires à la gestion des transactions dans les services [any.nameProject()/].
   * Elle définit les beans pour {@link [any.nameClassJpaTransactionServiceAspectImpl()/]} 
   * et {@link [any.nameClassJpaTransactionExecutorImpl()/]}.
   *
   * @author [any.nameAuthor()/]
   */
  @Configuration
  class [any.nameClassJpaTransactionConfigurationImpl()/]
  {
    
   /**
    * Crée un bean {@link [any.nameClassJpaTransactionServiceAspectImpl()/]}.
    * Ce bean est responsable de l'aspect transactionnel pour les services dans l'application.
    * 
    * @param transactionalExecutor Le {@link [any.nameClassJpaTransactionExecutorImpl()/]} qui gère l'exécution des transactions.
    * @return Un nouveau bean {@link [any.nameClassJpaTransactionServiceAspectImpl()/]} configuré 
    * avec le {@link [any.nameClassJpaTransactionExecutorImpl()/]}.
    */
    @Bean
    [any.nameClassJpaTransactionServiceAspectImpl()/] ['transactional aspect'.apply_methodDefault()/]
        ([any.nameClassJpaTransactionExecutorImpl()/] ['transactional executor'.apply_parameterMethodClassicIn()/]) {
        return new [any.nameClassJpaTransactionServiceAspectImpl()/](['transactional executor'.apply_parameterMethodClassicIn()/]);
    }
    
   /**
    * Crée un bean {@link [any.nameClassJpaTransactionExecutorImpl()/]}.
    * Ce bean est responsable de l'exécution des transactions dans l'application.
    * 
    * @return Un nouveau bean {@link [any.nameClassJpaTransactionExecutorImpl()/]}.
    */
    @Bean
    [any.nameClassJpaTransactionExecutorImpl()/] ['transactional executor'.apply_methodDefault()/]() {
        return new [any.nameClassJpaTransactionExecutorImpl()/]();
    }
  }
[/template]

[comment écriture de l'ensemble des informations pour les datasources, etc.../]
[template public applicationProperties(any : ecore::EObject)]
  
  # ----------------------------------------------------------------------------------------------
  # API DE SANTE
  # ----------------------------------------------------------------------------------------------
  
  # /auditevents Liste les evenements lies aux audits de securite (connexion/deconnexion, etc..).
  # /beans Liste les beans disponibles.
  # /conditions Rapport des conditions pour l'autoconfiguration.
  # /configprops Liste les beans de type @ConfigurationProperties.
  # /env Renvoie les proprietes de l'environnement.
  # /health Etat de sante de l'application.
  # /heapdump Cree un dump à partir de la JVM utilisee par l'application.
  # /info Renvoie les informations generales pour l'application.
  # /flyway Details sur les migrations de bases de donnees Flyway.
  # /liquibase se comporte comme /flyway mais pour Liquibase.
  # /logfile Renvoie les journaux d'application ordinaires.
  # /loggers Interroge le niveau de journalisation de notre application.
  # /metrics Renvoie les métriques de l'application.
  # /prometheus Renvoie des métriques, mais formatées pour fonctionner avec un serveur Prometheus.
  # /scheduledtasks Détails sur chaque tâche planifiée dans l'application.
  # /sessions Repertorie les sessions HTTP.
  # /shutdown effectue un arret progressif de l'application.
  # /threaddump vide les informations de thread de la JVM sous-jacente.
  
  # Activation des points de terminaison pour l'api de sante, par defaut, seuls '/health' et '/info' sont actifs.
  management.endpoints.web.exposure.include=health,info
  # Securite si demande d'activation de l'ensemble des points de terminaison.
  management.endpoints.web.exposure.exclude=mappings,heapdump
  
  # Definition du port et de la racine des points de terminaison pour l'actuator.
  # (a changer aussi au niveau du filtre de securite si besoin de modifications). 
  management.endpoints.web.base-path=/actuator
  management.server.port=8080
  
  # Configuration du point de terminaison '/health', valeurs possibles <never|always|when_authorized>
  # Pattern: management.endpoint.{endpoint-name}.{property}={value}
  management.endpoint.health.show-details=never
  management.health.defaults.enabled=false
  
  # Activation du point de terminaison '/health' personnalise pour l'application [any.nameProject()/].
  # Si non actif, c'est le parametrage du '/health' par defaut qui est utilise.
  management.health.[any.nameProject()/]_health.enabled=false
  
  # Configuration du point  de terminaison /info, definir ici les informations necessaires.
  management.info.env.enabled=true
  app.cusomInfo=This is Custom Info
  info.app.cusomInfo=${app.cusomInfo}
  info.app.java-version=${java.version}
  info.app.java-vendor=${java.vendor}
  info.app.excluded-actuator-enpoints=${management.endpoints.web.exposure.exclude}
  
  # ----------------------------------------------------------------------------------------------
  # DATASOURCES
  # ----------------------------------------------------------------------------------------------
  
  # Note : il n'est pas utile de specifier le nom de classe du pilote, puisque Spring Boot 
  # peut le deduire pour la plupart des bases de donnees a partir de l'URL de connexion.
  
  ## pool de connexion par defaut
  spring.datasource.hikari.connectionTimeout=20000
  spring.datasource.hikari.maximumPoolSize=5
  
  # En production placer a 'none'. valeurs possibles : <create | create-drop | update | validate | none>  
  spring.jpa.hibernate.ddl-auto=create-drop  
  
  # Fortement conseille de placer a 'false' (LazyInitializationException).
  spring.jpa.open-in-view=false
  
  # Strategie de nommage
  spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
  spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy

  # Maintient la connexion active en cas d'inaction prolongee (necessaire en production).
  spring.datasource.testWhileIdle=true
  spring.datasource.validationQuery=SELECT 1
  
  # Debug des requetes sql pour le developpement (couper en production).
  logging.level.org.hibernate.SQL=DEBUG
  logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
  logging.level.org.hibernate.orm.jdbc.bind=TRACE
  
  # H2 DB
  spring.datasource.url=jdbc:h2:file:C:/h2/test
  spring.datasource.username=sa
  spring.datasource.password=
  spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
  
  [if (any.get_dataBasesNames().toLower().index('postgresql') != -1)]
    ## PostgreSQL
    #spring.datasource.url=jdbc:postgresql://localhost:5432/<votre base de donnees>
    #spring.datasource.username=<nom utilisateur>
    #spring.datasource.password=<mot de passe utilisateur>
    #spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
  [/if]
  
  [if (any.get_dataBasesNames().toLower().index('mysql') != -1)]
    ## MySql
    #spring.datasource.url=jdbc:mysql://localhost:3306/<votre base de donnees>
    #spring.datasource.username=<nom utilisateur>
    #spring.datasource.password=<mot de passe utilisateur>
    #spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
  [/if]
  
  [if (any.get_dataBasesNames().toLower().index('mariadb') != -1)]
    ## MariaDB
    #spring.datasource.url=jdbc:mariadb://localhost:3306/<votre base de donnees>
    #spring.datasource.username=<nom utilisateur>
    #spring.datasource.password=<mot de passe utilisateur>
    #spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
  [/if]

  [if (any.get_dataBasesNames().toLower().index('oracle-') != -1)]
    ## Oracle
    #spring.datasource.url=jdbc:oracle:thin:<votre base de donnees>
    #spring.datasource.username=<nom utilisateur>
    #spring.datasource.password=<mot de passe utilisateur>
    #spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
  [/if]
  
  [if (any.get_dataBasesNames().toLower().index('oracle+') != -1)]
    ## Oracle
    #spring.datasource.url=jdbc:oracle:thin:<votre base de donnees>
    #spring.datasource.username=<nom utilisateur>
    #spring.datasource.password=<mot de passe utilisateur>
    #spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect
  [/if]
[/template]

[comment écriture de l'ensemble des informations de configuration pour les tests d'intégration./]
[template public integrationProperties(any : ecore::EObject)]
  ## Base H2 embarquee par defaut.
  spring.datasource.url = jdbc:h2:mem:test[any.get_projectName()/];DB_CLOSE_DELAY=-1
  spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
  
  # Attendre la creation des tables avant d'executer les scripts d'initialisation sql.
  # spring.jpa.defer-datasource-initialization=true
  
  # Autres proprietes
  spring.jpa.hibernate.ddl-auto=none 
  spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
  spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
  spring.jpa.properties.hibernate.format_sql=true
  spring.sql.init.mode=always
  
  # Debug des requetes sql pour le developpement.
  logging.level.org.hibernate.SQL=DEBUG
  logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
  logging.level.org.hibernate.orm.jdbc.bind=TRACE
[/template]

[comment écriture de la classe utilitaire pour les tests d'intégration./]
[template public integrationTestUtils(any : ecore::EObject)]
  [any.classHeader(null)/]
  
  [any.defaultImports()/]
  
  public final class [any.nameClassIntegrationTestUtils()/]
  {
     
     ['Constructeur privé'.commentMultiLines()/]
     private [any.nameClassIntegrationTestUtils()/](){
        //RAS.
     }
     
     //public static boolean ['find in collection by id'.apply_methodDefault()/]
     //    (['all'.apply_parameterMethodClassicIn()/], ['crud id'.apply_parameterMethodClassicIn()/]){
     //} 
  }
[/template]

[comment écriture de la classe abstraite pour les tests d'intégration (infra)./]
[template public integrationTestAbstract(any : ecore::EObject)]
  [any.classHeader(null)/]
  
  [any.defaultImports()/]
  import javax.sql.DataSource;
  import jakarta.persistence.EntityManager;
  import org.springframework.core.io.ClassPathResource;
  import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
  import static org.junit.jupiter.api.Assertions.assertTrue;
  
  /**
  * Classe abstraite qui sert de base pour les tests utilisant une source de
  * données SQL. Cette classe contient une méthode d'initialisation qui prépare
  * la base de données avec des scripts SQL au début de l'exécution des tests.
  * <p>
  * La méthode {@link #initSql(DataSource)} initialise la base de données en
  * exécutant les scripts SQL nécessaires, mais ce processus n'est effectué
  * qu'une seule fois grâce à la variable statique {@code initialized}.
  * 
  * @Author [any.nameAuthor()/]
  */
  public abstract class [any.nameClassIntegrationTestAbstract()/]
  {
     
    /**
     * L'instance de {@link EntityManager} utilisée pour effectuer des opérations de
     * persistance des entités dans la base de données. Elle est protégée afin
     * d'être accessible dans les sous-classes de {@code [any.nameClassIntegrationTestAbstract()/]}.
     */
     protected EntityManager ['entity manager'.apply_attributeDefault()/];
     
    /**
     * Variable statique indiquant si l'initialisation de la base de données a déjà
     * été effectuée. Cette variable est utilisée pour éviter de réinitialiser la
     * base de données plusieurs fois.
     */
     protected static boolean ['initialized'.apply_attributeStatic()/];
     
    /**
     * Initialise la base de données en exécutant les scripts SQL spécifiés, si cela
     * n'a pas déjà été fait.
     * <p>
     * Cette méthode vérifie si la base de données a déjà été initialisée en
     * consultant la variable statique {@code ['initialized'.apply_attributeStatic()/]}. Si ce n'est pas le cas,
     * elle charge et exécute les scripts SQL {@code [any.nameScriptCreate(any.defaultSqlDatabaseType())/].sql} et
     * {@code [any.nameScriptIntegrationInit(any.defaultSqlDatabaseType())/].sql} via un {@link ResourceDatabasePopulator},
     * puis marque l'initialisation comme effectuée en définissant
     * {@code ['initialized'.apply_attributeStatic()/]} sur {@code true}.
     * 
     * @param dataSource La source de données sur laquelle exécuter les scripts
     *                   d'initialisation. La source de données est utilisée pour se
     *                   connecter à la base de données.
     */
     protected void initSql(DataSource ['data source'.apply_parameterMethodClassicIn()/])  {
        
        if(!initialized) {
           
           ClassPathResource ['script create'.apply_variableDefault()/] = new ClassPathResource("/[any.nameScriptCreate(any.defaultSqlDatabaseType())/].sql");
           assertTrue(['script create'.apply_variableDefault()/].exists(), "Le fichier de création des tables n'a pas été trouvé.");
           
           ClassPathResource ['script init'.apply_variableDefault()/] = new ClassPathResource("/[any.nameScriptIntegrationInit(any.defaultSqlDatabaseType())/].sql");
           assertTrue(['script init'.apply_variableDefault()/].exists(), "Le fichier d'initialisation des tables n'a pas été trouvé.");
            
           ResourceDatabasePopulator ['populator'.apply_variableDefault()/] = new ResourceDatabasePopulator();
           ['populator'.apply_variableDefault()/].addScript(['script create'.apply_variableDefault()/]);
           ['populator'.apply_variableDefault()/].addScript(['script init'.apply_variableDefault()/]);
           ['populator'.apply_variableDefault()/].execute(['data source'.apply_parameterMethodClassicIn()/]);
           ['initialized'.apply_attributeStatic()/] = true;
        }
     }
  }
[/template]

[comment écriture de l'implémentation pour le service de santé de l'application./]
[template public serviceHealthImpl(any : ecore::EObject)]
  
[/template]

[comment écriture de l'implémentation pour le service de santé de l'application (ancien système)./]
[template public serviceHealthImpl_old(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsControllerBase())/]
  
  import java.io.IOException;
  import java.nio.file.Files;
  import java.nio.file.Path;
  import net.minidev.json.JSONObject;
  import [any.nameProject()/].[any.namePackageRsBase()/].[any.nameClassServiceHealthItf()/];
    
  public class [any.nameClassServiceHealthImpl()/] implements [any.nameClassServiceHealthItf()/]
  {
    private static String xmlInfoData;
    
    private static String xmlHealthData;
    
    static {
      try {
         Path path = Path.of(System.getenv("SAFRAN" + "") + "/safranInfo.properties");
         xmlInfoData = Files.readString(path);
         path = Path.of(System.getenv("SAFRAN" + "") + "/safranHealth.properties");
         xmlHealthData = Files.readString(path);
      } catch (IOException e) {
         throw new RuntimeException("Impossible de charger et/ou de " + "lire les fichiers de santé pour l'application.");
      }
    }
    	
    @Override
    public JSONObject ['application info'.apply_methodGet()/]() {
      //JSONObject applicationInfo = XML.toJSONObject(xmlInfoData);
      //return applicationInfo;
      return null;
    }
    
    @Override
    public JSONObject ['application health'.apply_methodGet()/]() {
      //JSONObject applicationHealth = XML.toJSONObject(xmlHealthData);
      //JSONObject healthNode = (JSONObject) applicationHealth.get("health");
      //JSONObject dataNode = (JSONObject) healthNode.get("data");
      //dataNode.put("services", SafranHealthExternalServices.getInfoExternalServices());
      //return applicationHealth;
      return null;
    }
  }
    
[/template]

[comment écriture de l'implémentation pour le service de santé (nouveau systeme actuator)./]
[template public serviceRsHealthImpl(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsControllerBase())/]
  
  [any.defaultImports()/]
  import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
  import org.springframework.boot.actuate.health.Health;
  import org.springframework.boot.actuate.health.HealthIndicator;
  import org.springframework.stereotype.Component;  
  /**
   * Implémentation de l'interface {@link HealthIndicator} pour vérifier l'état de santé du service [any.nameProject()/].
   * Cette classe est conditionnellement activée en fonction de la présence d'un indicateur de santé nommé
   * {@code [any.nameProject()/]_health} dans le contexte de l'application.
   * <p>
   * La méthode {@link #health()} crée un état de santé "healthy" par défaut, mais peut être étendue pour fournir
   * une vérification de santé plus complexe si nécessaire.
   * 
   * @see HealthIndicator
   * @see Health
   *
   * @Author [any.nameAuthor()/]
   */
  @Component
  @ConditionalOnEnabledHealthIndicator("[any.nameProject()/]_health")
  class [any.nameClassRsServiceHealthImpl()/] implements HealthIndicator
  {
     
     /**
       * Vérifie l'état de santé du service [any.nameProject()/] et retourne un objet {@link Health} indiquant l'état.
       * <p>
       * Dans cette implémentation, la méthode retourne simplement un état de santé "healthy" par défaut,
       * mais peut être enrichie pour effectuer des vérifications supplémentaires.
       * </p>
       *
       * @return l'état de santé du service, sous la forme d'un objet {@link Health}.
       */
     @Override
     public Health health() {
        Health.Builder ['healthBuilder'.apply_variableDefault()/] = new Health.Builder();
        
        [protected ('health'.protectedId()) startTagPrefix('// ') endTagPrefix('// ')]
        [/protected]
         
        return ['healthBuilder'.apply_variableDefault()/].build();
     }
  }
[/template]

[comment écriture de l'implémentation pour le service de santé (contrôleur) de l'application (ancien système)./]
[template public serviceRsHealthImpl_old(any : ecore::EObject)]
  [any.classHeader(any.namePackageRsControllerBase())/]
  
  [any.defaultImports()/]
  import org.springframework.stereotype.Controller;
  import org.springframework.web.bind.annotation.RequestMapping;
  import [any.namePackageProject()/].[any.namePackageRsBase()/].[any.nameClassExternalHealthImpl()/];
  import [any.namePackageProject()/].[any.namePackageRsBase()/].[any.nameClassExternalInfoImpl()/];
  
  @Controller
  @RequestMapping("/")
  class [any.nameClassRsServiceHealthImpl()/]
  {
  
  private 	SafranHealthService healthService;

   @Autowired
   public serviceHealthImpl(SafranHealthService healthService){
	   
   }
   
    @GET
    @Path("/info")
    @Produces(RsMediaType.c_application_json_utf8)
    public Response getApplicationInfo() {
  
  	  return RsResponseHelper.responseForJSONObject(healthService.getApplicationInfo()
  			, RsStatusType.create(200, "OK"));
    }

    @GET
    @Path("/health")
    @Produces(RsMediaType.c_application_json_utf8)
    public Response getApplicationHealth() {

  		return RsResponseHelper.responseForJSONObject(healthService.getApplicationHealth()
  			, RsStatusType.create(200, "OK"));
    }
  }
[/template]
