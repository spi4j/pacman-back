[module validation(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
					'http://www.obeonetwork.org/dsl/soa/4.0.0', 
					'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::entity/]
[import fr::pacman::core::aql::query::dto/]
[import fr::pacman::core::aql::output::headers/]

[import fr::pacman::core::generator::PacmanValidatorsReport/]

[comment écriture du rapport de validation pour un fichier de modélisation (entity)./]
[template public validation (r : entity::Root) post(self.escapeFile())]
  [r.writeTabHeader()/]
  [for (e | r.eAllContents(entity::Entity))]
    [comment pas d'entité vide./]
    [if (e.attributes->isEmpty())][e.add(e.msge1())/][/if]
    [comment pas d'attribut avec identifier./] 
    [if (not e.attributes->select(o | o.isIdentifier)->isEmpty())][e.add(e.msge2())/][/if]
  [/for]
  [for (re | r.eAllContents(environment::Reference))]
    [comment pas de relation bidirectionnelle avec double navigabilité./]
    [if (re.navigable and re.oppositeOf <> null and re.oppositeOf.navigable)][re.add(re.msgr1())/][/if]
    [comment pas de relation bidirectionnelle avec (1 ou 0,1)./]
    [if ( re.oppositeOf <> null and not re.isMultipleBidirectionnal())][re.add(re.msgr2())/][/if]
  [/for]
  [comment écriture du rapport dans le fichier./]
  [r.writeReport()/]
[/template]

[comment écriture du rapport de validation pour un fichier de modélisation (soa)./]
[template public validation (m : soa::System) post(self.escapeFile())]
  [m.writeTabHeader()/]
  [for (s | m.eAllContents(soa::Service))]
    [if (s.ownedInterface <> null)]
      [for (o | s.ownedInterface.ownedOperations)]
      [comment pas de service mappé sur une entité./]
      [if (not o.output->select(o1 | o1.type.oclIsKindOf(entity::Entity))->isEmpty())][o.add(s.msgs1(o))/][/if]
      [comment pas de service sans paramètre de retour./]
      [if (o.output->isEmpty())][o.add(s.msgs2(o))/][/if]
      [comment pas de service sans code de retour./]
      [if (not o.output->first().statusCode.exists())][o.add(s.msgs3(o))/][/if]
      [comment pas de service non rest (temporaire)./]
      [if (not (o.exposition = soa::ExpositionKind::REST))][o.add(s.msgs4(o))/][/if]
      [comment pas de fault sans code de retour./]
      [if (not o.fault->select(f | not (f.statusCode.exists()))->isEmpty())][o.add(s.msgs5(o))/][/if]
      [/for]
    [/if]
  [/for]
  [comment écriture du rapport dans le fichier./]
  [m.writeReport()/]
[/template]

[comment écriture de l'en-tête pour le raport de validation./]
[template private writeTabHeader(any : ecore::EObject)]
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  ['objet'.ensureTabCell(70, '|')/]['erreur rencontrée'.ensureTabCell(70, '|')/]['solution potentielle'.ensureTabCell(70, '|')/]
  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
[/template]

[comment écriture du rapport de validation./]
[template private writeReport (any : ecore::EObject)]
  [for (s | any.get_report())]
    [s.writeTabLine()/]
  [/for]
 [/template]
 
[comment écriture d'un eligne pour un tableau (avec taille de la cellule et séparateur)./]
[query private writeTabLine(s: String) : String = s.tokenize('@')->collect(o | o.ensureTabCell(70, '|'))->toString()/]

[comment écriture du nom de l'entité pour le rapport./]
[query private nameEntity(e : entity::Entity) : String =  e.blockHierarchy().replaceFirst('.','') + '.' + e.name/]

[comment écriture du nom de la référence pour le rapport./]
[query private nameReference(r : environment::Reference) : String = r.blockHierarchy().replaceFirst('.','')  + '.' + r.name/]
  
[comment écriture du nom de la référence pour le rapport./]
[query private nameService(s : soa::Service) : String = s.nameComponent() + '.' + s.name/]

[comment impossible de créer des entités sans attribut./]
[query private msge1 (e : entity::Entity) : String = e.nameEntity() + '@Entité sans aucun attribut@Ajoutez au moins un attribut au niveau de l\'entité'/]
  
[comment impossible de créer des entités avec un attribut de type 'Identifier'./]
[query private msge2 (e : entity::Entity) : String = e.nameEntity() + '@Entité avec un attribut marqué comme \'Identifier\'' +  
  '@Ne pas marquer l\'attribut(s) et laisser le générateur gérer l\'identifiant de l\'entité'/]
  
[comment impossible de créer des entités .............../]
[query private msge3 (e : entity::Entity) : String = e.nameEntity() + 'xxxxxxxxx' /]
  
[comment impossible de créer des relations bidirectionnelles navigables dans les deux sens./]
[query private msgr1 (r : environment::Reference) : String = r.nameReference() + '@Référence bidirectionnel navigable dans les deux sens ' 
+ '@Décochez la navigabilité sur un des deux liens'/]

[comment impossible de créer des relations bidirectionnelles avec des cardinalités (1 - 0,1)./]
[query private msgr2 (r : environment::Reference) : String = r.nameReference() + '@Référence bidirectionnel avec une cardinalité (1 - 0,1)' 
	+ '@Utilisez des relations non bidirectionnelles'/]

[comment impossible d'avoir un service directement mappé sur des entités./]	
[query private msgs1 (s : soa::Service, o : soa::Operation)  : String = s.nameService() + '.' + o.name() + '()' 
	+ '@Service référencant une (ou plusieurs) entité(s)@Ne référencez que des objets de transfert (dto) au niveau des services'/]

[comment impossible d'avoir un service sans paramètre de retour./]
[query private msgs2 (s : soa::Service, o : soa::Operation)  : String = s.nameService() + '.' + o.name() + '()' 
	+ '@Opération sans paramètre de retour@Modélisez un paramètre de retour pour une opération'/]
	
[comment impossible d'avoir un service sans statut de retour./]
[query private msgs3 (s : soa::Service, o : soa::Operation)  : String = s.nameService() + '.' + o.name() + '()' 
	+ '@Opération sans statut de retour@Attachez un code statut au paramètre de retour pour une opération'/]
	
[comment impossible d'avoir un service non rest (temporaire)./]
[query private msgs4 (s : soa::Service, o : soa::Operation)  : String = s.nameService() + '.' + o.name() + '()' 
	+ '@Opération exposition non définie@Attachez une exposition de typê \'REST\' pour une opération'/]
	
[comment impossible d'avoir un service avec une fault sans code statut./]
[query private msgs5 (s : soa::Service, o : soa::Operation)  : String = s.nameService() + '.' + o.name() + '()' 
	+ '@Paramètre \'fault\' sans statut@Attachez un code statut au paramètre \'fault\' pour une opération'/]