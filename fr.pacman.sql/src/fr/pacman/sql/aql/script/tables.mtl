[module tables(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
				'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::query::namespace/]
[import fr::pacman::core::aql::query::database/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::sql::aql::script::headers/]

[import fr::pacman::core::service::DatabaseUtils/]
[import fr::pacman::core::service::MandatoryUtils/]
[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::service::EObjectUtils/]

[comment 	par abus de langage, ce module est appelé 'tables' mais il pilote aussi les indexs et les contraintes sur 
			l'ensemble de la base de données. La gestion du schéma et des séquences est, quant à elle, remontée au 
			niveau du script appelant./]

[comment template principal du script de création des tables, indexs et contraintes pour une base 'dbType'./]				
[template public createTables(r : entity::Root, dbType : String)]
  [for (e : entity::Entity | r.eAllContents(entity::Entity))]
    [let rs = e.referencesFK()]
      [e.tableHeader()/]
      [e.writeTable(e.commandCreate())/]
      (
        [e.primaryKey(dbType)/]
        [e.attributs(dbType)/]
        [e.foreignKeys(rs,dbType)/]
        [e.primaryKeyConstraint(dbType)/]
      );
      [e.indexs(rs,dbType, e.commandCreate())/]
      [e.comments(rs,dbType)/]
    [/let]
  [/for]
  [r.joinTables(dbType, r.commandCreate())/]
[/template]

[comment template principal du script de suppression des tables, indexs et contraintes pour un base 'dbType'./]				
[template public dropTables(r : entity::Root, dbType : String)]
  [r.indexsHeader()/]
  [for (e : entity::Entity | r.eAllContents(entity::Entity))]
      [e.indexs(e.referencesFK(),dbType, e.commandDelete())/]
  [/for]
  [for (e : entity::Entity | r.eAllContents(entity::Entity))]
    [e.tableHeader()/]
    [e.writeTable(e.commandDelete())/];
  [/for]
  [r.joinTables(dbType, r.commandDelete())/]
[/template]

[comment écriture de la clé primaire pour la table./]
[template private primaryKey(e : entity::Entity, dbType : String)]
  /* PK de la table [e.nameTableSchema().toUpper()/] */
  [e.writePrimaryKey(dbType)/]
[/template]

[comment écriture des attributs pour la table./]
[template private attributs(e : entity::Entity, dbType : String)]
  [for (a : environment::Attribute | e.attributesNoPKAndNoComputed())]
    [a.writeAttribut(dbType)/]
  [/for]
  [if (e.hasAutoAttributs())]
  [/if]
[/template]

[comment écriture des clés étrangères pour la table (n'utilise pas l'index des boucles)./]
[template private foreignKeys(e : entity::Entity, rs : OrderedSet(environment::Reference), dbType : String)]
  [for (r : environment::Reference | rs)]
    [if (r.oppositeOf <> null)]/* FK vers la table [r.nameTableReferenceSchema().toUpper()/] */[/if]
    [r.writeReference(e, dbType, r.get_namingIndex(rs))/]
  [/for]
[/template]

[comment écriture des indexs pour la table (n'utilise pas l'index des boucles)./]
[template private indexs(e : entity::Entity, rs : OrderedSet(environment::Reference), dbType : String, command : String)]
  [if (e.has_metaPhysicalUnique())]
    [for (columns : String | e.get_metaPhysicalUnique().get_columnsForUniqueIndexs())]
      [e.writeUniqueIndex(dbType, columns, e.get_counterUN(e.defaultSqlIndexIncrement()), command)/]
    [/for]
  [/if]
  [for (a : environment::Attribute | e.attributesNoPKAndNoComputed())]
    [if (a.has_metaPhysicalUnique())]
      [e.writeUniqueIndex(a, dbType, e.get_counterUN(e.defaultSqlIndexIncrement()), command)/]
    [/if]
  [/for]
  [for (r : environment::Reference | rs)]
    [e.writeIndex(r, dbType, r.nameReferenceId(r.referencedEntity(e), r.get_namingIndex(rs)), 
    	e.get_counterIDX(e.defaultSqlIndexIncrement()), command)/]
  [/for]
[/template]

[comment écriture des commentaires pour la table (n'utilise pas l'index des boucles)./]
[template private comments(e : entity::Entity, rs : OrderedSet(environment::Reference), dbType : String)]
  [if (not dbType.is_mySqlType() and e.has_comments())]
	[e.ensureBlankLine()/]
    [if (e.hasComment())][e.writeComment()/][/if]
    [e.writeComment('Clé primaire pour la table')/]
    [for (a : environment::Attribute | e.attributesNoPKAndNoComputed())]
      [if (a.hasComment())][a.writeComment(e)/][/if]
    [/for]
    [for (r : environment::Reference | rs)]
      [if (r.hasComment())]
        [r.writeComment(e, r.nameReferenceId(r.referencedEntity(e), r.get_namingIndex(rs)))/]
      [/if]
    [/for]
  [/if]
[/template]

[comment écriture des tables de jointure (0,*)(1,*) toutes tables confondues./]
[template private joinTables(root : entity::Root, dbType : String, command : String)]
  [for (r : environment::Reference | root.referencesJT())]
    [r.ensureBlankLine()/]
    [r.cLine()/]
    [r.nameTableHeaderJoin().toUpper().ensureSlashLine(r.defaultMaxSizeSqlHeader())/]
    [r.cLine()/]
    [comment laisser exactement comme écrit sinon effets de bords./]
    [r.writeJoinTable(command)/][if (command.equalsIgnoreCase(r.commandDelete()))];[/if]
    [if (command.equalsIgnoreCase(r.commandCreate()))]
      (
        [r.containingType.oclAsType(entity::Entity).writePrimaryKeyJoin(dbType)/]
        [if (r.isStarRecursive())]
          [r.referencedType.oclAsType(entity::Entity).writePrimaryKeyJoin(dbType)
        	  .insert(r.suffixSqlPrimaryKeyJoinRecursive(),r.suffixSqlId())/]
        [else]
          [r.referencedType.oclAsType(entity::Entity).writePrimaryKeyJoin(dbType)/]
        [/if]
        [if (r.hasXdMaj())][/if]
        [if (r.hasXtopSup())][/if]
        [r.writePrimaryKeyJoinConstraint(dbType, r.defaultSqlIndexIncrement())/]
      );
    [/if]
  [/for]
[/template]

[comment écriture de la ligne pour une table./]
[query private writeTable(e : entity::Entity, command : String) : String = if (command.equalsIgnoreCase(e.commandCreate())) then 'create ' else 'drop ' endif 
	+ 'table' + e.nameTableSchema().toUpper()/]

[comment écriture de la ligne pour une table de jointure./]
[query private writeJoinTable(r : environment::Reference, command : String) : String = if (command.equalsIgnoreCase(r.commandCreate())) then 'create ' 
	else 'drop ' endif + 'table' + r.nameTableSchemaJoin().toUpper()/]
	
[comment écriture de la ligne pour la clé primaire de la table./]
[query private writePrimaryKey(e : entity::Entity, dbType : String) : String = e.namePrimaryKey().toUpper() + ' ' + dbType.typeColumnID() + ','/]

[comment écriture de la ligne pour la contrainte interne table associée à la clé primaire de la table./]		
[query private primaryKeyConstraint (e : entity::Entity, dbType : String) : String = if not dbType.is_mySqlType() then 'constraint ' 
	+ e.nameConstraintPrimaryKey().toUpper() + ' ' else '' endif + 'primary key (' + e.namePrimaryKey().toUpper() + ')'/]
	
[comment écriture de la ligne pour la clé primaire dans les tables de jointure (0,*)(1,*)./]
[query private writePrimaryKeyJoin(e : entity::Entity, dbType : String) : String = e.namePrimaryKey().toUpper() + ' ' + dbType.typeColumnIDJoin() + ','/]

[comment écriture de la ligne pour la contrainte interne table de jointure sur les clés primaires./]
[query private writePrimaryKeyJoinConstraint(r : environment::Reference, dbType : String, idx : Integer) : String = if not dbType.is_mySqlType() then 'constraint ' 
	+ r.nameConstraintPrimaryKeyJoin().toUpper() + ' ' else '' endif + 'primary key (' + r.containingType.oclAsType(entity::Entity).namePrimaryKey().toUpper() 
	+ ', ' + if r.isStarRecursive() then r.referencedType.oclAsType(entity::Entity).namePrimaryKey().insert(r.suffixSqlPrimaryKeyJoinRecursive(),r.suffixSqlId()).toUpper() 
	else r.referencedType.oclAsType(entity::Entity).namePrimaryKey().toUpper() endif +');'/]
  
[comment écriture de la ligne pour chaque attribut de l'entité./]  
[query private writeAttribut(a : environment::Attribute, dbType : String) : String = a.nameColumn().toUpper() + ' ' + a.get_columnTypeForDatabase(dbType) 
	+ a.writeEndLine(dbType) + if (a.has_metaPhysicalDefault()) then ' DEFAULT' + '\'' + a.get_metaPhysicalDefault() + '\'' else '' endif + ','/]

[comment écriture de la ligne pour chacune des tables référencées./]
[query private writeReference(r : environment::Reference, e : entity::Entity, dbType : String, idx : Integer) : String = r.nameReferenceId(r.referencedEntity(e),idx).toUpper() 
	+ ' ' + r.typeColumnRef(dbType) + r.writeEndLine(dbType) + ','/]

[comment écriture d'un segment commun pour certaines lignes./]
[query private writeEndLine (any : environment::Property, dbType : String) : String = if (any.is_mandatoryEntity()) then ' not null' else '' endif + 
	if (dbType.is_mySqlType() and any.description.exists()) then ' ' + any.description.toString().escapeComment() else '' endif/]

[comment écriture de la ligne pour un index unique associé à la table./]
[query private writeUniqueIndex(e : entity::Entity, dbType : String, columns : String, idx : Integer, command : String) : String = if (command.equalsIgnoreCase(e.commandCreate())) 
	then 'create ' else 'drop ' endif + 'unique index ' + e.nameIndexUnique(columns.get_nbColumnsInUniqueIndex(), idx).toUpper() + ' on ' + e.nameTableSchema().toUpper() 
	+ if (command.equalsIgnoreCase(e.commandCreate())) then '(' + columns.replaceAll(':',' ').toUpper() + ')' else '' endif + ';'/]
  
[comment écriture de la ligne pour un index unique sur un attribut A TERMINER !!!!!./]
[query private writeUniqueIndex(e : entity::Entity, a : environment::Attribute, dbType : String, idx : Integer, command : String) : String = if (command.equalsIgnoreCase(e.commandCreate())) 
	then 'create ' else 'drop ' endif + 'unique index ' + ';'/]

[comment écriture de la ligne pour un index portant sur un ou plusieurs attribut(s) (colonne(s))./]
[query private writeIndex(e : entity::Entity, r : environment::Reference, dbType : String, columnNameForId : String, idx : Integer, command : String) : String = 
	if (command.equalsIgnoreCase(e.commandCreate())) then 'create ' else 'drop ' endif + 'index ' + r.nameIndex(idx).toUpper() + ' on ' + e.nameTableSchema().toUpper() 
	+ if (command.equalsIgnoreCase(e.commandCreate())) then '(' + columnNameForId.toUpper() + ')' else '' endif + ';'/]

[comment écriture de la ligne de commentaire pour la table (si description sur l'entité)./]	
[query private writeComment(e : entity::Entity) : String = 'comment on table ' + e.nameTableSchema().toUpper()
	+ ' is \'' + e.description.escapeComment() + '\';'/]

[comment écriture de la ligne de commentaire pour la clé primaire de l'entité (commentaire automatique)./]	
[query private writeComment(e : entity::Entity, str : String) : String = 'comment on column ' + (e.nameTableSchema() + '.' +  e.namePrimaryKey()).toUpper() 
	+ ' is \'' + str + ' ' + e.nameTableSchema().toUpper() + '\';'/]
	
[comment écriture de la ligne de commentaire pour la colonne (si description sur l'attribut)./]		
[query private writeComment(a : environment::Attribute, e : entity::Entity) : String = 'comment on column ' + e.nameTableSchema().toUpper() 
	+ '.' + a.nameColumn().toUpper() + ' is \'' + a.description.escapeComment() + '\';'/]

[comment écriture de la ligne de commentaire pour la référence (si description sur la référence)./]		
[query private writeComment(r : environment::Reference, e : entity::Entity, columnNameForId : String) : String = 'comment on column ' 
	+ e.nameTableSchema().toUpper() + '.' + columnNameForId.toUpper() + ' is \'' + r.description.escapeComment() + '\';'/]