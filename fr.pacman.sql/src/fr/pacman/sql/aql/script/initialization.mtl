[module initialization(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
						'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::name::attributes/]
[import fr::pacman::core::aql::query::property/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::query::attribute/]
[import fr::pacman::core::aql::query::database/]
[import fr::pacman::core::aql::query::entity/]
[import fr::pacman::core::aql::name::databases/]

[import fr::pacman::core::service::DatabaseUtils/]


[template public initDatabase(r : entity::Root, es : Sequence(entity::Entity) , dbType : String) post(self.removeEmptyLines())]
  [for (e : entity::Entity | es)]
    [e.writeInsert(e.referencesFK(), e.autoAttributes(), dbType)/]
  [/for]
  [r.initJoinTables(dbType)/]
[/template]

[comment initialisation spécifique pour les tables de jointure./]
[template private initJoinTables(root : entity::Root, dbType : String)]
  [for (r : environment::Reference | root.referencesJT())]
    [r.writeInsert(dbType)/]
  [/for]
[/template]

[comment écriture de la ligne d'insertion pour une table de jointure./]
[query private writeInsert(r : environment::Reference, dbType : String) : String = 'insert into ' + r.nameTableSchemaJoin().toUpper() 
	+ ' (' + r.containingType.oclAsType(entity::Entity).parentOrSelf().namePrimaryKey().toUpper() + ',' + if (r.isStarRecursive()) then 
	r.referencedType.oclAsType(entity::Entity).parentOrSelf().namePrimaryKey().insert(r.suffixSqlPrimaryKeyJoinRecursive(), r.suffixSqlId()).toUpper() 
	else r.referencedType.oclAsType(entity::Entity).parentOrSelf().namePrimaryKey().toUpper() endif + ')' + ' values (' 
	+ r.defaultSqlIntegrationTestSequenceStart() + ',' + r.defaultSqlIntegrationTestSequenceStart() + ');'/]

[comment écriture de la ligne d'insertion pour une table./]
[query private writeInsert(e : entity::Entity, rs : OrderedSet(environment::Reference), oas : Sequence(String) , dbType : String) : String = 
	('insert into ' + e.parentOrSelf().nameTableSchema().toUpper() + ' ('+ e.writeColumns(rs).toUpper() + ',' + oas->collect(o | o.nameAutoAttribute().toUpper())
	->sep(',') +')' + ' values (' + (e.defaultSqlIntegrationTestSequenceStart() + ',' + e.attributesNoPKAndNoComputed()->asSequence()
	->collect(o : environment::Attribute | o.get_defaulValueForColumn())->sep(',') + ',' + rs->asSequence()->collect(o | o.defaultSqlForeignkey())
	->sep(',')) + ',' + oas->collect(o | o.autoAttributeType().get_defaulValueForColumn())->sep(',') + ');').sanitize()/]

[comment écriture de la ligne pour la liste des colonnes de la table./]
[query private writeColumns (e : entity::Entity, rs : OrderedSet(environment::Reference)) : String =  e.parentOrSelf().namePrimaryKey() 
	+ ',' + e.attributesNoPKAndNoComputed()->collect(o : environment::Attribute | o.nameColumn())->sep(',') + ',' 
	+ rs->collect(o | if (o.isZeroOneRecursive()) then o.nameSimplePropertyID().toUpper() 
	else o.nameReferenceId(o.referencedEntity(e).parentOrSelf(), o.get_namingIndex(rs)) endif)->sep(',')/]
	
[comment supprime les virgules non nécessaires dans la liste des colonnes et des valeurs (on y va pas à pas...)./]
[query private sanitize(s : String) : String = s.replaceAll(',+',',').replaceAll(',\\)', '\\)')/]
