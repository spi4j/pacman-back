[module constraints(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
						'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::name::eobjects/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::query::database/]
[import fr::pacman::core::aql::query::entity/]
[import fr::pacman::sql::aql::script::headers/]

[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::service::DatabaseUtils/]
[import fr::pacman::core::service::InheritanceUtils/]

[comment création de l'ensemble des contraintes pour la base de données./]
[template public createConstraints(root : entity::Root, es : Sequence(entity::Entity), ess : Sequence(entity::Entity), dbType : String)]
  [root.constraints(es,ess,root.cmdCreate(),dbType)/]
[/template]

[comment suppression de l'ensemble des contraintes pour la base de données./]
[template public dropConstraints(root : entity::Root, es : Sequence(entity::Entity), ess : Sequence(entity::Entity), dbType : String)]
  [root.constraints(es,ess,root.cmdDelete(),dbType)/]
[/template]

[comment écriture des lignes pour les contraintes de la base de données./]
[template private constraints(root : entity::Root, es : Sequence(entity::Entity), ess : Sequence(entity::Entity), cmd : String, dbType : String)]
  [root.constraintsHeader()/]
  [for (e : entity::Entity | es)]
    [for (a : environment::Attribute | e.attributes)]
      [if (a.has_metaPhysicalCheck())]
        [e.writeCheck(a, e.get_counterCK(), cmd)/];
      [/if]
      [if (a.type.oclIsKindOf(environment::Enumeration) 
        and not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty())]
        [e.writeCheckEnum(a, e.get_counterCK(), cmd)/];
      [/if]
    [/for]
    [for (r : environment::Reference | e.referencesFKResolved(es,ess))]
      [e.superTypeOrSelf().writeForeignKey(r, e.get_counterFK(1), cmd)/];
    [/for]
  [/for]
  [for (r : environment::Reference | root.referencesJTResolved(es,ess))]
    [r.writeForeignKeyJoin1(cmd)/];
    [r.writeForeignKeyJoin2(cmd)/];
  [/for]
[/template]

[comment écriture de la ligne pour une contrainte sur les clés étrangères./]
[query private writeForeignKey(e : entity::Entity, r : environment::Reference, idx : Integer, cmd : String) : String = 'alter table ' 
	+ e.nameTableSchema().toUpper() +  if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' add' else ' drop' endif + ' constraint ' 
	+ e.nameConstraintForeignKey(r, idx).toUpper() + if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' foreign key (' + if (r.isZeroOneRecursive()) 
	then r.nameSimplePropertyID().toUpper() else  r.nameReferenceId(r.referencedEntity(e), 0).toUpper() endif + ') references ' 
	+ r.referencedEntity(e).oclAsType(entity::Entity).nameTableSchema().toUpper() + ' (' +  r.referencedEntity(e).oclAsType(entity::Entity)
	.namePrimaryKey().toUpper() + ')' else '' endif/]

[comment écriture de la ligne pour une contrainte sur les clé étrangères de jointure./]
[query private writeForeignKeyJoin1(r : environment::Reference, cmd : String) : String = 'alter table ' + r.nameTableSchemaJoin().toUpper() 
	+  if (cmd.equalsIgnoreCase(r.cmdCreate())) then ' add' else ' drop' endif + ' constraint ' + r.nameConstraintJointure1().toUpper() 
	+ if (cmd.equalsIgnoreCase(r.cmdCreate())) then ' foreign key (' + r.containingType.oclAsType(entity::Entity).superTypeOrSelf().namePrimaryKey()
	.toUpper() + ') references ' + r.containingType.oclAsType(entity::Entity).superTypeOrSelf().nameTableSchema().toUpper() + ' (' 
	+ r.containingType.oclAsType(entity::Entity).superTypeOrSelf().namePrimaryKey().toUpper() + ')' else '' endif/]
	
[comment écriture de la ligne pour une contrainte sur les clé étrangères de jointure./]
[query private writeForeignKeyJoin2(r : environment::Reference, cmd : String) : String = 'alter table ' + r.nameTableSchemaJoin().toUpper() 
	+  if (cmd.equalsIgnoreCase(r.cmdCreate())) then ' add' else ' drop' endif + ' constraint ' + r.nameConstraintJointure2().toUpper() 
	+ if (cmd.equalsIgnoreCase(r.cmdCreate())) then ' foreign key (' + if (r.isRecursive()) then r.referencedType.oclAsType(entity::Entity)
	.superTypeOrSelf().namePrimaryKey().insert(r.suffixSqlPrimaryKeyJoinRecursive(),r.suffixSqlId()).toUpper() else r.referencedType.oclAsType(entity::Entity)
	.superTypeOrSelf().namePrimaryKey().toUpper() endif + ') references ' + r.referencedType.oclAsType(entity::Entity).superTypeOrSelf().nameTableSchema().toUpper() 
	+ ' (' + r.referencedType.oclAsType(entity::Entity).superTypeOrSelf().namePrimaryKey().toUpper() + ')' endif else '' endif/]

[comment écriture de la ligne pour la contrainte de vérification (check) sur un attribut./]
[query private writeCheck(e : entity::Entity, a : environment::Attribute, idx : Integer, cmd : String) : String = 'alter table ' 
	+  e.nameTableSchema().toUpper() +  if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' add' else ' drop' endif + ' constraint ' 
	+  e.nameConstraintCheck(idx).toUpper() + if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' CHECK (' + a.nameColumn().toUpper() 
	+ ' ' + a.get_metaPhysicalCheck() + ')' else '' endif/]

[comment écriture de la ligne pour la contrainte de vérification (check) sur un attribut de type énumération./]
[query private writeCheckEnum(e : entity::Entity, a : environment::Attribute, idx : Integer, cmd : String) : String = 'alter table ' 
	+ e.nameTableSchema().toUpper() +  if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' add' else ' drop' endif + ' constraint ' 
	+  e.nameConstraintCheck(idx).toUpper() + if (cmd.equalsIgnoreCase(e.cmdCreate())) then ' CHECK (' + a.nameColumn().toUpper() + ' IN ('
	+ a.type.oclAsType(environment::Enumeration).literals->asSequence()->collect(temp1 | temp1.enumStruct(a.type.oclAsType(environment::Enumeration)))
	->sep(',') + '))' else '' endif/]
	
[query private enumStruct(l : environment::Literal, e : environment::Enumeration) : String = '\'' +  l.name + '\''/]	