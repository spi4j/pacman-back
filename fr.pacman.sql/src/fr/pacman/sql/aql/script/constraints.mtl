[module constraints(	'http://www.obeonetwork.org/dsl/entity/3.0.0', 
						'http://www.obeonetwork.org/dsl/environment/3.0.0')/]

[import fr::pacman::core::aql::base/]
[import fr::pacman::core::aql::string/]
[import fr::pacman::core::aql::query::eobject/]
[import fr::pacman::core::aql::query::reference/]
[import fr::pacman::core::aql::name::databases/]
[import fr::pacman::core::aql::query::database/]
[import fr::pacman::sql::aql::script::headers/]

[import fr::pacman::core::service::AnnotationUtils/]
[import fr::pacman::core::service::DatabaseUtils/]

[comment création de l'ensemble des contraintes pour la base de données./]
[template public createConstraints(r : entity::Root)]
  [r.constraints(r.commandCreate())/]
[/template]

[comment suppression de l'ensemble des contraintes pour la base de données./]
[template public dropConstraints(r : entity::Root)]
  [r.constraints(r.commandDelete())/]
[/template]

[comment écriture des lignes pour les contraintes de la base de données./]
[template private constraints(r : entity::Root, command : String)]
  [r.constraintsHeader()/]
  [for (e : entity::Entity | r.persistentEntities())]
    [for (a : environment::Attribute | e.attributes)]
      [if (a.has_metaPhysicalCheck())]
        [e.writeCheck(a, e.get_counterCK(), command)/];
      [/if]
      [if (a.type.oclIsKindOf(environment::Enumeration) 
        and not OrderedSet{a.type.oclAsType(environment::Enumeration)}->isEmpty())]
        [e.writeCheckEnum(a, e.get_counterCK(), command)/];
      [/if]
    [/for]
    [let rs = e.referencesForeignKeys()]
      [for (r2 : environment::Reference | rs)]
        [e.writeForeignKey(r2, e.get_counterFK(1), r2.get_namingIndex(rs), command )/];
      [/for]
    [/let]
  [/for]
  [for (r2 : environment::Reference | r.referencesJoinTables())]
    [r2.writeForeignKeyJoin1(command)/];
    [r2.writeForeignKeyJoin2(command)/];
  [/for]
[/template]

[comment écriture de la ligne pour une contrainte sur les clés étrangères./]
[query private writeForeignKey(e : entity::Entity, r : environment::Reference, idx : Integer, idx2 : Integer, command : String) : String = 'alter table ' 
	+ e.nameTableSchema().toUpper() +  if (command.equalsIgnoreCase(e.commandCreate())) then ' add' else ' drop' endif + ' constraint ' + e.nameConstraintForeignKey(r, idx).toUpper() 
	+ if (command.equalsIgnoreCase(e.commandCreate())) then ' foreign key (' + r.nameReferenceId(r.structuredType(e), idx2).toUpper() + ') references ' 
	+ r.structuredType(e).oclAsType(entity::Entity).nameTableSchema().toUpper() + ' (' +  r.structuredType(e).oclAsType(entity::Entity).namePrimaryKey().toUpper() + ')' 
	else '' endif/]

[comment écriture de la ligne pour une contrainte sur les clé étrangères de jointure./]
[query private writeForeignKeyJoin1(r : environment::Reference, command : String) : String = 'alter table ' + r.nameTableSchemaJoin().toUpper() 
	+  if (command.equalsIgnoreCase(r.commandCreate())) then ' add' else ' drop' endif + ' constraint ' + r.nameConstraintJointure1().toUpper() 
	+ if (command.equalsIgnoreCase(r.commandCreate())) then ' foreign key (' + r.containingType.oclAsType(entity::Entity).namePrimaryKey().toUpper() 
	+ ') references ' + r.containingType.oclAsType(entity::Entity).nameTableSchema().toUpper() + ' (' + r.containingType.oclAsType(entity::Entity)
	.namePrimaryKey().toUpper() + ')' else '' endif/]
	
[comment écriture de la ligne pour une contrainte sur les clé étrangères de jointure./]
[query private writeForeignKeyJoin2(r : environment::Reference, command : String) : String = 'alter table ' + r.nameTableSchemaJoin().toUpper() 
	+  if (command.equalsIgnoreCase(r.commandCreate())) then ' add' else ' drop' endif + ' constraint ' + r.nameConstraintJointure2().toUpper() 
	+ if (command.equalsIgnoreCase(r.commandCreate())) then ' foreign key (' + r.referencedType.oclAsType(entity::Entity).namePrimaryKey().toUpper() 
	+ ') references ' + r.referencedType.oclAsType(entity::Entity).nameTableSchema().toUpper() + ' (' + r.referencedType.oclAsType(entity::Entity)
	.namePrimaryKey().toUpper() + ')' else '' endif/]

[comment écriture de la ligne pour la contrainte de vérification (check) sur un attribut./]
[query private writeCheck(e : entity::Entity, a : environment::Attribute, idx : Integer, command : String) : String = 'alter table ' 
	+  e.nameTableSchema().toUpper() +  if (command.equalsIgnoreCase(e.commandCreate())) then ' add' else ' drop' endif + ' constraint ' 
	+  e.nameConstraintCheck(idx).toUpper() + if (command.equalsIgnoreCase(e.commandCreate())) then ' CHECK (' + a.nameColumn().toUpper() 
	+ ' ' + a.get_metaPhysicalCheck() + ')' else '' endif/]

[comment écriture de la ligne pour la contrainte de vérification (check) sur un attribut de type énumération./]
[query private writeCheckEnum(e : entity::Entity, a : environment::Attribute, idx : Integer, command : String) : String = 'alter table ' 
	+ e.nameTableSchema().toUpper() +  if (command.equalsIgnoreCase(e.commandCreate())) then ' add' else ' drop' endif + ' constraint ' 
	+  e.nameConstraintCheck(idx).toUpper() + if (command.equalsIgnoreCase(e.commandCreate())) then ' CHECK (' + a.nameColumn().toUpper() + ' IN ('
	+ a.type.oclAsType(environment::Enumeration).literals->asSequence()->collect(temp1 | temp1.enumStruct(a.type.oclAsType(environment::Enumeration)))
	->sep(',') + '))' else '' endif/]
	
[query private enumStruct(l : environment::Literal, e : environment::Enumeration) : String = '\'' +  l.name + '\''/]	